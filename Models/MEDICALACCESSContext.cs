using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SyncfusionASPNETCoreApplication2.Models
{
    public partial class MEDICALACCESSContext : DbContext
    {
        public MEDICALACCESSContext()
        {
        }

        public MEDICALACCESSContext(DbContextOptions<MEDICALACCESSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AArtProductClassification> AArtProductClassification { get; set; }
        public virtual DbSet<ACdcregion> ACdcregion { get; set; }
        public virtual DbSet<AClientType> AClientType { get; set; }
        public virtual DbSet<AColour> AColour { get; set; }
        public virtual DbSet<ACopYear> ACopYear { get; set; }
        public virtual DbSet<ACounty> ACounty { get; set; }
        public virtual DbSet<ADeliveryZone> ADeliveryZone { get; set; }
        public virtual DbSet<ADistrict> ADistrict { get; set; }
        public virtual DbSet<ADriver> ADriver { get; set; }
        public virtual DbSet<ADriverStatus> ADriverStatus { get; set; }
        public virtual DbSet<ADrugBasicUnit> ADrugBasicUnit { get; set; }
        public virtual DbSet<ADrugDosage> ADrugDosage { get; set; }
        public virtual DbSet<ADrugErrorFactor> ADrugErrorFactor { get; set; }
        public virtual DbSet<ADrugFluconazale> ADrugFluconazale { get; set; }
        public virtual DbSet<ADrugFormulation> ADrugFormulation { get; set; }
        public virtual DbSet<ADrugFormulationCode> ADrugFormulationCode { get; set; }
        public virtual DbSet<ADrugItem> ADrugItem { get; set; }
        public virtual DbSet<ADrugRegimen> ADrugRegimen { get; set; }
        public virtual DbSet<ADrugRegimenCategory> ADrugRegimenCategory { get; set; }
        public virtual DbSet<ADrugRegimenClassification> ADrugRegimenClassification { get; set; }
        public virtual DbSet<ADrugsSupplier> ADrugsSupplier { get; set; }
        public virtual DbSet<AEventCategory> AEventCategory { get; set; }
        public virtual DbSet<AFacilities> AFacilities { get; set; }
        public virtual DbSet<AFacilityLevelOfCare> AFacilityLevelOfCare { get; set; }
        public virtual DbSet<AFacilityType> AFacilityType { get; set; }
        public virtual DbSet<AGender> AGender { get; set; }
        public virtual DbSet<AHivRapidTestKit> AHivRapidTestKit { get; set; }
        public virtual DbSet<AImplimentingPartners> AImplimentingPartners { get; set; }
        public virtual DbSet<AInsuranceCompany> AInsuranceCompany { get; set; }
        public virtual DbSet<AItems> AItems { get; set; }
        public virtual DbSet<ALabCategory1> ALabCategory1 { get; set; }
        public virtual DbSet<ALabCategory2> ALabCategory2 { get; set; }
        public virtual DbSet<ALabCategory3> ALabCategory3 { get; set; }
        public virtual DbSet<ALabGroup1> ALabGroup1 { get; set; }
        public virtual DbSet<ALabGroupChild1> ALabGroupChild1 { get; set; }
        public virtual DbSet<ALabGroupChild2> ALabGroupChild2 { get; set; }
        public virtual DbSet<ALabItem> ALabItem { get; set; }
        public virtual DbSet<AManufacturers> AManufacturers { get; set; }
        public virtual DbSet<AMonth> AMonth { get; set; }
        public virtual DbSet<AMonthQuarter> AMonthQuarter { get; set; }
        public virtual DbSet<AMonthSector> AMonthSector { get; set; }
        public virtual DbSet<ANdaRegistration> ANdaRegistration { get; set; }
        public virtual DbSet<AOrderStatus> AOrderStatus { get; set; }
        public virtual DbSet<AOrderType> AOrderType { get; set; }
        public virtual DbSet<AOwnership> AOwnership { get; set; }
        public virtual DbSet<AParish> AParish { get; set; }
        public virtual DbSet<APatientLoad> APatientLoad { get; set; }
        public virtual DbSet<AProduct> AProduct { get; set; }
        public virtual DbSet<AProduct1> AProduct1 { get; set; }
        public virtual DbSet<AProductCategory> AProductCategory { get; set; }
        public virtual DbSet<AProductClassification> AProductClassification { get; set; }
        public virtual DbSet<AProductLabCategory> AProductLabCategory { get; set; }
        public virtual DbSet<AProductLabCategory1> AProductLabCategory1 { get; set; }
        public virtual DbSet<AProductStatus> AProductStatus { get; set; }
        public virtual DbSet<AProductType> AProductType { get; set; }
        public virtual DbSet<ARegion> ARegion { get; set; }
        public virtual DbSet<ASectorChange> ASectorChange { get; set; }
        public virtual DbSet<ASmcCategory> ASmcCategory { get; set; }
        public virtual DbSet<ASmcItem> ASmcItem { get; set; }
        public virtual DbSet<ASubcounty> ASubcounty { get; set; }
        public virtual DbSet<ASupplier> ASupplier { get; set; }
        public virtual DbSet<ASupplierCategory> ASupplierCategory { get; set; }
        public virtual DbSet<ASupplierStatus> ASupplierStatus { get; set; }
        public virtual DbSet<ATreatmentFluconazole> ATreatmentFluconazole { get; set; }
        public virtual DbSet<AUserType> AUserType { get; set; }
        public virtual DbSet<AVehicle> AVehicle { get; set; }
        public virtual DbSet<AVehicleStatus> AVehicleStatus { get; set; }
        public virtual DbSet<AVehicleType> AVehicleType { get; set; }
        public virtual DbSet<AVenue> AVenue { get; set; }
        public virtual DbSet<AVenueList> AVenueList { get; set; }
        public virtual DbSet<AVillage> AVillage { get; set; }
        public virtual DbSet<AWarehouse> AWarehouse { get; set; }
        public virtual DbSet<AYear> AYear { get; set; }
        public virtual DbSet<AYesNo> AYesNo { get; set; }
        public virtual DbSet<Applications> Applications { get; set; }
        public virtual DbSet<ApprovedFacilityOrders> ApprovedFacilityOrders { get; set; }
        public virtual DbSet<AspNetRoles1> AspNetRoles1 { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers1> AspNetUsers1 { get; set; }
        public virtual DbSet<AspnetApplications> AspnetApplications { get; set; }
        public virtual DbSet<AspnetMembership> AspnetMembership { get; set; }
        public virtual DbSet<AspnetPaths> AspnetPaths { get; set; }
        public virtual DbSet<AspnetPersonalizationAllUsers> AspnetPersonalizationAllUsers { get; set; }
        public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUser { get; set; }
        public virtual DbSet<AspnetProfile> AspnetProfile { get; set; }
        public virtual DbSet<AspnetRoles> AspnetRoles { get; set; }
        public virtual DbSet<AspnetSchemaVersions> AspnetSchemaVersions { get; set; }
        public virtual DbSet<AspnetUsers> AspnetUsers { get; set; }
        public virtual DbSet<AspnetUsersInRoles> AspnetUsersInRoles { get; set; }
        public virtual DbSet<AspnetWebEventEvents> AspnetWebEventEvents { get; set; }
        public virtual DbSet<ChssAllOrdersMadeView> ChssAllOrdersMadeView { get; set; }
        public virtual DbSet<ChssAreas> ChssAreas { get; set; }
        public virtual DbSet<ChssAreasVisited> ChssAreasVisited { get; set; }
        public virtual DbSet<ChssArtPatientCareRegister> ChssArtPatientCareRegister { get; set; }
        public virtual DbSet<ChssArtPatientDispensingLog> ChssArtPatientDispensingLog { get; set; }
        public virtual DbSet<ChssArtPatientToolAvailability> ChssArtPatientToolAvailability { get; set; }
        public virtual DbSet<ChssArtPatientTreatementGuide> ChssArtPatientTreatementGuide { get; set; }
        public virtual DbSet<ChssCategory> ChssCategory { get; set; }
        public virtual DbSet<ChssClassification> ChssClassification { get; set; }
        public virtual DbSet<ChssComments> ChssComments { get; set; }
        public virtual DbSet<ChssEmail> ChssEmail { get; set; }
        public virtual DbSet<ChssEquipment> ChssEquipment { get; set; }
        public virtual DbSet<ChssEquipmentCategory> ChssEquipmentCategory { get; set; }
        public virtual DbSet<ChssEquipmentVerification> ChssEquipmentVerification { get; set; }
        public virtual DbSet<ChssExpiryFefoUse> ChssExpiryFefoUse { get; set; }
        public virtual DbSet<ChssExpiryPresence> ChssExpiryPresence { get; set; }
        public virtual DbSet<ChssExpiryTrackingTools> ChssExpiryTrackingTools { get; set; }
        public virtual DbSet<ChssFacilityContacts> ChssFacilityContacts { get; set; }
        public virtual DbSet<ChssFacilityDetails> ChssFacilityDetails { get; set; }
        public virtual DbSet<ChssFacilityVisits> ChssFacilityVisits { get; set; }
        public virtual DbSet<ChssFeedBackActionArea> ChssFeedBackActionArea { get; set; }
        public virtual DbSet<ChssFeedBackPharmacovigilenceSolution> ChssFeedBackPharmacovigilenceSolution { get; set; }
        public virtual DbSet<ChssFeedBackReport> ChssFeedBackReport { get; set; }
        public virtual DbSet<ChssFeedBackReportView> ChssFeedBackReportView { get; set; }
        public virtual DbSet<ChssFeedBackSolution> ChssFeedBackSolution { get; set; }
        public virtual DbSet<ChssFrostStockMovementOptions> ChssFrostStockMovementOptions { get; set; }
        public virtual DbSet<ChssFullScore> ChssFullScore { get; set; }
        public virtual DbSet<ChssHivOrderView> ChssHivOrderView { get; set; }
        public virtual DbSet<ChssLabOrders> ChssLabOrders { get; set; }
        public virtual DbSet<ChssLabOrdersView> ChssLabOrdersView { get; set; }
        public virtual DbSet<ChssLocation> ChssLocation { get; set; }
        public virtual DbSet<ChssMAreasVisited> ChssMAreasVisited { get; set; }
        public virtual DbSet<ChssMArtPatientCareAvailability> ChssMArtPatientCareAvailability { get; set; }
        public virtual DbSet<ChssMArtPatientCareAvailability1> ChssMArtPatientCareAvailability1 { get; set; }
        public virtual DbSet<ChssMArtPatientCareDispensingLog> ChssMArtPatientCareDispensingLog { get; set; }
        public virtual DbSet<ChssMArtPatientCareRegister> ChssMArtPatientCareRegister { get; set; }
        public virtual DbSet<ChssMArtPatientCareTreatment> ChssMArtPatientCareTreatment { get; set; }
        public virtual DbSet<ChssMComments> ChssMComments { get; set; }
        public virtual DbSet<ChssMConnectedToSap> ChssMConnectedToSap { get; set; }
        public virtual DbSet<ChssMDetails> ChssMDetails { get; set; }
        public virtual DbSet<ChssMEquipment> ChssMEquipment { get; set; }
        public virtual DbSet<ChssMEquipmentVerification> ChssMEquipmentVerification { get; set; }
        public virtual DbSet<ChssMExpiryFefoUse> ChssMExpiryFefoUse { get; set; }
        public virtual DbSet<ChssMExpiryPresence> ChssMExpiryPresence { get; set; }
        public virtual DbSet<ChssMExpiryTrackingTools> ChssMExpiryTrackingTools { get; set; }
        public virtual DbSet<ChssMFacilities> ChssMFacilities { get; set; }
        public virtual DbSet<ChssMFeedBackActionArea> ChssMFeedBackActionArea { get; set; }
        public virtual DbSet<ChssMFeedBackDetails> ChssMFeedBackDetails { get; set; }
        public virtual DbSet<ChssMFeedBackSolution> ChssMFeedBackSolution { get; set; }
        public virtual DbSet<ChssMFeedbackParameters> ChssMFeedbackParameters { get; set; }
        public virtual DbSet<ChssMFrostStockMovement> ChssMFrostStockMovement { get; set; }
        public virtual DbSet<ChssMLocation> ChssMLocation { get; set; }
        public virtual DbSet<ChssMOrderAccuracy> ChssMOrderAccuracy { get; set; }
        public virtual DbSet<ChssMOrderBalance> ChssMOrderBalance { get; set; }
        public virtual DbSet<ChssMOrderPatientsReport> ChssMOrderPatientsReport { get; set; }
        public virtual DbSet<ChssMOrderReport> ChssMOrderReport { get; set; }
        public virtual DbSet<ChssMOrderTestKits> ChssMOrderTestKits { get; set; }
        public virtual DbSet<ChssMPam> ChssMPam { get; set; }
        public virtual DbSet<ChssMPharmSolution> ChssMPharmSolution { get; set; }
        public virtual DbSet<ChssMProducts> ChssMProducts { get; set; }
        public virtual DbSet<ChssMScores> ChssMScores { get; set; }
        public virtual DbSet<ChssMSctoContact> ChssMSctoContact { get; set; }
        public virtual DbSet<ChssMStockManagement> ChssMStockManagement { get; set; }
        public virtual DbSet<ChssMStorageCleanliness> ChssMStorageCleanliness { get; set; }
        public virtual DbSet<ChssMStoragePractice> ChssMStoragePractice { get; set; }
        public virtual DbSet<ChssMStorageSystem> ChssMStorageSystem { get; set; }
        public virtual DbSet<ChssMStoreCondition> ChssMStoreCondition { get; set; }
        public virtual DbSet<ChssMSupervised> ChssMSupervised { get; set; }
        public virtual DbSet<ChssMSupervisors> ChssMSupervisors { get; set; }
        public virtual DbSet<ChssMTraceabilityFacilityStoreToDispensingUnit> ChssMTraceabilityFacilityStoreToDispensingUnit { get; set; }
        public virtual DbSet<ChssMTraceabilityIssuedToPatients> ChssMTraceabilityIssuedToPatients { get; set; }
        public virtual DbSet<ChssMTraceabilityRequisitionSystem> ChssMTraceabilityRequisitionSystem { get; set; }
        public virtual DbSet<ChssMTraceabilitySpecialisation> ChssMTraceabilitySpecialisation { get; set; }
        public virtual DbSet<ChssMTraceabilitySupplierToFacilityStore> ChssMTraceabilitySupplierToFacilityStore { get; set; }
        public virtual DbSet<ChssMTreatment1> ChssMTreatment1 { get; set; }
        public virtual DbSet<ChssModule> ChssModule { get; set; }
        public virtual DbSet<ChssModuleSector> ChssModuleSector { get; set; }
        public virtual DbSet<ChssModuleView> ChssModuleView { get; set; }
        public virtual DbSet<ChssOiStiOrderView> ChssOiStiOrderView { get; set; }
        public virtual DbSet<ChssOrderAccuracy> ChssOrderAccuracy { get; set; }
        public virtual DbSet<ChssOrderBalanceComparison> ChssOrderBalanceComparison { get; set; }
        public virtual DbSet<ChssOrderMeans> ChssOrderMeans { get; set; }
        public virtual DbSet<ChssOrderPatientsReport> ChssOrderPatientsReport { get; set; }
        public virtual DbSet<ChssOrderTestKits> ChssOrderTestKits { get; set; }
        public virtual DbSet<ChssProductOrderView> ChssProductOrderView { get; set; }
        public virtual DbSet<ChssQuestionGuid> ChssQuestionGuid { get; set; }
        public virtual DbSet<ChssRegimenView> ChssRegimenView { get; set; }
        public virtual DbSet<ChssRxSolutionInstalled> ChssRxSolutionInstalled { get; set; }
        public virtual DbSet<ChssScore> ChssScore { get; set; }
        public virtual DbSet<ChssSmcSlmOrderView> ChssSmcSlmOrderView { get; set; }
        public virtual DbSet<ChssStockManagement> ChssStockManagement { get; set; }
        public virtual DbSet<ChssStorageCondition> ChssStorageCondition { get; set; }
        public virtual DbSet<ChssStoragePractice> ChssStoragePractice { get; set; }
        public virtual DbSet<ChssStorageSystem> ChssStorageSystem { get; set; }
        public virtual DbSet<ChssStoreCleanliness> ChssStoreCleanliness { get; set; }
        public virtual DbSet<ChssSupervised> ChssSupervised { get; set; }
        public virtual DbSet<ChssSupervisor> ChssSupervisor { get; set; }
        public virtual DbSet<ChssSupervisorType> ChssSupervisorType { get; set; }
        public virtual DbSet<ChssSync> ChssSync { get; set; }
        public virtual DbSet<ChssTraceabilityFacilityStoreToArtDispensingUnit> ChssTraceabilityFacilityStoreToArtDispensingUnit { get; set; }
        public virtual DbSet<ChssTraceabilityIssuedToPatients> ChssTraceabilityIssuedToPatients { get; set; }
        public virtual DbSet<ChssTraceabilityRequisitioningSystem> ChssTraceabilityRequisitioningSystem { get; set; }
        public virtual DbSet<ChssTraceabilitySpecialisation> ChssTraceabilitySpecialisation { get; set; }
        public virtual DbSet<ChssTraceabilitySpecialisationView> ChssTraceabilitySpecialisationView { get; set; }
        public virtual DbSet<ChssTraceabilitySpecializationClassification> ChssTraceabilitySpecializationClassification { get; set; }
        public virtual DbSet<ChssTraceabilitySupplierToFacilityStore> ChssTraceabilitySupplierToFacilityStore { get; set; }
        public virtual DbSet<ChssTrackingPlaces> ChssTrackingPlaces { get; set; }
        public virtual DbSet<ChssVSavedArtPatientAvailabilty> ChssVSavedArtPatientAvailabilty { get; set; }
        public virtual DbSet<ChssVSupervised> ChssVSupervised { get; set; }
        public virtual DbSet<ChssVSupervisor> ChssVSupervisor { get; set; }
        public virtual DbSet<ChssViewFacilities> ChssViewFacilities { get; set; }
        public virtual DbSet<ChssViewGuidQuestion> ChssViewGuidQuestion { get; set; }
        public virtual DbSet<ChssViewQuestionClassification> ChssViewQuestionClassification { get; set; }
        public virtual DbSet<ChssViralLoadOrderView> ChssViralLoadOrderView { get; set; }
        public virtual DbSet<DistAssessment> DistAssessment { get; set; }
        public virtual DbSet<DistAssessmentCategory> DistAssessmentCategory { get; set; }
        public virtual DbSet<DistAssessmentResult> DistAssessmentResult { get; set; }
        public virtual DbSet<DistAssessmentResultHeader> DistAssessmentResultHeader { get; set; }
        public virtual DbSet<DistDistibutionSchedule> DistDistibutionSchedule { get; set; }
        public virtual DbSet<DistDistibutionScheduleMaulStaff> DistDistibutionScheduleMaulStaff { get; set; }
        public virtual DbSet<DistDsStatus> DistDsStatus { get; set; }
        public virtual DbSet<DistFuelType> DistFuelType { get; set; }
        public virtual DbSet<DistIncidentReport> DistIncidentReport { get; set; }
        public virtual DbSet<DistIncidentReportOtherVehicle> DistIncidentReportOtherVehicle { get; set; }
        public virtual DbSet<DistIncidentReportWitness> DistIncidentReportWitness { get; set; }
        public virtual DbSet<DistJobTitle> DistJobTitle { get; set; }
        public virtual DbSet<DistLocation> DistLocation { get; set; }
        public virtual DbSet<DistLocationOther> DistLocationOther { get; set; }
        public virtual DbSet<DistLogPurpose> DistLogPurpose { get; set; }
        public virtual DbSet<DistLogbook> DistLogbook { get; set; }
        public virtual DbSet<DistOperatorAccident> DistOperatorAccident { get; set; }
        public virtual DbSet<DistOperatorPermit> DistOperatorPermit { get; set; }
        public virtual DbSet<DistOperatorPersonal> DistOperatorPersonal { get; set; }
        public virtual DbSet<DistOperatorTraining> DistOperatorTraining { get; set; }
        public virtual DbSet<DistPackingList> DistPackingList { get; set; }
        public virtual DbSet<DistPermitCategory> DistPermitCategory { get; set; }
        public virtual DbSet<DistServiceStation> DistServiceStation { get; set; }
        public virtual DbSet<DistStatusDelivey> DistStatusDelivey { get; set; }
        public virtual DbSet<DistVehicleAuthorization> DistVehicleAuthorization { get; set; }
        public virtual DbSet<DistVehicleCheckDefectReport> DistVehicleCheckDefectReport { get; set; }
        public virtual DbSet<DistVehicleCheckParticular> DistVehicleCheckParticular { get; set; }
        public virtual DbSet<DistVehicleCheckRecommendation> DistVehicleCheckRecommendation { get; set; }
        public virtual DbSet<DistVehicleCheckStatus> DistVehicleCheckStatus { get; set; }
        public virtual DbSet<DistVehicleClassification> DistVehicleClassification { get; set; }
        public virtual DbSet<DistVehicleCondition> DistVehicleCondition { get; set; }
        public virtual DbSet<DistVehicleInventory> DistVehicleInventory { get; set; }
        public virtual DbSet<DistVehicleInventoryTracking> DistVehicleInventoryTracking { get; set; }
        public virtual DbSet<DistVehicleInventoryTrackingSafetyEquipment> DistVehicleInventoryTrackingSafetyEquipment { get; set; }
        public virtual DbSet<DistVehicleInventoryTrackingSecuritySystem> DistVehicleInventoryTrackingSecuritySystem { get; set; }
        public virtual DbSet<DistVehicleMaintaince> DistVehicleMaintaince { get; set; }
        public virtual DbSet<DistVehicleMajorUse> DistVehicleMajorUse { get; set; }
        public virtual DbSet<DistVehicleMake> DistVehicleMake { get; set; }
        public virtual DbSet<DistVehicleModel> DistVehicleModel { get; set; }
        public virtual DbSet<DistVehicleSafetyEquipment> DistVehicleSafetyEquipment { get; set; }
        public virtual DbSet<DistVehicleSecuritySystem> DistVehicleSecuritySystem { get; set; }
        public virtual DbSet<DistVehicleType> DistVehicleType { get; set; }
        public virtual DbSet<DistWorkingDays> DistWorkingDays { get; set; }
        public virtual DbSet<DistWorkingDaysMonth> DistWorkingDaysMonth { get; set; }
        public virtual DbSet<FileCollection> FileCollection { get; set; }
        public virtual DbSet<FileCollectionSupDoc> FileCollectionSupDoc { get; set; }
        public virtual DbSet<FilesClientInfo> FilesClientInfo { get; set; }
        public virtual DbSet<FoAActionTaken> FoAActionTaken { get; set; }
        public virtual DbSet<FoAAuthorizedRepresentative> FoAAuthorizedRepresentative { get; set; }
        public virtual DbSet<FoACommunicationMode> FoACommunicationMode { get; set; }
        public virtual DbSet<FoAComplaintAccuteness> FoAComplaintAccuteness { get; set; }
        public virtual DbSet<FoAComplaintCategory> FoAComplaintCategory { get; set; }
        public virtual DbSet<FoADocumentsAttached> FoADocumentsAttached { get; set; }
        public virtual DbSet<FoADosage> FoADosage { get; set; }
        public virtual DbSet<FoAFilesClientInfo> FoAFilesClientInfo { get; set; }
        public virtual DbSet<FoAInvestigation> FoAInvestigation { get; set; }
        public virtual DbSet<FoAInvestigationEvidence> FoAInvestigationEvidence { get; set; }
        public virtual DbSet<FoAMaulService> FoAMaulService { get; set; }
        public virtual DbSet<FoAQualityIssueIntervention> FoAQualityIssueIntervention { get; set; }
        public virtual DbSet<FoAReleaseInstruction> FoAReleaseInstruction { get; set; }
        public virtual DbSet<FoASsmt> FoASsmt { get; set; }
        public virtual DbSet<FoAStatus> FoAStatus { get; set; }
        public virtual DbSet<FoAssigmentEmail> FoAssigmentEmail { get; set; }
        public virtual DbSet<FoCertificateReleaseFrmQuarantine> FoCertificateReleaseFrmQuarantine { get; set; }
        public virtual DbSet<FoClientFeedback> FoClientFeedback { get; set; }
        public virtual DbSet<FoComplaint> FoComplaint { get; set; }
        public virtual DbSet<FoComplaintActionTaken> FoComplaintActionTaken { get; set; }
        public virtual DbSet<FoComplaintActiontakenTracker> FoComplaintActiontakenTracker { get; set; }
        public virtual DbSet<FoComplaintAffectedSites> FoComplaintAffectedSites { get; set; }
        public virtual DbSet<FoComplaintInvestigation> FoComplaintInvestigation { get; set; }
        public virtual DbSet<FoComplaintInvestigationQualIssue> FoComplaintInvestigationQualIssue { get; set; }
        public virtual DbSet<FoComplaintQualityIssue> FoComplaintQualityIssue { get; set; }
        public virtual DbSet<FoComplaintTracker> FoComplaintTracker { get; set; }
        public virtual DbSet<FoContactCategory> FoContactCategory { get; set; }
        public virtual DbSet<FoContactEmail> FoContactEmail { get; set; }
        public virtual DbSet<FoContactPerson> FoContactPerson { get; set; }
        public virtual DbSet<FoContactTelephone> FoContactTelephone { get; set; }
        public virtual DbSet<FoContactTitle> FoContactTitle { get; set; }
        public virtual DbSet<FoEmailsSent> FoEmailsSent { get; set; }
        public virtual DbSet<FoQiCloseOutCertificate> FoQiCloseOutCertificate { get; set; }
        public virtual DbSet<FoScto> FoScto { get; set; }
        public virtual DbSet<FoSctoContactPerson> FoSctoContactPerson { get; set; }
        public virtual DbSet<FoSsmtArea> FoSsmtArea { get; set; }
        public virtual DbSet<FoSsmtAreaVisited> FoSsmtAreaVisited { get; set; }
        public virtual DbSet<FoSsmtArtReadiness> FoSsmtArtReadiness { get; set; }
        public virtual DbSet<FoSsmtFacility> FoSsmtFacility { get; set; }
        public virtual DbSet<FoSsmtIndicator> FoSsmtIndicator { get; set; }
        public virtual DbSet<FoSsmtIndicatorTracker> FoSsmtIndicatorTracker { get; set; }
        public virtual DbSet<FoSsmtInidcatorGuideline> FoSsmtInidcatorGuideline { get; set; }
        public virtual DbSet<FoSsmtInterviewedPersonnel> FoSsmtInterviewedPersonnel { get; set; }
        public virtual DbSet<FoSsmtNote> FoSsmtNote { get; set; }
        public virtual DbSet<FoSsmtOrderingReporting> FoSsmtOrderingReporting { get; set; }
        public virtual DbSet<FoSsmtOrderingReportingIndicator> FoSsmtOrderingReportingIndicator { get; set; }
        public virtual DbSet<FoSsmtSiteTracker> FoSsmtSiteTracker { get; set; }
        public virtual DbSet<FoSsmtSiteTrackerSubmittedDocument> FoSsmtSiteTrackerSubmittedDocument { get; set; }
        public virtual DbSet<FoSsmtStockManagement> FoSsmtStockManagement { get; set; }
        public virtual DbSet<FoSsmtStockManagementScore> FoSsmtStockManagementScore { get; set; }
        public virtual DbSet<FoSsmtStoragePractice> FoSsmtStoragePractice { get; set; }
        public virtual DbSet<FoSsmtSubmittedDocument> FoSsmtSubmittedDocument { get; set; }
        public virtual DbSet<FoSsmtSupervisor> FoSsmtSupervisor { get; set; }
        public virtual DbSet<FoSsmtVisitPurpose> FoSsmtVisitPurpose { get; set; }
        public virtual DbSet<HssBaseline1> HssBaseline1 { get; set; }
        public virtual DbSet<HssBaseline2> HssBaseline2 { get; set; }
        public virtual DbSet<HssBaselineBulkStore> HssBaselineBulkStore { get; set; }
        public virtual DbSet<HssBaselineBulkStoreIndicators> HssBaselineBulkStoreIndicators { get; set; }
        public virtual DbSet<HssBaselineBulkStoreMethod> HssBaselineBulkStoreMethod { get; set; }
        public virtual DbSet<HssBaselineBulkStoreSubIndicator> HssBaselineBulkStoreSubIndicator { get; set; }
        public virtual DbSet<HssBaselineFocusGroupDiscussion> HssBaselineFocusGroupDiscussion { get; set; }
        public virtual DbSet<HssBaselineFocusGroupDiscussionIndicators> HssBaselineFocusGroupDiscussionIndicators { get; set; }
        public virtual DbSet<HssBaselineFocusGroupDiscussionMethod> HssBaselineFocusGroupDiscussionMethod { get; set; }
        public virtual DbSet<HssBaselineFocusGroupDiscussionSubIndicator> HssBaselineFocusGroupDiscussionSubIndicator { get; set; }
        public virtual DbSet<HssBaselineHfService> HssBaselineHfService { get; set; }
        public virtual DbSet<HssBaselineHfService1> HssBaselineHfService1 { get; set; }
        public virtual DbSet<HssBaselineHfService2> HssBaselineHfService2 { get; set; }
        public virtual DbSet<HssBaselineHfService3> HssBaselineHfService3 { get; set; }
        public virtual DbSet<HssBaselineHfServiceStaffResponsible> HssBaselineHfServiceStaffResponsible { get; set; }
        public virtual DbSet<HssBaselineInterviewee> HssBaselineInterviewee { get; set; }
        public virtual DbSet<HssBaselineInterviewer> HssBaselineInterviewer { get; set; }
        public virtual DbSet<HssBaselineLaboratory> HssBaselineLaboratory { get; set; }
        public virtual DbSet<HssBaselineLaboratoryAssessmentQuestion> HssBaselineLaboratoryAssessmentQuestion { get; set; }
        public virtual DbSet<HssBaselineLaboratoryChecklist> HssBaselineLaboratoryChecklist { get; set; }
        public virtual DbSet<HssBaselineLaboratoryChecklist1> HssBaselineLaboratoryChecklist1 { get; set; }
        public virtual DbSet<HssBaselineLaboratoryIndicator> HssBaselineLaboratoryIndicator { get; set; }
        public virtual DbSet<HssBaselineLaboratoryMachines> HssBaselineLaboratoryMachines { get; set; }
        public virtual DbSet<HssBaselineLaboratoryMethod> HssBaselineLaboratoryMethod { get; set; }
        public virtual DbSet<HssBaselineLaboratoryServiceFrequency> HssBaselineLaboratoryServiceFrequency { get; set; }
        public virtual DbSet<HssBaselineLaboratoryServiceProvider> HssBaselineLaboratoryServiceProvider { get; set; }
        public virtual DbSet<HssBaselineLmis> HssBaselineLmis { get; set; }
        public virtual DbSet<HssBaselineLmisIndicators> HssBaselineLmisIndicators { get; set; }
        public virtual DbSet<HssBaselineLmisMethod> HssBaselineLmisMethod { get; set; }
        public virtual DbSet<HssBaselineLmisSubIndicator> HssBaselineLmisSubIndicator { get; set; }
        public virtual DbSet<HssBaselineMaster> HssBaselineMaster { get; set; }
        public virtual DbSet<HssBaselinePharmacy> HssBaselinePharmacy { get; set; }
        public virtual DbSet<HssBaselinePharmacyAssessmentQuestion> HssBaselinePharmacyAssessmentQuestion { get; set; }
        public virtual DbSet<HssBaselinePharmacyIndicator> HssBaselinePharmacyIndicator { get; set; }
        public virtual DbSet<HssBaselinePharmacyMethod> HssBaselinePharmacyMethod { get; set; }
        public virtual DbSet<HssBaselineToolsReview> HssBaselineToolsReview { get; set; }
        public virtual DbSet<HssBaselineToolsReview1> HssBaselineToolsReview1 { get; set; }
        public virtual DbSet<HssBaselineToolsReview2> HssBaselineToolsReview2 { get; set; }
        public virtual DbSet<HssDnGrn> HssDnGrn { get; set; }
        public virtual DbSet<HssDnGrnHeader> HssDnGrnHeader { get; set; }
        public virtual DbSet<HssNeedsAssessment> HssNeedsAssessment { get; set; }
        public virtual DbSet<HssNeedsAssessment1> HssNeedsAssessment1 { get; set; }
        public virtual DbSet<HssNeedsAssessment2> HssNeedsAssessment2 { get; set; }
        public virtual DbSet<HssNeedsAssessment3> HssNeedsAssessment3 { get; set; }
        public virtual DbSet<HssNeedsAssessment4> HssNeedsAssessment4 { get; set; }
        public virtual DbSet<HssNeedsAssessment5> HssNeedsAssessment5 { get; set; }
        public virtual DbSet<HssNeedsAssessmentInterviewee> HssNeedsAssessmentInterviewee { get; set; }
        public virtual DbSet<HssNeedsAssessmentInterviewer> HssNeedsAssessmentInterviewer { get; set; }
        public virtual DbSet<HssNeedsAssessmentItInfrastracture> HssNeedsAssessmentItInfrastracture { get; set; }
        public virtual DbSet<HssNeedsAssessmentKeyInformantInterview> HssNeedsAssessmentKeyInformantInterview { get; set; }
        public virtual DbSet<HssNeedsAssessmentMaster> HssNeedsAssessmentMaster { get; set; }
        public virtual DbSet<HssNeedsAssessmentPhysicalInfrastructure> HssNeedsAssessmentPhysicalInfrastructure { get; set; }
        public virtual DbSet<HssNeedsAssessmentSpaceOptimization> HssNeedsAssessmentSpaceOptimization { get; set; }
        public virtual DbSet<HssSpaceAssessment> HssSpaceAssessment { get; set; }
        public virtual DbSet<HssSpaceAssessment1> HssSpaceAssessment1 { get; set; }
        public virtual DbSet<HssSpaceAssessment2> HssSpaceAssessment2 { get; set; }
        public virtual DbSet<HssSpaceAssessment3> HssSpaceAssessment3 { get; set; }
        public virtual DbSet<HssSpaceAssessment4> HssSpaceAssessment4 { get; set; }
        public virtual DbSet<HssSpaceAssessment5> HssSpaceAssessment5 { get; set; }
        public virtual DbSet<HssSpaceAssessmentInterviewee> HssSpaceAssessmentInterviewee { get; set; }
        public virtual DbSet<HssSpaceAssessmentInterviewer> HssSpaceAssessmentInterviewer { get; set; }
        public virtual DbSet<HssSpaceAssessmentKeyInformantInterview> HssSpaceAssessmentKeyInformantInterview { get; set; }
        public virtual DbSet<HssSpaceAssessmentMaster> HssSpaceAssessmentMaster { get; set; }
        public virtual DbSet<Inventory> Inventory { get; set; }
        public virtual DbSet<LmisExpectedReport> LmisExpectedReport { get; set; }
        public virtual DbSet<LmisSummaryCategory> LmisSummaryCategory { get; set; }
        public virtual DbSet<LmisSummaryIndicator> LmisSummaryIndicator { get; set; }
        public virtual DbSet<LmisSummarySubIndicator> LmisSummarySubIndicator { get; set; }
        public virtual DbSet<Memberships> Memberships { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }
        public virtual DbSet<MileageForm> MileageForm { get; set; }
        public virtual DbSet<NotificationServer> NotificationServer { get; set; }
        public virtual DbSet<OrderDrugDetails> OrderDrugDetails { get; set; }
        public virtual DbSet<OrderDrugDetailsAmc> OrderDrugDetailsAmc { get; set; }
        public virtual DbSet<OrderDrugDetailsEmergency> OrderDrugDetailsEmergency { get; set; }
        public virtual DbSet<OrderDrugDetailsPhysicalCount> OrderDrugDetailsPhysicalCount { get; set; }
        public virtual DbSet<OrderHeader> OrderHeader { get; set; }
        public virtual DbSet<OrderHeaderLog> OrderHeaderLog { get; set; }
        public virtual DbSet<OrderHivRapidTestKit> OrderHivRapidTestKit { get; set; }
        public virtual DbSet<OrderHivRapidTestKitAmc> OrderHivRapidTestKitAmc { get; set; }
        public virtual DbSet<OrderHivRapidTestKitEmergency> OrderHivRapidTestKitEmergency { get; set; }
        public virtual DbSet<OrderHivRapidTestKitHeader> OrderHivRapidTestKitHeader { get; set; }
        public virtual DbSet<OrderHivRapidTestKitHeaderLog> OrderHivRapidTestKitHeaderLog { get; set; }
        public virtual DbSet<OrderHivRapidTestKitPhysicalCount> OrderHivRapidTestKitPhysicalCount { get; set; }
        public virtual DbSet<OrderHivRapidTestKitSummary> OrderHivRapidTestKitSummary { get; set; }
        public virtual DbSet<OrderLab> OrderLab { get; set; }
        public virtual DbSet<OrderLabAmc> OrderLabAmc { get; set; }
        public virtual DbSet<OrderLabCustom> OrderLabCustom { get; set; }
        public virtual DbSet<OrderLabCustomHeader> OrderLabCustomHeader { get; set; }
        public virtual DbSet<OrderLabCustomHeaderLog> OrderLabCustomHeaderLog { get; set; }
        public virtual DbSet<OrderLabEmergency> OrderLabEmergency { get; set; }
        public virtual DbSet<OrderLabHeader> OrderLabHeader { get; set; }
        public virtual DbSet<OrderLabHeaderLog> OrderLabHeaderLog { get; set; }
        public virtual DbSet<OrderLabPhysicalCount> OrderLabPhysicalCount { get; set; }
        public virtual DbSet<OrderMault> OrderMault { get; set; }
        public virtual DbSet<OrderMaultHeader> OrderMaultHeader { get; set; }
        public virtual DbSet<OrderMaultHeaderLog> OrderMaultHeaderLog { get; set; }
        public virtual DbSet<OrderOiStiDetail> OrderOiStiDetail { get; set; }
        public virtual DbSet<OrderOiStiDetailPhysicalCount> OrderOiStiDetailPhysicalCount { get; set; }
        public virtual DbSet<OrderOiStiEmergency> OrderOiStiEmergency { get; set; }
        public virtual DbSet<OrderOiStiHeader> OrderOiStiHeader { get; set; }
        public virtual DbSet<OrderOiStiHeaderLog> OrderOiStiHeaderLog { get; set; }
        public virtual DbSet<OrderPrepHeader> OrderPrepHeader { get; set; }
        public virtual DbSet<OrderPrepHeaderLog> OrderPrepHeaderLog { get; set; }
        public virtual DbSet<OrderPrepdetails> OrderPrepdetails { get; set; }
        public virtual DbSet<OrderRutfDetails> OrderRutfDetails { get; set; }
        public virtual DbSet<OrderRutfHeader> OrderRutfHeader { get; set; }
        public virtual DbSet<OrderRutfHeaderSummary> OrderRutfHeaderSummary { get; set; }
        public virtual DbSet<OrderSmc> OrderSmc { get; set; }
        public virtual DbSet<OrderSmcHeader> OrderSmcHeader { get; set; }
        public virtual DbSet<OrderSmcSlm> OrderSmcSlm { get; set; }
        public virtual DbSet<OrderSmcSlmEmergency> OrderSmcSlmEmergency { get; set; }
        public virtual DbSet<OrderSmcSlmHeader> OrderSmcSlmHeader { get; set; }
        public virtual DbSet<OrderSmcSlmHeaderLog> OrderSmcSlmHeaderLog { get; set; }
        public virtual DbSet<OrderSmcSlmPhysicalCount> OrderSmcSlmPhysicalCount { get; set; }
        public virtual DbSet<OrderSmcSlmSummary> OrderSmcSlmSummary { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<OrderTb> OrderTb { get; set; }
        public virtual DbSet<OrderTbHeader> OrderTbHeader { get; set; }
        public virtual DbSet<OrderTbSummary> OrderTbSummary { get; set; }
        public virtual DbSet<OrderViralLoadReagentsDetail> OrderViralLoadReagentsDetail { get; set; }
        public virtual DbSet<OrderViralLoadReagentsEmergency> OrderViralLoadReagentsEmergency { get; set; }
        public virtual DbSet<OrderViralLoadReagentsHeader> OrderViralLoadReagentsHeader { get; set; }
        public virtual DbSet<OrderViralLoadReagentsHeaderLog> OrderViralLoadReagentsHeaderLog { get; set; }
        public virtual DbSet<OrderViralLoadReagentsSummary> OrderViralLoadReagentsSummary { get; set; }
        public virtual DbSet<PackingList> PackingList { get; set; }
        public virtual DbSet<PhysicalCountDetails> PhysicalCountDetails { get; set; }
        public virtual DbSet<PhysicalCountHeader> PhysicalCountHeader { get; set; }
        public virtual DbSet<Pmp1a> Pmp1a { get; set; }
        public virtual DbSet<Pmp1b> Pmp1b { get; set; }
        public virtual DbSet<Pmp1c> Pmp1c { get; set; }
        public virtual DbSet<Pmp1d> Pmp1d { get; set; }
        public virtual DbSet<Pmp2a> Pmp2a { get; set; }
        public virtual DbSet<Pmp2b> Pmp2b { get; set; }
        public virtual DbSet<Pmp2bX> Pmp2bX { get; set; }
        public virtual DbSet<Pmp2c> Pmp2c { get; set; }
        public virtual DbSet<Pmp2cX> Pmp2cX { get; set; }
        public virtual DbSet<Pmp3a> Pmp3a { get; set; }
        public virtual DbSet<Pmp3b> Pmp3b { get; set; }
        public virtual DbSet<Pmp3c> Pmp3c { get; set; }
        public virtual DbSet<Pmp3c3g> Pmp3c3g { get; set; }
        public virtual DbSet<Pmp3d> Pmp3d { get; set; }
        public virtual DbSet<Pmp3e> Pmp3e { get; set; }
        public virtual DbSet<Pmp3f> Pmp3f { get; set; }
        public virtual DbSet<Pmp3g> Pmp3g { get; set; }
        public virtual DbSet<Pmp4a> Pmp4a { get; set; }
        public virtual DbSet<Pmp4b> Pmp4b { get; set; }
        public virtual DbSet<Pmp4c> Pmp4c { get; set; }
        public virtual DbSet<Pmp4d> Pmp4d { get; set; }
        public virtual DbSet<Pmp4e> Pmp4e { get; set; }
        public virtual DbSet<Pmp4f> Pmp4f { get; set; }
        public virtual DbSet<Pmp4g> Pmp4g { get; set; }
        public virtual DbSet<Pmp5a> Pmp5a { get; set; }
        public virtual DbSet<Pmp5b> Pmp5b { get; set; }
        public virtual DbSet<Pmp5c> Pmp5c { get; set; }
        public virtual DbSet<Pmp5e> Pmp5e { get; set; }
        public virtual DbSet<Pmp5f> Pmp5f { get; set; }
        public virtual DbSet<Pmp5g> Pmp5g { get; set; }
        public virtual DbSet<Pmp5h> Pmp5h { get; set; }
        public virtual DbSet<Pmp5hX> Pmp5hX { get; set; }
        public virtual DbSet<Pmp6a> Pmp6a { get; set; }
        public virtual DbSet<Pmp6b> Pmp6b { get; set; }
        public virtual DbSet<Pmp6c> Pmp6c { get; set; }
        public virtual DbSet<Pmp7a> Pmp7a { get; set; }
        public virtual DbSet<Pmp7b> Pmp7b { get; set; }
        public virtual DbSet<Pmp7c> Pmp7c { get; set; }
        public virtual DbSet<PmpDataCollectionFrequency> PmpDataCollectionFrequency { get; set; }
        public virtual DbSet<PmpMetrix> PmpMetrix { get; set; }
        public virtual DbSet<PmpObjective> PmpObjective { get; set; }
        public virtual DbSet<PmpPerformanceIndicator> PmpPerformanceIndicator { get; set; }
        public virtual DbSet<PmpPerformanceIndicatorCopYear> PmpPerformanceIndicatorCopYear { get; set; }
        public virtual DbSet<PmpPerformanceIndicatorNumeratorDenominator> PmpPerformanceIndicatorNumeratorDenominator { get; set; }
        public virtual DbSet<ProcBidStatusAction> ProcBidStatusAction { get; set; }
        public virtual DbSet<ProcBidStatusAwardedProviders> ProcBidStatusAwardedProviders { get; set; }
        public virtual DbSet<ProcBidStatusBidManager> ProcBidStatusBidManager { get; set; }
        public virtual DbSet<ProcBidStatusCategory> ProcBidStatusCategory { get; set; }
        public virtual DbSet<ProcBidStatusCdcResponse> ProcBidStatusCdcResponse { get; set; }
        public virtual DbSet<ProcBidStatusContractManagement> ProcBidStatusContractManagement { get; set; }
        public virtual DbSet<ProcBidStatusCurrentStatus> ProcBidStatusCurrentStatus { get; set; }
        public virtual DbSet<ProcBidStatusEvaluationCommittee> ProcBidStatusEvaluationCommittee { get; set; }
        public virtual DbSet<ProcBidStatusProcurementReferenceNumber> ProcBidStatusProcurementReferenceNumber { get; set; }
        public virtual DbSet<ProcBidStatusProviders> ProcBidStatusProviders { get; set; }
        public virtual DbSet<ProcBidStatusReport> ProcBidStatusReport { get; set; }
        public virtual DbSet<ProcBidStatusReportActionTaken> ProcBidStatusReportActionTaken { get; set; }
        public virtual DbSet<ProcBidStatusReportProcurementMethod> ProcBidStatusReportProcurementMethod { get; set; }
        public virtual DbSet<ProcBidStatusReportStaff> ProcBidStatusReportStaff { get; set; }
        public virtual DbSet<ProcBidStatusStaffResponsibility> ProcBidStatusStaffResponsibility { get; set; }
        public virtual DbSet<ProcBidStatusSupplierQuotation> ProcBidStatusSupplierQuotation { get; set; }
        public virtual DbSet<ProcBudget> ProcBudget { get; set; }
        public virtual DbSet<ProcBudgetUnitMeasure> ProcBudgetUnitMeasure { get; set; }
        public virtual DbSet<ProcOrderStatus> ProcOrderStatus { get; set; }
        public virtual DbSet<ProcPrequalifiedSupplier> ProcPrequalifiedSupplier { get; set; }
        public virtual DbSet<ProcPriceSupplier> ProcPriceSupplier { get; set; }
        public virtual DbSet<ProcProcurementType> ProcProcurementType { get; set; }
        public virtual DbSet<ProcProductType> ProcProductType { get; set; }
        public virtual DbSet<ProcTask> ProcTask { get; set; }
        public virtual DbSet<ProcTaskDetail> ProcTaskDetail { get; set; }
        public virtual DbSet<ProcTaskHeader> ProcTaskHeader { get; set; }
        public virtual DbSet<ProcTaskOrderDetail> ProcTaskOrderDetail { get; set; }
        public virtual DbSet<ProcTracker> ProcTracker { get; set; }
        public virtual DbSet<ProcTrackerAwardPfi> ProcTrackerAwardPfi { get; set; }
        public virtual DbSet<ProcTrackerCategory> ProcTrackerCategory { get; set; }
        public virtual DbSet<ProcTrackerCi> ProcTrackerCi { get; set; }
        public virtual DbSet<ProcTrackerCompletion> ProcTrackerCompletion { get; set; }
        public virtual DbSet<ProcTrackerCountry> ProcTrackerCountry { get; set; }
        public virtual DbSet<ProcTrackerDg> ProcTrackerDg { get; set; }
        public virtual DbSet<ProcTrackerFitForPurpose> ProcTrackerFitForPurpose { get; set; }
        public virtual DbSet<ProcTrackerGrn> ProcTrackerGrn { get; set; }
        public virtual DbSet<ProcTrackerInvoice> ProcTrackerInvoice { get; set; }
        public virtual DbSet<ProcTrackerManufacturer> ProcTrackerManufacturer { get; set; }
        public virtual DbSet<ProcTrackerOrder> ProcTrackerOrder { get; set; }
        public virtual DbSet<ProcTrackerOrderClassification> ProcTrackerOrderClassification { get; set; }
        public virtual DbSet<ProcTrackerOrderStatus> ProcTrackerOrderStatus { get; set; }
        public virtual DbSet<ProcTrackerOrderType> ProcTrackerOrderType { get; set; }
        public virtual DbSet<ProcTrackerOrgan> ProcTrackerOrgan { get; set; }
        public virtual DbSet<ProcTrackerPfi> ProcTrackerPfi { get; set; }
        public virtual DbSet<ProcTrackerPrice> ProcTrackerPrice { get; set; }
        public virtual DbSet<ProcTrackerProductDetail> ProcTrackerProductDetail { get; set; }
        public virtual DbSet<ProcTrackerPurchaseOrderNo> ProcTrackerPurchaseOrderNo { get; set; }
        public virtual DbSet<ProcTrackerQualityIssue> ProcTrackerQualityIssue { get; set; }
        public virtual DbSet<ProcTrackerQuarter> ProcTrackerQuarter { get; set; }
        public virtual DbSet<ProcTrackerTaskNo> ProcTrackerTaskNo { get; set; }
        public virtual DbSet<ProcTrackerVendor> ProcTrackerVendor { get; set; }
        public virtual DbSet<ProductCodeSearch> ProductCodeSearch { get; set; }
        public virtual DbSet<Profiles> Profiles { get; set; }
        public virtual DbSet<Query> Query { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SapArvSiteOrderDocumetLines> SapArvSiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapArvSiteOrderHeader> SapArvSiteOrderHeader { get; set; }
        public virtual DbSet<SapEmailReceipient> SapEmailReceipient { get; set; }
        public virtual DbSet<SapEmergencySiteOrderDocumetLines> SapEmergencySiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapEmergencySiteOrderHeader> SapEmergencySiteOrderHeader { get; set; }
        public virtual DbSet<SapExportDocumentLines> SapExportDocumentLines { get; set; }
        public virtual DbSet<SapExportHeader> SapExportHeader { get; set; }
        public virtual DbSet<SapHivTestKitsSiteOrderDocumetLines> SapHivTestKitsSiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapHivTestKitsSiteOrderHeader> SapHivTestKitsSiteOrderHeader { get; set; }
        public virtual DbSet<SapLaboratorySiteOrderDocumetLines> SapLaboratorySiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapLaboratorySiteOrderHeader> SapLaboratorySiteOrderHeader { get; set; }
        public virtual DbSet<SapOiStiSiteOrderDocumetLines> SapOiStiSiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapOiStiSiteOrderHeader> SapOiStiSiteOrderHeader { get; set; }
        public virtual DbSet<SapSalesorderLog> SapSalesorderLog { get; set; }
        public virtual DbSet<SapSmcSiteOrderDocumetLines> SapSmcSiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapSmcSiteOrderHeader> SapSmcSiteOrderHeader { get; set; }
        public virtual DbSet<SapSmcSlmSiteOrderDocumetLines> SapSmcSlmSiteOrderDocumetLines { get; set; }
        public virtual DbSet<SapSmcSlmSiteOrderHeader> SapSmcSlmSiteOrderHeader { get; set; }
        public virtual DbSet<SapViralLoadReagentsDocumetLines> SapViralLoadReagentsDocumetLines { get; set; }
        public virtual DbSet<SapViralLoadReagentsSiteOrderHeader> SapViralLoadReagentsSiteOrderHeader { get; set; }
        public virtual DbSet<SapsyncTablenames> SapsyncTablenames { get; set; }
        public virtual DbSet<ScheduleEvent> ScheduleEvent { get; set; }
        public virtual DbSet<ScheduleEventFileCollection> ScheduleEventFileCollection { get; set; }
        public virtual DbSet<Sheet4> Sheet4 { get; set; }
        public virtual DbSet<SsmtAAreaVisited> SsmtAAreaVisited { get; set; }
        public virtual DbSet<SsmtACategory> SsmtACategory { get; set; }
        public virtual DbSet<SsmtAIndicator> SsmtAIndicator { get; set; }
        public virtual DbSet<SsmtAIndicatorSubindicator> SsmtAIndicatorSubindicator { get; set; }
        public virtual DbSet<SsmtAJointVisit> SsmtAJointVisit { get; set; }
        public virtual DbSet<SsmtALocation> SsmtALocation { get; set; }
        public virtual DbSet<SsmtAPersonnel> SsmtAPersonnel { get; set; }
        public virtual DbSet<SsmtARptCategory> SsmtARptCategory { get; set; }
        public virtual DbSet<SsmtARptIndicator> SsmtARptIndicator { get; set; }
        public virtual DbSet<SsmtASiteVolume> SsmtASiteVolume { get; set; }
        public virtual DbSet<SsmtASsmts> SsmtASsmts { get; set; }
        public virtual DbSet<SsmtASubindicator> SsmtASubindicator { get; set; }
        public virtual DbSet<SsmtASubmittedDoc> SsmtASubmittedDoc { get; set; }
        public virtual DbSet<SsmtATitle> SsmtATitle { get; set; }
        public virtual DbSet<SsmtAVisitPurpose> SsmtAVisitPurpose { get; set; }
        public virtual DbSet<SsmtAreaVisited> SsmtAreaVisited { get; set; }
        public virtual DbSet<SsmtComment> SsmtComment { get; set; }
        public virtual DbSet<SsmtFacility> SsmtFacility { get; set; }
        public virtual DbSet<SsmtFacilitySummaryScore> SsmtFacilitySummaryScore { get; set; }
        public virtual DbSet<SsmtIndicator> SsmtIndicator { get; set; }
        public virtual DbSet<SsmtIssuesOnVisit> SsmtIssuesOnVisit { get; set; }
        public virtual DbSet<SsmtJointVisit> SsmtJointVisit { get; set; }
        public virtual DbSet<SsmtPersonnel> SsmtPersonnel { get; set; }
        public virtual DbSet<SsmtRptIndicator> SsmtRptIndicator { get; set; }
        public virtual DbSet<SsmtStockManagementPractices> SsmtStockManagementPractices { get; set; }
        public virtual DbSet<SsmtStockManagementPracticesLab> SsmtStockManagementPracticesLab { get; set; }
        public virtual DbSet<SsmtStockManagementTools> SsmtStockManagementTools { get; set; }
        public virtual DbSet<SsmtStockManagementToolsLab> SsmtStockManagementToolsLab { get; set; }
        public virtual DbSet<SsmtSubmittedDocuments> SsmtSubmittedDocuments { get; set; }
        public virtual DbSet<SsmtVerificationLmisData> SsmtVerificationLmisData { get; set; }
        public virtual DbSet<SsmtVerificationLmisDataLab> SsmtVerificationLmisDataLab { get; set; }
        public virtual DbSet<SsmtVerificationPatientData> SsmtVerificationPatientData { get; set; }
        public virtual DbSet<SsmtVisitPurpose> SsmtVisitPurpose { get; set; }
        public virtual DbSet<StockOnHand> StockOnHand { get; set; }
        public virtual DbSet<TblErrorLog> TblErrorLog { get; set; }
        public virtual DbSet<TmpMosAllproducts> TmpMosAllproducts { get; set; }
        public virtual DbSet<TmpMosTracer> TmpMosTracer { get; set; }
        public virtual DbSet<TreatmentEstimatedRecuits> TreatmentEstimatedRecuits { get; set; }
        public virtual DbSet<TreatmentFluconazole> TreatmentFluconazole { get; set; }
        public virtual DbSet<TreatmentPatientSummary> TreatmentPatientSummary { get; set; }
        public virtual DbSet<UserAccount> UserAccount { get; set; }
        public virtual DbSet<UserMenuOption> UserMenuOption { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersInRoles> UsersInRoles { get; set; }
        public virtual DbSet<UsersRoles> UsersRoles { get; set; }
        public virtual DbSet<UsersUserInformation> UsersUserInformation { get; set; }
        public virtual DbSet<UsersUserRoles> UsersUserRoles { get; set; }
        public virtual DbSet<VehicleDriverAllocation> VehicleDriverAllocation { get; set; }
        public virtual DbSet<VehiclePackingListAllocation> VehiclePackingListAllocation { get; set; }
        public virtual DbSet<View2> View2 { get; set; }
        public virtual DbSet<ViewAExpectedReports> ViewAExpectedReports { get; set; }
        public virtual DbSet<ViewAFacility> ViewAFacility { get; set; }
        public virtual DbSet<ViewAProductLabCat2> ViewAProductLabCat2 { get; set; }
        public virtual DbSet<ViewAProductLabCat23> ViewAProductLabCat23 { get; set; }
        public virtual DbSet<ViewAllocationArv> ViewAllocationArv { get; set; }
        public virtual DbSet<ViewAllocationArvBase> ViewAllocationArvBase { get; set; }
        public virtual DbSet<ViewAllocationHivRtk> ViewAllocationHivRtk { get; set; }
        public virtual DbSet<ViewAllocationHivRtkBase> ViewAllocationHivRtkBase { get; set; }
        public virtual DbSet<ViewAllocationSmc> ViewAllocationSmc { get; set; }
        public virtual DbSet<ViewAllocationSmcBase> ViewAllocationSmcBase { get; set; }
        public virtual DbSet<ViewApprovedOrdersSmc> ViewApprovedOrdersSmc { get; set; }
        public virtual DbSet<ViewArvMonthYear> ViewArvMonthYear { get; set; }
        public virtual DbSet<ViewAspNetRoles> ViewAspNetRoles { get; set; }
        public virtual DbSet<ViewBatchDel> ViewBatchDel { get; set; }
        public virtual DbSet<ViewCArvPnIp> ViewCArvPnIp { get; set; }
        public virtual DbSet<ViewCArvPnLoC> ViewCArvPnLoC { get; set; }
        public virtual DbSet<ViewCCcuComplaintAccuteness> ViewCCcuComplaintAccuteness { get; set; }
        public virtual DbSet<ViewCCcuComplaintAvgDays> ViewCCcuComplaintAvgDays { get; set; }
        public virtual DbSet<ViewCCcuComplaintCategory> ViewCCcuComplaintCategory { get; set; }
        public virtual DbSet<ViewCCcuComplaintStatus> ViewCCcuComplaintStatus { get; set; }
        public virtual DbSet<ViewCConAmcSmc> ViewCConAmcSmc { get; set; }
        public virtual DbSet<ViewCConAmcSmcX> ViewCConAmcSmcX { get; set; }
        public virtual DbSet<ViewCConFArv> ViewCConFArv { get; set; }
        public virtual DbSet<ViewCConFSmc> ViewCConFSmc { get; set; }
        public virtual DbSet<ViewCConFTk> ViewCConFTk { get; set; }
        public virtual DbSet<ViewCConPArv> ViewCConPArv { get; set; }
        public virtual DbSet<ViewCConPSmc> ViewCConPSmc { get; set; }
        public virtual DbSet<ViewCConPTk> ViewCConPTk { get; set; }
        public virtual DbSet<ViewCPnArvC> ViewCPnArvC { get; set; }
        public virtual DbSet<ViewCPnArvDiflucan> ViewCPnArvDiflucan { get; set; }
        public virtual DbSet<ViewCPnArvDiflucanX> ViewCPnArvDiflucanX { get; set; }
        public virtual DbSet<ViewCPnArvFluconazole> ViewCPnArvFluconazole { get; set; }
        public virtual DbSet<ViewCPnArvFluconazoleA> ViewCPnArvFluconazoleA { get; set; }
        public virtual DbSet<ViewCPnArvFluconazoleB> ViewCPnArvFluconazoleB { get; set; }
        public virtual DbSet<ViewCPnArvT> ViewCPnArvT { get; set; }
        public virtual DbSet<ViewCPnArvTX> ViewCPnArvTX { get; set; }
        public virtual DbSet<ViewCPnSmcT> ViewCPnSmcT { get; set; }
        public virtual DbSet<ViewCPnTkIp> ViewCPnTkIp { get; set; }
        public virtual DbSet<ViewCPnTkLoc> ViewCPnTkLoc { get; set; }
        public virtual DbSet<ViewCPnTkT> ViewCPnTkT { get; set; }
        public virtual DbSet<ViewCPnTkTX> ViewCPnTkTX { get; set; }
        public virtual DbSet<ViewChssAnnualAccurateStockCard> ViewChssAnnualAccurateStockCard { get; set; }
        public virtual DbSet<ViewChssAnnualConnectedToSap> ViewChssAnnualConnectedToSap { get; set; }
        public virtual DbSet<ViewChssAnnualLmisTrained> ViewChssAnnualLmisTrained { get; set; }
        public virtual DbSet<ViewChssAnnualSupervisionVisits> ViewChssAnnualSupervisionVisits { get; set; }
        public virtual DbSet<ViewChssMobileFacility> ViewChssMobileFacility { get; set; }
        public virtual DbSet<ViewChssMonthAccurateStockCards> ViewChssMonthAccurateStockCards { get; set; }
        public virtual DbSet<ViewChssMonthConnectedToSap> ViewChssMonthConnectedToSap { get; set; }
        public virtual DbSet<ViewChssMonthLmisTrained> ViewChssMonthLmisTrained { get; set; }
        public virtual DbSet<ViewChssMonthSupervisionVisits> ViewChssMonthSupervisionVisits { get; set; }
        public virtual DbSet<ViewChssQuarterAccurateStockCards> ViewChssQuarterAccurateStockCards { get; set; }
        public virtual DbSet<ViewChssQuarterLmisTrained> ViewChssQuarterLmisTrained { get; set; }
        public virtual DbSet<ViewChssQuarterSupervisionVisits> ViewChssQuarterSupervisionVisits { get; set; }
        public virtual DbSet<ViewChssQuaterConnectedToSap> ViewChssQuaterConnectedToSap { get; set; }
        public virtual DbSet<ViewChssStockDammy> ViewChssStockDammy { get; set; }
        public virtual DbSet<ViewConsumptionArv> ViewConsumptionArv { get; set; }
        public virtual DbSet<ViewConsumptionArvPmtct> ViewConsumptionArvPmtct { get; set; }
        public virtual DbSet<ViewConsumptionHivRtk> ViewConsumptionHivRtk { get; set; }
        public virtual DbSet<ViewConsumptionHivRtkBase> ViewConsumptionHivRtkBase { get; set; }
        public virtual DbSet<ViewConsumptionPatient> ViewConsumptionPatient { get; set; }
        public virtual DbSet<ViewConsumptionSmc> ViewConsumptionSmc { get; set; }
        public virtual DbSet<ViewConsumptionSmcBase> ViewConsumptionSmcBase { get; set; }
        public virtual DbSet<ViewCrystalAloocationTk> ViewCrystalAloocationTk { get; set; }
        public virtual DbSet<ViewCrystalCcu> ViewCrystalCcu { get; set; }
        public virtual DbSet<ViewCrystalCcuAverageDays> ViewCrystalCcuAverageDays { get; set; }
        public virtual DbSet<ViewCrystalCcuAverageDaysX> ViewCrystalCcuAverageDaysX { get; set; }
        public virtual DbSet<ViewCrystalCcuComplaintAccuteness> ViewCrystalCcuComplaintAccuteness { get; set; }
        public virtual DbSet<ViewCrystalCcuComplaintCategory> ViewCrystalCcuComplaintCategory { get; set; }
        public virtual DbSet<ViewCrystalCcuComplaintNo> ViewCrystalCcuComplaintNo { get; set; }
        public virtual DbSet<ViewCrystalCcuResolutionStatus> ViewCrystalCcuResolutionStatus { get; set; }
        public virtual DbSet<ViewCrystalCcuResolved> ViewCrystalCcuResolved { get; set; }
        public virtual DbSet<ViewCrystalFacilitySector> ViewCrystalFacilitySector { get; set; }
        public virtual DbSet<ViewCrystalFacilitySectorBase> ViewCrystalFacilitySectorBase { get; set; }
        public virtual DbSet<ViewCrystalFoActionTaken> ViewCrystalFoActionTaken { get; set; }
        public virtual DbSet<ViewCrystalFoComplaint> ViewCrystalFoComplaint { get; set; }
        public virtual DbSet<ViewCrystalFoDetailedInvestigation> ViewCrystalFoDetailedInvestigation { get; set; }
        public virtual DbSet<ViewCrystalFoDetailedInvestigationReport> ViewCrystalFoDetailedInvestigationReport { get; set; }
        public virtual DbSet<ViewCrystalFoPreliminaryInvestigation> ViewCrystalFoPreliminaryInvestigation { get; set; }
        public virtual DbSet<ViewCrystalFoPreliminaryInvestigationReport> ViewCrystalFoPreliminaryInvestigationReport { get; set; }
        public virtual DbSet<ViewCrystalLmisAllProducts> ViewCrystalLmisAllProducts { get; set; }
        public virtual DbSet<ViewCrystalLmisAllProducts1> ViewCrystalLmisAllProducts1 { get; set; }
        public virtual DbSet<ViewCrystalLmisAllProductsFinal> ViewCrystalLmisAllProductsFinal { get; set; }
        public virtual DbSet<ViewCrystalLmisAllcationLab> ViewCrystalLmisAllcationLab { get; set; }
        public virtual DbSet<ViewCrystalLmisAllcationSmc> ViewCrystalLmisAllcationSmc { get; set; }
        public virtual DbSet<ViewCrystalLmisAllocationSmc> ViewCrystalLmisAllocationSmc { get; set; }
        public virtual DbSet<ViewCrystalLmisConsumptionSmc> ViewCrystalLmisConsumptionSmc { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingArt> ViewCrystalLmisExpiryTrackingArt { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingArtA> ViewCrystalLmisExpiryTrackingArtA { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingArtB> ViewCrystalLmisExpiryTrackingArtB { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingLab> ViewCrystalLmisExpiryTrackingLab { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingLabA> ViewCrystalLmisExpiryTrackingLabA { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingLabB> ViewCrystalLmisExpiryTrackingLabB { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingTestkits> ViewCrystalLmisExpiryTrackingTestkits { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingTestkitsA> ViewCrystalLmisExpiryTrackingTestkitsA { get; set; }
        public virtual DbSet<ViewCrystalLmisExpiryTrackingTestkitsB> ViewCrystalLmisExpiryTrackingTestkitsB { get; set; }
        public virtual DbSet<ViewCrystalLmisFrostproducts> ViewCrystalLmisFrostproducts { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientArv> ViewCrystalLmisPatientArv { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpArv> ViewCrystalLmisPatientIpArv { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpArvC> ViewCrystalLmisPatientIpArvC { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpArvR> ViewCrystalLmisPatientIpArvR { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpArvT> ViewCrystalLmisPatientIpArvT { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpArvX> ViewCrystalLmisPatientIpArvX { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpTk> ViewCrystalLmisPatientIpTk { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientIpTkX> ViewCrystalLmisPatientIpTkX { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientLocArv> ViewCrystalLmisPatientLocArv { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientLocArvX> ViewCrystalLmisPatientLocArvX { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientLocTk> ViewCrystalLmisPatientLocTk { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientLocTkX> ViewCrystalLmisPatientLocTkX { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientNoBase> ViewCrystalLmisPatientNoBase { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientSectorArv> ViewCrystalLmisPatientSectorArv { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientSectorTk> ViewCrystalLmisPatientSectorTk { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientTestTk> ViewCrystalLmisPatientTestTk { get; set; }
        public virtual DbSet<ViewCrystalLmisPatientTk> ViewCrystalLmisPatientTk { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArv> ViewCrystalLmisRrArv { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArvBase> ViewCrystalLmisRrArvBase { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArvX> ViewCrystalLmisRrArvX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArvX2> ViewCrystalLmisRrArvX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArvX3> ViewCrystalLmisRrArvX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrArvZ> ViewCrystalLmisRrArvZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrLab> ViewCrystalLmisRrLab { get; set; }
        public virtual DbSet<ViewCrystalLmisRrLabX> ViewCrystalLmisRrLabX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrLabX2> ViewCrystalLmisRrLabX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrLabX3> ViewCrystalLmisRrLabX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrLabZ> ViewCrystalLmisRrLabZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrOi> ViewCrystalLmisRrOi { get; set; }
        public virtual DbSet<ViewCrystalLmisRrOiX> ViewCrystalLmisRrOiX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrOiX2> ViewCrystalLmisRrOiX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrOiX3> ViewCrystalLmisRrOiX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrOiZ> ViewCrystalLmisRrOiZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrRutf> ViewCrystalLmisRrRutf { get; set; }
        public virtual DbSet<ViewCrystalLmisRrRutfX> ViewCrystalLmisRrRutfX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrRutfX2> ViewCrystalLmisRrRutfX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrRutfX3> ViewCrystalLmisRrRutfX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrRutfZ> ViewCrystalLmisRrRutfZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrSmc> ViewCrystalLmisRrSmc { get; set; }
        public virtual DbSet<ViewCrystalLmisRrSmcX> ViewCrystalLmisRrSmcX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrSmcX2> ViewCrystalLmisRrSmcX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrSmcX3> ViewCrystalLmisRrSmcX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrSmcZ> ViewCrystalLmisRrSmcZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTb> ViewCrystalLmisRrTb { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTbX> ViewCrystalLmisRrTbX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTbX2> ViewCrystalLmisRrTbX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTbX3> ViewCrystalLmisRrTbX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTbZ> ViewCrystalLmisRrTbZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTk> ViewCrystalLmisRrTk { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTkX> ViewCrystalLmisRrTkX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTkX2> ViewCrystalLmisRrTkX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTkX3> ViewCrystalLmisRrTkX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrTkZ> ViewCrystalLmisRrTkZ { get; set; }
        public virtual DbSet<ViewCrystalLmisRrVl> ViewCrystalLmisRrVl { get; set; }
        public virtual DbSet<ViewCrystalLmisRrVlX> ViewCrystalLmisRrVlX { get; set; }
        public virtual DbSet<ViewCrystalLmisRrVlX2> ViewCrystalLmisRrVlX2 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrVlX3> ViewCrystalLmisRrVlX3 { get; set; }
        public virtual DbSet<ViewCrystalLmisRrVlZ> ViewCrystalLmisRrVlZ { get; set; }
        public virtual DbSet<ViewCrystalLmisSummaryAccredited> ViewCrystalLmisSummaryAccredited { get; set; }
        public virtual DbSet<ViewCrystalLmisSummaryDistrict> ViewCrystalLmisSummaryDistrict { get; set; }
        public virtual DbSet<ViewCrystalLmisSummaryExpected> ViewCrystalLmisSummaryExpected { get; set; }
        public virtual DbSet<ViewCrystalLmisSummaryIp> ViewCrystalLmisSummaryIp { get; set; }
        public virtual DbSet<ViewCrystalLmisSummaryLoc> ViewCrystalLmisSummaryLoc { get; set; }
        public virtual DbSet<ViewCrystalLmisSummarySupported> ViewCrystalLmisSummarySupported { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessArv> ViewCrystalLmisTimelinessArv { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessLab> ViewCrystalLmisTimelinessLab { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessOi> ViewCrystalLmisTimelinessOi { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessRutf> ViewCrystalLmisTimelinessRutf { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessSmc> ViewCrystalLmisTimelinessSmc { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessTb> ViewCrystalLmisTimelinessTb { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessTk> ViewCrystalLmisTimelinessTk { get; set; }
        public virtual DbSet<ViewCrystalLmisTimelinessVl> ViewCrystalLmisTimelinessVl { get; set; }
        public virtual DbSet<ViewDashChssConnectedToSap> ViewDashChssConnectedToSap { get; set; }
        public virtual DbSet<ViewDashChssScores> ViewDashChssScores { get; set; }
        public virtual DbSet<ViewDashExpectedVisits> ViewDashExpectedVisits { get; set; }
        public virtual DbSet<ViewDashFunctionalRx> ViewDashFunctionalRx { get; set; }
        public virtual DbSet<ViewDashStockManagment> ViewDashStockManagment { get; set; }
        public virtual DbSet<ViewDashVisits> ViewDashVisits { get; set; }
        public virtual DbSet<ViewDashWorkingStockManagement> ViewDashWorkingStockManagement { get; set; }
        public virtual DbSet<ViewDashboardConsumptionFacilityArt> ViewDashboardConsumptionFacilityArt { get; set; }
        public virtual DbSet<ViewDashboardConsumptionFacilityHiv> ViewDashboardConsumptionFacilityHiv { get; set; }
        public virtual DbSet<ViewDashboardConsumptionHiv> ViewDashboardConsumptionHiv { get; set; }
        public virtual DbSet<ViewDashboardFacilityTrackingOrderStautus> ViewDashboardFacilityTrackingOrderStautus { get; set; }
        public virtual DbSet<ViewDashboardPatientsNumbersArt> ViewDashboardPatientsNumbersArt { get; set; }
        public virtual DbSet<ViewDashboardPatientsNumbersArtFluconazole> ViewDashboardPatientsNumbersArtFluconazole { get; set; }
        public virtual DbSet<ViewDashboardTrackingOrderStautus> ViewDashboardTrackingOrderStautus { get; set; }
        public virtual DbSet<ViewDistKpiA> ViewDistKpiA { get; set; }
        public virtual DbSet<ViewDistKpiB> ViewDistKpiB { get; set; }
        public virtual DbSet<ViewDistKpiFuelConsumption> ViewDistKpiFuelConsumption { get; set; }
        public virtual DbSet<ViewDistKpiGraph> ViewDistKpiGraph { get; set; }
        public virtual DbSet<ViewDistKpiGraphB> ViewDistKpiGraphB { get; set; }
        public virtual DbSet<ViewDistKpiGraphMonthA> ViewDistKpiGraphMonthA { get; set; }
        public virtual DbSet<ViewDistKpiGraphMonthB> ViewDistKpiGraphMonthB { get; set; }
        public virtual DbSet<ViewDistKpiGraphQuarter> ViewDistKpiGraphQuarter { get; set; }
        public virtual DbSet<ViewDistKpiIncident> ViewDistKpiIncident { get; set; }
        public virtual DbSet<ViewDistKpiKilometresTravelled> ViewDistKpiKilometresTravelled { get; set; }
        public virtual DbSet<ViewDistKpiLogbookA> ViewDistKpiLogbookA { get; set; }
        public virtual DbSet<ViewDistKpiLogbookB> ViewDistKpiLogbookB { get; set; }
        public virtual DbSet<ViewDistKpiLogbookC> ViewDistKpiLogbookC { get; set; }
        public virtual DbSet<ViewDistKpiMaintenance> ViewDistKpiMaintenance { get; set; }
        public virtual DbSet<ViewDistKpiRunningCost> ViewDistKpiRunningCost { get; set; }
        public virtual DbSet<ViewDistKpiSafetyRecord> ViewDistKpiSafetyRecord { get; set; }
        public virtual DbSet<ViewDistKpiVehiclesActiveYearMonth> ViewDistKpiVehiclesActiveYearMonth { get; set; }
        public virtual DbSet<ViewDistLogbook> ViewDistLogbook { get; set; }
        public virtual DbSet<ViewDistOperatorPermit> ViewDistOperatorPermit { get; set; }
        public virtual DbSet<ViewDistPackingList> ViewDistPackingList { get; set; }
        public virtual DbSet<ViewDistSchedule> ViewDistSchedule { get; set; }
        public virtual DbSet<ViewDistScheduleMaulStaffRpt> ViewDistScheduleMaulStaffRpt { get; set; }
        public virtual DbSet<ViewDistScheduleRpt> ViewDistScheduleRpt { get; set; }
        public virtual DbSet<ViewDistWorkingDays> ViewDistWorkingDays { get; set; }
        public virtual DbSet<ViewDistributionSchedule> ViewDistributionSchedule { get; set; }
        public virtual DbSet<ViewExpectedReportArvIp> ViewExpectedReportArvIp { get; set; }
        public virtual DbSet<ViewExpectedReportArvLoC> ViewExpectedReportArvLoC { get; set; }
        public virtual DbSet<ViewExpectedReportArvSector> ViewExpectedReportArvSector { get; set; }
        public virtual DbSet<ViewExpectedReportTkIp> ViewExpectedReportTkIp { get; set; }
        public virtual DbSet<ViewExpectedReportTkLoC> ViewExpectedReportTkLoC { get; set; }
        public virtual DbSet<ViewExpectedReportTkSector> ViewExpectedReportTkSector { get; set; }
        public virtual DbSet<ViewExportAtomicAllProducts> ViewExportAtomicAllProducts { get; set; }
        public virtual DbSet<ViewExportAtomicArv> ViewExportAtomicArv { get; set; }
        public virtual DbSet<ViewExportAtomicArvEmergency> ViewExportAtomicArvEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicArvPhysicalCount> ViewExportAtomicArvPhysicalCount { get; set; }
        public virtual DbSet<ViewExportAtomicArvTreatmentFluconazole> ViewExportAtomicArvTreatmentFluconazole { get; set; }
        public virtual DbSet<ViewExportAtomicArvTreatmentPatientSummary> ViewExportAtomicArvTreatmentPatientSummary { get; set; }
        public virtual DbSet<ViewExportAtomicHivTk> ViewExportAtomicHivTk { get; set; }
        public virtual DbSet<ViewExportAtomicHivTkEmergency> ViewExportAtomicHivTkEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicHivTkPhysicalCount> ViewExportAtomicHivTkPhysicalCount { get; set; }
        public virtual DbSet<ViewExportAtomicHivTkSummary> ViewExportAtomicHivTkSummary { get; set; }
        public virtual DbSet<ViewExportAtomicLab> ViewExportAtomicLab { get; set; }
        public virtual DbSet<ViewExportAtomicLabEmergency> ViewExportAtomicLabEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicLabPhysicalCount> ViewExportAtomicLabPhysicalCount { get; set; }
        public virtual DbSet<ViewExportAtomicOiSti> ViewExportAtomicOiSti { get; set; }
        public virtual DbSet<ViewExportAtomicOiStiEmergency> ViewExportAtomicOiStiEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicOiStiPhysicalCount> ViewExportAtomicOiStiPhysicalCount { get; set; }
        public virtual DbSet<ViewExportAtomicOrderRutfSummary> ViewExportAtomicOrderRutfSummary { get; set; }
        public virtual DbSet<ViewExportAtomicOrderTb> ViewExportAtomicOrderTb { get; set; }
        public virtual DbSet<ViewExportAtomicOrderTbSummary> ViewExportAtomicOrderTbSummary { get; set; }
        public virtual DbSet<ViewExportAtomicRuft> ViewExportAtomicRuft { get; set; }
        public virtual DbSet<ViewExportAtomicRutf> ViewExportAtomicRutf { get; set; }
        public virtual DbSet<ViewExportAtomicRutfSummary> ViewExportAtomicRutfSummary { get; set; }
        public virtual DbSet<ViewExportAtomicSmcLab> ViewExportAtomicSmcLab { get; set; }
        public virtual DbSet<ViewExportAtomicSmcSlm> ViewExportAtomicSmcSlm { get; set; }
        public virtual DbSet<ViewExportAtomicSmcSlmEmergency> ViewExportAtomicSmcSlmEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicSmcSlmPhysicalCount> ViewExportAtomicSmcSlmPhysicalCount { get; set; }
        public virtual DbSet<ViewExportAtomicSmcSlmSummary> ViewExportAtomicSmcSlmSummary { get; set; }
        public virtual DbSet<ViewExportAtomicTb> ViewExportAtomicTb { get; set; }
        public virtual DbSet<ViewExportAtomicTbSummary> ViewExportAtomicTbSummary { get; set; }
        public virtual DbSet<ViewExportAtomicViralLoadReagents> ViewExportAtomicViralLoadReagents { get; set; }
        public virtual DbSet<ViewExportAtomicViralLoadReagentsEmergency> ViewExportAtomicViralLoadReagentsEmergency { get; set; }
        public virtual DbSet<ViewExportAtomicViralLoadReagentsSummary> ViewExportAtomicViralLoadReagentsSummary { get; set; }
        public virtual DbSet<ViewFacilities> ViewFacilities { get; set; }
        public virtual DbSet<ViewFacilitiesSapCode> ViewFacilitiesSapCode { get; set; }
        public virtual DbSet<ViewFacilityGisCodinates> ViewFacilityGisCodinates { get; set; }
        public virtual DbSet<ViewFoCertificateReleaseFrmQuarantine> ViewFoCertificateReleaseFrmQuarantine { get; set; }
        public virtual DbSet<ViewFoComplaintAffectedSites> ViewFoComplaintAffectedSites { get; set; }
        public virtual DbSet<ViewFoComplaintCurrent> ViewFoComplaintCurrent { get; set; }
        public virtual DbSet<ViewFoComplaintCurrentQualityIssue> ViewFoComplaintCurrentQualityIssue { get; set; }
        public virtual DbSet<ViewFoComplaintHistory> ViewFoComplaintHistory { get; set; }
        public virtual DbSet<ViewFoContacts> ViewFoContacts { get; set; }
        public virtual DbSet<ViewFoContactsDetails> ViewFoContactsDetails { get; set; }
        public virtual DbSet<ViewFoContactsFull> ViewFoContactsFull { get; set; }
        public virtual DbSet<ViewFoContactsSms> ViewFoContactsSms { get; set; }
        public virtual DbSet<ViewFoErCommunicationMode> ViewFoErCommunicationMode { get; set; }
        public virtual DbSet<ViewFoErComplaintCategory> ViewFoErComplaintCategory { get; set; }
        public virtual DbSet<ViewFoErComplaintMonth> ViewFoErComplaintMonth { get; set; }
        public virtual DbSet<ViewFoErComplaintMonthBase> ViewFoErComplaintMonthBase { get; set; }
        public virtual DbSet<ViewFoErComplaintSite> ViewFoErComplaintSite { get; set; }
        public virtual DbSet<ViewFoQiCloseOutCertificate> ViewFoQiCloseOutCertificate { get; set; }
        public virtual DbSet<ViewHssBaselineBulkStore> ViewHssBaselineBulkStore { get; set; }
        public virtual DbSet<ViewHssBaselineFocusGroupDiscussion> ViewHssBaselineFocusGroupDiscussion { get; set; }
        public virtual DbSet<ViewHssBaselineHfServices> ViewHssBaselineHfServices { get; set; }
        public virtual DbSet<ViewHssBaselineHfServicesStaffResponsibility> ViewHssBaselineHfServicesStaffResponsibility { get; set; }
        public virtual DbSet<ViewHssBaselineLaboratory> ViewHssBaselineLaboratory { get; set; }
        public virtual DbSet<ViewHssBaselineLaboratoryChecklist> ViewHssBaselineLaboratoryChecklist { get; set; }
        public virtual DbSet<ViewHssBaselineLaboratoryMachines> ViewHssBaselineLaboratoryMachines { get; set; }
        public virtual DbSet<ViewHssBaselineLmis> ViewHssBaselineLmis { get; set; }
        public virtual DbSet<ViewHssBaselinePharmacy> ViewHssBaselinePharmacy { get; set; }
        public virtual DbSet<ViewHssBaselineToolsReview> ViewHssBaselineToolsReview { get; set; }
        public virtual DbSet<ViewHssDbQueryDnGrn> ViewHssDbQueryDnGrn { get; set; }
        public virtual DbSet<ViewHssDnGrn> ViewHssDnGrn { get; set; }
        public virtual DbSet<ViewHssNeedsAssessmentKeyInformantInterview> ViewHssNeedsAssessmentKeyInformantInterview { get; set; }
        public virtual DbSet<ViewHssNeedsAssessmentPhysicalInfrastructure> ViewHssNeedsAssessmentPhysicalInfrastructure { get; set; }
        public virtual DbSet<ViewHssNeedsAssessmentSpaceOptimization> ViewHssNeedsAssessmentSpaceOptimization { get; set; }
        public virtual DbSet<ViewHssSpaceAssessment> ViewHssSpaceAssessment { get; set; }
        public virtual DbSet<ViewHssSpaceAssessmentKeyInformantInterview> ViewHssSpaceAssessmentKeyInformantInterview { get; set; }
        public virtual DbSet<ViewJA1> ViewJA1 { get; set; }
        public virtual DbSet<ViewJA2> ViewJA2 { get; set; }
        public virtual DbSet<ViewJBatchDel> ViewJBatchDel { get; set; }
        public virtual DbSet<ViewJoreen> ViewJoreen { get; set; }
        public virtual DbSet<ViewKpi3> ViewKpi3 { get; set; }
        public virtual DbSet<ViewKpi3Fuel> ViewKpi3Fuel { get; set; }
        public virtual DbSet<ViewKpi3MaintenanceCost> ViewKpi3MaintenanceCost { get; set; }
        public virtual DbSet<ViewKpiAvialability> ViewKpiAvialability { get; set; }
        public virtual DbSet<ViewKpiDistanceTravelled> ViewKpiDistanceTravelled { get; set; }
        public virtual DbSet<ViewKpiFuelConsumption> ViewKpiFuelConsumption { get; set; }
        public virtual DbSet<ViewKpiSafetyRecord> ViewKpiSafetyRecord { get; set; }
        public virtual DbSet<ViewKpiSafetyRecordBase> ViewKpiSafetyRecordBase { get; set; }
        public virtual DbSet<ViewKpiUtilization> ViewKpiUtilization { get; set; }
        public virtual DbSet<ViewKpiUtilizationDaysUsed> ViewKpiUtilizationDaysUsed { get; set; }
        public virtual DbSet<ViewLmisAllocationArv> ViewLmisAllocationArv { get; set; }
        public virtual DbSet<ViewLmisAllocationNArv> ViewLmisAllocationNArv { get; set; }
        public virtual DbSet<ViewLmisAllocationNArvEmergency> ViewLmisAllocationNArvEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNArvSum> ViewLmisAllocationNArvSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNArvSumEmergency> ViewLmisAllocationNArvSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNLab> ViewLmisAllocationNLab { get; set; }
        public virtual DbSet<ViewLmisAllocationNLabCustom> ViewLmisAllocationNLabCustom { get; set; }
        public virtual DbSet<ViewLmisAllocationNLabEmergency> ViewLmisAllocationNLabEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNLabSum> ViewLmisAllocationNLabSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNLabSumEmergency> ViewLmisAllocationNLabSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNMault> ViewLmisAllocationNMault { get; set; }
        public virtual DbSet<ViewLmisAllocationNOiSti> ViewLmisAllocationNOiSti { get; set; }
        public virtual DbSet<ViewLmisAllocationNOiStiEmergency> ViewLmisAllocationNOiStiEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNOiStiSum> ViewLmisAllocationNOiStiSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNOiStiSumEmergency> ViewLmisAllocationNOiStiSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNRutf> ViewLmisAllocationNRutf { get; set; }
        public virtual DbSet<ViewLmisAllocationNSmc> ViewLmisAllocationNSmc { get; set; }
        public virtual DbSet<ViewLmisAllocationNSmcEmergency> ViewLmisAllocationNSmcEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNSmcSum> ViewLmisAllocationNSmcSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNSmcSumEmergency> ViewLmisAllocationNSmcSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNTb> ViewLmisAllocationNTb { get; set; }
        public virtual DbSet<ViewLmisAllocationNTestKit> ViewLmisAllocationNTestKit { get; set; }
        public virtual DbSet<ViewLmisAllocationNTestKitEmergency> ViewLmisAllocationNTestKitEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNTestKitSum> ViewLmisAllocationNTestKitSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNTestKitSumEmergency> ViewLmisAllocationNTestKitSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNViralLoad> ViewLmisAllocationNViralLoad { get; set; }
        public virtual DbSet<ViewLmisAllocationNViralLoadEmergency> ViewLmisAllocationNViralLoadEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationNViralLoadSum> ViewLmisAllocationNViralLoadSum { get; set; }
        public virtual DbSet<ViewLmisAllocationNViralLoadSumEmergency> ViewLmisAllocationNViralLoadSumEmergency { get; set; }
        public virtual DbSet<ViewLmisAllocationSmc> ViewLmisAllocationSmc { get; set; }
        public virtual DbSet<ViewLmisAllocationTestKit> ViewLmisAllocationTestKit { get; set; }
        public virtual DbSet<ViewLmisAmcArv> ViewLmisAmcArv { get; set; }
        public virtual DbSet<ViewLmisAmcArv2> ViewLmisAmcArv2 { get; set; }
        public virtual DbSet<ViewLmisAmcLab> ViewLmisAmcLab { get; set; }
        public virtual DbSet<ViewLmisAmcLab2> ViewLmisAmcLab2 { get; set; }
        public virtual DbSet<ViewLmisAmcOi> ViewLmisAmcOi { get; set; }
        public virtual DbSet<ViewLmisAmcOi2> ViewLmisAmcOi2 { get; set; }
        public virtual DbSet<ViewLmisAmcRutf> ViewLmisAmcRutf { get; set; }
        public virtual DbSet<ViewLmisAmcRutf2> ViewLmisAmcRutf2 { get; set; }
        public virtual DbSet<ViewLmisAmcSmc> ViewLmisAmcSmc { get; set; }
        public virtual DbSet<ViewLmisAmcSmc2> ViewLmisAmcSmc2 { get; set; }
        public virtual DbSet<ViewLmisAmcTb> ViewLmisAmcTb { get; set; }
        public virtual DbSet<ViewLmisAmcTb2> ViewLmisAmcTb2 { get; set; }
        public virtual DbSet<ViewLmisAmcTestKit> ViewLmisAmcTestKit { get; set; }
        public virtual DbSet<ViewLmisAmcTestKit2> ViewLmisAmcTestKit2 { get; set; }
        public virtual DbSet<ViewLmisAmcVl> ViewLmisAmcVl { get; set; }
        public virtual DbSet<ViewLmisAmcVl2> ViewLmisAmcVl2 { get; set; }
        public virtual DbSet<ViewLmisArtExtraRegimenBase> ViewLmisArtExtraRegimenBase { get; set; }
        public virtual DbSet<ViewLmisArvAmc> ViewLmisArvAmc { get; set; }
        public virtual DbSet<ViewLmisCConsumption> ViewLmisCConsumption { get; set; }
        public virtual DbSet<ViewLmisCRr> ViewLmisCRr { get; set; }
        public virtual DbSet<ViewLmisCRrArv> ViewLmisCRrArv { get; set; }
        public virtual DbSet<ViewLmisCRrArvEmergency> ViewLmisCRrArvEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrArvExpected> ViewLmisCRrArvExpected { get; set; }
        public virtual DbSet<ViewLmisCRrArvFinal> ViewLmisCRrArvFinal { get; set; }
        public virtual DbSet<ViewLmisCRrArvOntime> ViewLmisCRrArvOntime { get; set; }
        public virtual DbSet<ViewLmisCRrArvOntimeX> ViewLmisCRrArvOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrArvP> ViewLmisCRrArvP { get; set; }
        public virtual DbSet<ViewLmisCRrArvRecieved> ViewLmisCRrArvRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrExpectedReportd> ViewLmisCRrExpectedReportd { get; set; }
        public virtual DbSet<ViewLmisCRrFacility> ViewLmisCRrFacility { get; set; }
        public virtual DbSet<ViewLmisCRrFacility1> ViewLmisCRrFacility1 { get; set; }
        public virtual DbSet<ViewLmisCRrFacilityDetails> ViewLmisCRrFacilityDetails { get; set; }
        public virtual DbSet<ViewLmisCRrFacilityDetails1> ViewLmisCRrFacilityDetails1 { get; set; }
        public virtual DbSet<ViewLmisCRrFacilityDetailsFinal> ViewLmisCRrFacilityDetailsFinal { get; set; }
        public virtual DbSet<ViewLmisCRrLab> ViewLmisCRrLab { get; set; }
        public virtual DbSet<ViewLmisCRrLabEmergency> ViewLmisCRrLabEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrLabExpected> ViewLmisCRrLabExpected { get; set; }
        public virtual DbSet<ViewLmisCRrLabFinal> ViewLmisCRrLabFinal { get; set; }
        public virtual DbSet<ViewLmisCRrLabOntime> ViewLmisCRrLabOntime { get; set; }
        public virtual DbSet<ViewLmisCRrLabOntimeX> ViewLmisCRrLabOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrLabP> ViewLmisCRrLabP { get; set; }
        public virtual DbSet<ViewLmisCRrLabRecieved> ViewLmisCRrLabRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrLabRecievedX> ViewLmisCRrLabRecievedX { get; set; }
        public virtual DbSet<ViewLmisCRrOi> ViewLmisCRrOi { get; set; }
        public virtual DbSet<ViewLmisCRrOiEmergency> ViewLmisCRrOiEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrOiExpected> ViewLmisCRrOiExpected { get; set; }
        public virtual DbSet<ViewLmisCRrOiFinal> ViewLmisCRrOiFinal { get; set; }
        public virtual DbSet<ViewLmisCRrOiOntime> ViewLmisCRrOiOntime { get; set; }
        public virtual DbSet<ViewLmisCRrOiOntimeX> ViewLmisCRrOiOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrOiP> ViewLmisCRrOiP { get; set; }
        public virtual DbSet<ViewLmisCRrOiRecieved> ViewLmisCRrOiRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrRutf> ViewLmisCRrRutf { get; set; }
        public virtual DbSet<ViewLmisCRrRutfEmergency> ViewLmisCRrRutfEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrRutfExpected> ViewLmisCRrRutfExpected { get; set; }
        public virtual DbSet<ViewLmisCRrRutfFinal> ViewLmisCRrRutfFinal { get; set; }
        public virtual DbSet<ViewLmisCRrRutfOntime> ViewLmisCRrRutfOntime { get; set; }
        public virtual DbSet<ViewLmisCRrRutfOntimeX> ViewLmisCRrRutfOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrRutfP> ViewLmisCRrRutfP { get; set; }
        public virtual DbSet<ViewLmisCRrRutfRecieved> ViewLmisCRrRutfRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrSmc> ViewLmisCRrSmc { get; set; }
        public virtual DbSet<ViewLmisCRrSmcEmergency> ViewLmisCRrSmcEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrSmcExpected> ViewLmisCRrSmcExpected { get; set; }
        public virtual DbSet<ViewLmisCRrSmcFinal> ViewLmisCRrSmcFinal { get; set; }
        public virtual DbSet<ViewLmisCRrSmcOntime> ViewLmisCRrSmcOntime { get; set; }
        public virtual DbSet<ViewLmisCRrSmcOntimeX> ViewLmisCRrSmcOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrSmcP> ViewLmisCRrSmcP { get; set; }
        public virtual DbSet<ViewLmisCRrSmcRecieved> ViewLmisCRrSmcRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrSmcX> ViewLmisCRrSmcX { get; set; }
        public virtual DbSet<ViewLmisCRrTb> ViewLmisCRrTb { get; set; }
        public virtual DbSet<ViewLmisCRrTbEmergency> ViewLmisCRrTbEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrTbExpected> ViewLmisCRrTbExpected { get; set; }
        public virtual DbSet<ViewLmisCRrTbFinal> ViewLmisCRrTbFinal { get; set; }
        public virtual DbSet<ViewLmisCRrTbOntime> ViewLmisCRrTbOntime { get; set; }
        public virtual DbSet<ViewLmisCRrTbOntimeX> ViewLmisCRrTbOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrTbP> ViewLmisCRrTbP { get; set; }
        public virtual DbSet<ViewLmisCRrTbRecieved> ViewLmisCRrTbRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrTk> ViewLmisCRrTk { get; set; }
        public virtual DbSet<ViewLmisCRrTkEmergency> ViewLmisCRrTkEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrTkExpected> ViewLmisCRrTkExpected { get; set; }
        public virtual DbSet<ViewLmisCRrTkFinal> ViewLmisCRrTkFinal { get; set; }
        public virtual DbSet<ViewLmisCRrTkOntime> ViewLmisCRrTkOntime { get; set; }
        public virtual DbSet<ViewLmisCRrTkOntimeX> ViewLmisCRrTkOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrTkP> ViewLmisCRrTkP { get; set; }
        public virtual DbSet<ViewLmisCRrTkRecieved> ViewLmisCRrTkRecieved { get; set; }
        public virtual DbSet<ViewLmisCRrVl> ViewLmisCRrVl { get; set; }
        public virtual DbSet<ViewLmisCRrVlEmergency> ViewLmisCRrVlEmergency { get; set; }
        public virtual DbSet<ViewLmisCRrVlExpected> ViewLmisCRrVlExpected { get; set; }
        public virtual DbSet<ViewLmisCRrVlFinal> ViewLmisCRrVlFinal { get; set; }
        public virtual DbSet<ViewLmisCRrVlOntime> ViewLmisCRrVlOntime { get; set; }
        public virtual DbSet<ViewLmisCRrVlOntimeX> ViewLmisCRrVlOntimeX { get; set; }
        public virtual DbSet<ViewLmisCRrVlP> ViewLmisCRrVlP { get; set; }
        public virtual DbSet<ViewLmisCRrVlRecieved> ViewLmisCRrVlRecieved { get; set; }
        public virtual DbSet<ViewLmisChartConsumptionLab> ViewLmisChartConsumptionLab { get; set; }
        public virtual DbSet<ViewLmisChartConsumptionSmc> ViewLmisChartConsumptionSmc { get; set; }
        public virtual DbSet<ViewLmisChartConsumptionTestKit> ViewLmisChartConsumptionTestKit { get; set; }
        public virtual DbSet<ViewLmisConArvA> ViewLmisConArvA { get; set; }
        public virtual DbSet<ViewLmisConArvPatientNoA> ViewLmisConArvPatientNoA { get; set; }
        public virtual DbSet<ViewLmisConArvX> ViewLmisConArvX { get; set; }
        public virtual DbSet<ViewLmisConLabA> ViewLmisConLabA { get; set; }
        public virtual DbSet<ViewLmisConLabX> ViewLmisConLabX { get; set; }
        public virtual DbSet<ViewLmisConOiA> ViewLmisConOiA { get; set; }
        public virtual DbSet<ViewLmisConOiX> ViewLmisConOiX { get; set; }
        public virtual DbSet<ViewLmisConRutfA> ViewLmisConRutfA { get; set; }
        public virtual DbSet<ViewLmisConRutfX> ViewLmisConRutfX { get; set; }
        public virtual DbSet<ViewLmisConSmcA> ViewLmisConSmcA { get; set; }
        public virtual DbSet<ViewLmisConSmcX> ViewLmisConSmcX { get; set; }
        public virtual DbSet<ViewLmisConTbA> ViewLmisConTbA { get; set; }
        public virtual DbSet<ViewLmisConTbX> ViewLmisConTbX { get; set; }
        public virtual DbSet<ViewLmisConTkA> ViewLmisConTkA { get; set; }
        public virtual DbSet<ViewLmisConTkX> ViewLmisConTkX { get; set; }
        public virtual DbSet<ViewLmisConVlA> ViewLmisConVlA { get; set; }
        public virtual DbSet<ViewLmisConVlX> ViewLmisConVlX { get; set; }
        public virtual DbSet<ViewLmisConsumption> ViewLmisConsumption { get; set; }
        public virtual DbSet<ViewLmisConsumptionArv> ViewLmisConsumptionArv { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonArt1> ViewLmisConsumptionComparisonArt1 { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonArt2> ViewLmisConsumptionComparisonArt2 { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonHivTestKits1> ViewLmisConsumptionComparisonHivTestKits1 { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonOiSti1> ViewLmisConsumptionComparisonOiSti1 { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonSmc1> ViewLmisConsumptionComparisonSmc1 { get; set; }
        public virtual DbSet<ViewLmisConsumptionComparisonViralLoad1> ViewLmisConsumptionComparisonViralLoad1 { get; set; }
        public virtual DbSet<ViewLmisConsumptionSmc> ViewLmisConsumptionSmc { get; set; }
        public virtual DbSet<ViewLmisConsumptionTestKit> ViewLmisConsumptionTestKit { get; set; }
        public virtual DbSet<ViewLmisCountExpectedReports> ViewLmisCountExpectedReports { get; set; }
        public virtual DbSet<ViewLmisDeleteSmc> ViewLmisDeleteSmc { get; set; }
        public virtual DbSet<ViewLmisEmergencyArt> ViewLmisEmergencyArt { get; set; }
        public virtual DbSet<ViewLmisEmergencyLab> ViewLmisEmergencyLab { get; set; }
        public virtual DbSet<ViewLmisEmergencyOiSti> ViewLmisEmergencyOiSti { get; set; }
        public virtual DbSet<ViewLmisEmergencySmcSlm> ViewLmisEmergencySmcSlm { get; set; }
        public virtual DbSet<ViewLmisEmergencyTestKit> ViewLmisEmergencyTestKit { get; set; }
        public virtual DbSet<ViewLmisEmergencyViralLoadReagents> ViewLmisEmergencyViralLoadReagents { get; set; }
        public virtual DbSet<ViewLmisExpectedReport> ViewLmisExpectedReport { get; set; }
        public virtual DbSet<ViewLmisExpectedReportsX> ViewLmisExpectedReportsX { get; set; }
        public virtual DbSet<ViewLmisExpectedReportsY> ViewLmisExpectedReportsY { get; set; }
        public virtual DbSet<ViewLmisFrostArt> ViewLmisFrostArt { get; set; }
        public virtual DbSet<ViewLmisFrostArtA> ViewLmisFrostArtA { get; set; }
        public virtual DbSet<ViewLmisFrostHtk> ViewLmisFrostHtk { get; set; }
        public virtual DbSet<ViewLmisFrostHtkA> ViewLmisFrostHtkA { get; set; }
        public virtual DbSet<ViewLmisFrostLab> ViewLmisFrostLab { get; set; }
        public virtual DbSet<ViewLmisFrostLabA> ViewLmisFrostLabA { get; set; }
        public virtual DbSet<ViewLmisPSSmc> ViewLmisPSSmc { get; set; }
        public virtual DbSet<ViewLmisPatientIpTk> ViewLmisPatientIpTk { get; set; }
        public virtual DbSet<ViewLmisPatientNo> ViewLmisPatientNo { get; set; }
        public virtual DbSet<ViewLmisPatientNoList> ViewLmisPatientNoList { get; set; }
        public virtual DbSet<ViewLmisRegimen> ViewLmisRegimen { get; set; }
        public virtual DbSet<ViewLmisRegimenClassification> ViewLmisRegimenClassification { get; set; }
        public virtual DbSet<ViewLmisRegimenExtra> ViewLmisRegimenExtra { get; set; }
        public virtual DbSet<ViewLmisRrArv> ViewLmisRrArv { get; set; }
        public virtual DbSet<ViewLmisRrRecieved> ViewLmisRrRecieved { get; set; }
        public virtual DbSet<ViewLmisRrSmc> ViewLmisRrSmc { get; set; }
        public virtual DbSet<ViewLmisRrTestKit> ViewLmisRrTestKit { get; set; }
        public virtual DbSet<ViewLmisSummary> ViewLmisSummary { get; set; }
        public virtual DbSet<ViewLmisSummaryFacilityIp> ViewLmisSummaryFacilityIp { get; set; }
        public virtual DbSet<ViewLmisSummaryFacilityLevelOfCare> ViewLmisSummaryFacilityLevelOfCare { get; set; }
        public virtual DbSet<ViewLmisSummaryHivTests> ViewLmisSummaryHivTests { get; set; }
        public virtual DbSet<ViewLmisSummaryOrderFulfilmentArv> ViewLmisSummaryOrderFulfilmentArv { get; set; }
        public virtual DbSet<ViewLmisSummaryPatientsArt> ViewLmisSummaryPatientsArt { get; set; }
        public virtual DbSet<ViewLmisSummaryRecievedReports> ViewLmisSummaryRecievedReports { get; set; }
        public virtual DbSet<ViewLmisSummaryRecievedReportsTestKit> ViewLmisSummaryRecievedReportsTestKit { get; set; }
        public virtual DbSet<ViewLmisSummarySites> ViewLmisSummarySites { get; set; }
        public virtual DbSet<ViewLmisSummaryStockoutArv> ViewLmisSummaryStockoutArv { get; set; }
        public virtual DbSet<ViewLmisSummaryStockoutTestKit> ViewLmisSummaryStockoutTestKit { get; set; }
        public virtual DbSet<ViewLmisSummaryTimelinessArv> ViewLmisSummaryTimelinessArv { get; set; }
        public virtual DbSet<ViewLmisSummaryTimelinessTestKit> ViewLmisSummaryTimelinessTestKit { get; set; }
        public virtual DbSet<ViewLmisTOrderTAllocatedSmc> ViewLmisTOrderTAllocatedSmc { get; set; }
        public virtual DbSet<ViewLmisTimelinessArv> ViewLmisTimelinessArv { get; set; }
        public virtual DbSet<ViewMascisExport> ViewMascisExport { get; set; }
        public virtual DbSet<ViewMaulStaff> ViewMaulStaff { get; set; }
        public virtual DbSet<ViewMileage> ViewMileage { get; set; }
        public virtual DbSet<ViewMileageForm> ViewMileageForm { get; set; }
        public virtual DbSet<ViewMonthOfStockBase> ViewMonthOfStockBase { get; set; }
        public virtual DbSet<ViewMonthSector> ViewMonthSector { get; set; }
        public virtual DbSet<ViewMonthSectorX> ViewMonthSectorX { get; set; }
        public virtual DbSet<ViewOrderDrugDetails> ViewOrderDrugDetails { get; set; }
        public virtual DbSet<ViewOrderDrugDetailsPhysicalCountSummary> ViewOrderDrugDetailsPhysicalCountSummary { get; set; }
        public virtual DbSet<ViewOrderHivRapidTestKit> ViewOrderHivRapidTestKit { get; set; }
        public virtual DbSet<ViewOrderHivRapidTestKitPhysicalCountSummary> ViewOrderHivRapidTestKitPhysicalCountSummary { get; set; }
        public virtual DbSet<ViewOrderLab> ViewOrderLab { get; set; }
        public virtual DbSet<ViewOrderLabAllocation> ViewOrderLabAllocation { get; set; }
        public virtual DbSet<ViewOrderLabCustom> ViewOrderLabCustom { get; set; }
        public virtual DbSet<ViewOrderLabCustomOrders> ViewOrderLabCustomOrders { get; set; }
        public virtual DbSet<ViewOrderLabExport> ViewOrderLabExport { get; set; }
        public virtual DbSet<ViewOrderLabFinal> ViewOrderLabFinal { get; set; }
        public virtual DbSet<ViewOrderLabHsipCustomOrders> ViewOrderLabHsipCustomOrders { get; set; }
        public virtual DbSet<ViewOrderLabPhysicalCountSummary> ViewOrderLabPhysicalCountSummary { get; set; }
        public virtual DbSet<ViewOrderLabProductcode> ViewOrderLabProductcode { get; set; }
        public virtual DbSet<ViewOrderLabSapExport> ViewOrderLabSapExport { get; set; }
        public virtual DbSet<ViewOrderLabSapExportDetails> ViewOrderLabSapExportDetails { get; set; }
        public virtual DbSet<ViewOrderLabSapExportFinal> ViewOrderLabSapExportFinal { get; set; }
        public virtual DbSet<ViewOrderMault> ViewOrderMault { get; set; }
        public virtual DbSet<ViewOrderNumberArt> ViewOrderNumberArt { get; set; }
        public virtual DbSet<ViewOrderNumberHivtestKits> ViewOrderNumberHivtestKits { get; set; }
        public virtual DbSet<ViewOrderNumberLaboratory> ViewOrderNumberLaboratory { get; set; }
        public virtual DbSet<ViewOrderNumberMault> ViewOrderNumberMault { get; set; }
        public virtual DbSet<ViewOrderNumberOi> ViewOrderNumberOi { get; set; }
        public virtual DbSet<ViewOrderNumberRutf> ViewOrderNumberRutf { get; set; }
        public virtual DbSet<ViewOrderNumberSmc> ViewOrderNumberSmc { get; set; }
        public virtual DbSet<ViewOrderNumberTb> ViewOrderNumberTb { get; set; }
        public virtual DbSet<ViewOrderNumberViralLoad> ViewOrderNumberViralLoad { get; set; }
        public virtual DbSet<ViewOrderOiSti> ViewOrderOiSti { get; set; }
        public virtual DbSet<ViewOrderOiStiPhysicalCountSummary> ViewOrderOiStiPhysicalCountSummary { get; set; }
        public virtual DbSet<ViewOrderRutf> ViewOrderRutf { get; set; }
        public virtual DbSet<ViewOrderSmc> ViewOrderSmc { get; set; }
        public virtual DbSet<ViewOrderSmcPhysicalCountSummary> ViewOrderSmcPhysicalCountSummary { get; set; }
        public virtual DbSet<ViewOrderTb> ViewOrderTb { get; set; }
        public virtual DbSet<ViewOrderTrackingModule> ViewOrderTrackingModule { get; set; }
        public virtual DbSet<ViewOrderTrackingModule1> ViewOrderTrackingModule1 { get; set; }
        public virtual DbSet<ViewOrderTrackingModuleLog> ViewOrderTrackingModuleLog { get; set; }
        public virtual DbSet<ViewOrderTrackingModuleLog1> ViewOrderTrackingModuleLog1 { get; set; }
        public virtual DbSet<ViewOrderTrackingModuleOrderDetails> ViewOrderTrackingModuleOrderDetails { get; set; }
        public virtual DbSet<ViewOrderTrackingModuleOrderDetails1> ViewOrderTrackingModuleOrderDetails1 { get; set; }
        public virtual DbSet<ViewOrderViralLoadReagents> ViewOrderViralLoadReagents { get; set; }
        public virtual DbSet<ViewPalAmcArt> ViewPalAmcArt { get; set; }
        public virtual DbSet<ViewPalAmcLab> ViewPalAmcLab { get; set; }
        public virtual DbSet<ViewPalAmcOi> ViewPalAmcOi { get; set; }
        public virtual DbSet<ViewPalAmcSmc> ViewPalAmcSmc { get; set; }
        public virtual DbSet<ViewPalAmcTestKits> ViewPalAmcTestKits { get; set; }
        public virtual DbSet<ViewPalAmcViralLoad> ViewPalAmcViralLoad { get; set; }
        public virtual DbSet<ViewPalConsumption> ViewPalConsumption { get; set; }
        public virtual DbSet<ViewPalDistrict> ViewPalDistrict { get; set; }
        public virtual DbSet<ViewPalFacilities> ViewPalFacilities { get; set; }
        public virtual DbSet<ViewPalIp> ViewPalIp { get; set; }
        public virtual DbSet<ViewPalMstAmc> ViewPalMstAmc { get; set; }
        public virtual DbSet<ViewPalMstCdcregion> ViewPalMstCdcregion { get; set; }
        public virtual DbSet<ViewPalMstDistrict> ViewPalMstDistrict { get; set; }
        public virtual DbSet<ViewPalMstParish> ViewPalMstParish { get; set; }
        public virtual DbSet<ViewPalMstProduct> ViewPalMstProduct { get; set; }
        public virtual DbSet<ViewPalMstRegimen> ViewPalMstRegimen { get; set; }
        public virtual DbSet<ViewPalMstRegion> ViewPalMstRegion { get; set; }
        public virtual DbSet<ViewPalMstSubCounty> ViewPalMstSubCounty { get; set; }
        public virtual DbSet<ViewPalMstUserDetails> ViewPalMstUserDetails { get; set; }
        public virtual DbSet<ViewPalMstUserRoles> ViewPalMstUserRoles { get; set; }
        public virtual DbSet<ViewPalProducts> ViewPalProducts { get; set; }
        public virtual DbSet<ViewPalSctoFacility> ViewPalSctoFacility { get; set; }
        public virtual DbSet<ViewPalUsers> ViewPalUsers { get; set; }
        public virtual DbSet<ViewPatientSummary> ViewPatientSummary { get; set; }
        public virtual DbSet<ViewPatientSummaryBase> ViewPatientSummaryBase { get; set; }
        public virtual DbSet<ViewPmp1a> ViewPmp1a { get; set; }
        public virtual DbSet<ViewPmp1aX> ViewPmp1aX { get; set; }
        public virtual DbSet<ViewPmp1aXA> ViewPmp1aXA { get; set; }
        public virtual DbSet<ViewPmp1aXB> ViewPmp1aXB { get; set; }
        public virtual DbSet<ViewPmp1b> ViewPmp1b { get; set; }
        public virtual DbSet<ViewPmp1bX> ViewPmp1bX { get; set; }
        public virtual DbSet<ViewPmp1bXA> ViewPmp1bXA { get; set; }
        public virtual DbSet<ViewPmp1bXB> ViewPmp1bXB { get; set; }
        public virtual DbSet<ViewPmp1c> ViewPmp1c { get; set; }
        public virtual DbSet<ViewPmp1d> ViewPmp1d { get; set; }
        public virtual DbSet<ViewPmp2a> ViewPmp2a { get; set; }
        public virtual DbSet<ViewPmp2aX> ViewPmp2aX { get; set; }
        public virtual DbSet<ViewPmp2b> ViewPmp2b { get; set; }
        public virtual DbSet<ViewPmp2bX> ViewPmp2bX { get; set; }
        public virtual DbSet<ViewPmp2c> ViewPmp2c { get; set; }
        public virtual DbSet<ViewPmp2cX> ViewPmp2cX { get; set; }
        public virtual DbSet<ViewPmp3a> ViewPmp3a { get; set; }
        public virtual DbSet<ViewPmp3aX> ViewPmp3aX { get; set; }
        public virtual DbSet<ViewPmp3aXA> ViewPmp3aXA { get; set; }
        public virtual DbSet<ViewPmp3aXB> ViewPmp3aXB { get; set; }
        public virtual DbSet<ViewPmp3b> ViewPmp3b { get; set; }
        public virtual DbSet<ViewPmp3bA> ViewPmp3bA { get; set; }
        public virtual DbSet<ViewPmp3bA1> ViewPmp3bA1 { get; set; }
        public virtual DbSet<ViewPmp3bA2> ViewPmp3bA2 { get; set; }
        public virtual DbSet<ViewPmp3bX> ViewPmp3bX { get; set; }
        public virtual DbSet<ViewPmp3bX1> ViewPmp3bX1 { get; set; }
        public virtual DbSet<ViewPmp3bX2> ViewPmp3bX2 { get; set; }
        public virtual DbSet<ViewPmp3c> ViewPmp3c { get; set; }
        public virtual DbSet<ViewPmp3cA> ViewPmp3cA { get; set; }
        public virtual DbSet<ViewPmp3cB> ViewPmp3cB { get; set; }
        public virtual DbSet<ViewPmp3cX> ViewPmp3cX { get; set; }
        public virtual DbSet<ViewPmp3d> ViewPmp3d { get; set; }
        public virtual DbSet<ViewPmp3dX> ViewPmp3dX { get; set; }
        public virtual DbSet<ViewPmp3dX1> ViewPmp3dX1 { get; set; }
        public virtual DbSet<ViewPmp3dX2> ViewPmp3dX2 { get; set; }
        public virtual DbSet<ViewPmp3e> ViewPmp3e { get; set; }
        public virtual DbSet<ViewPmp3eX> ViewPmp3eX { get; set; }
        public virtual DbSet<ViewPmp3eX1> ViewPmp3eX1 { get; set; }
        public virtual DbSet<ViewPmp3eX2> ViewPmp3eX2 { get; set; }
        public virtual DbSet<ViewPmp3f> ViewPmp3f { get; set; }
        public virtual DbSet<ViewPmp3fX> ViewPmp3fX { get; set; }
        public virtual DbSet<ViewPmp3fX1> ViewPmp3fX1 { get; set; }
        public virtual DbSet<ViewPmp3fX2> ViewPmp3fX2 { get; set; }
        public virtual DbSet<ViewPmp3g> ViewPmp3g { get; set; }
        public virtual DbSet<ViewPmp3gX> ViewPmp3gX { get; set; }
        public virtual DbSet<ViewPmp4a> ViewPmp4a { get; set; }
        public virtual DbSet<ViewPmp4aX> ViewPmp4aX { get; set; }
        public virtual DbSet<ViewPmp4aXA> ViewPmp4aXA { get; set; }
        public virtual DbSet<ViewPmp4aXB> ViewPmp4aXB { get; set; }
        public virtual DbSet<ViewPmp4b> ViewPmp4b { get; set; }
        public virtual DbSet<ViewPmp4bX> ViewPmp4bX { get; set; }
        public virtual DbSet<ViewPmp4bXA> ViewPmp4bXA { get; set; }
        public virtual DbSet<ViewPmp4bXB> ViewPmp4bXB { get; set; }
        public virtual DbSet<ViewPmp4c> ViewPmp4c { get; set; }
        public virtual DbSet<ViewPmp4cX> ViewPmp4cX { get; set; }
        public virtual DbSet<ViewPmp4cXA> ViewPmp4cXA { get; set; }
        public virtual DbSet<ViewPmp4cXB> ViewPmp4cXB { get; set; }
        public virtual DbSet<ViewPmp4d> ViewPmp4d { get; set; }
        public virtual DbSet<ViewPmp4dA> ViewPmp4dA { get; set; }
        public virtual DbSet<ViewPmp4dB> ViewPmp4dB { get; set; }
        public virtual DbSet<ViewPmp4dX> ViewPmp4dX { get; set; }
        public virtual DbSet<ViewPmp4dXA> ViewPmp4dXA { get; set; }
        public virtual DbSet<ViewPmp4dXB> ViewPmp4dXB { get; set; }
        public virtual DbSet<ViewPmp4e> ViewPmp4e { get; set; }
        public virtual DbSet<ViewPmp4eX> ViewPmp4eX { get; set; }
        public virtual DbSet<ViewPmp4eXA> ViewPmp4eXA { get; set; }
        public virtual DbSet<ViewPmp4eXB> ViewPmp4eXB { get; set; }
        public virtual DbSet<ViewPmp4f> ViewPmp4f { get; set; }
        public virtual DbSet<ViewPmp4fA> ViewPmp4fA { get; set; }
        public virtual DbSet<ViewPmp4fB> ViewPmp4fB { get; set; }
        public virtual DbSet<ViewPmp4fX> ViewPmp4fX { get; set; }
        public virtual DbSet<ViewPmp4g> ViewPmp4g { get; set; }
        public virtual DbSet<ViewPmp4gA> ViewPmp4gA { get; set; }
        public virtual DbSet<ViewPmp4gB> ViewPmp4gB { get; set; }
        public virtual DbSet<ViewPmp4gX> ViewPmp4gX { get; set; }
        public virtual DbSet<ViewPmp4gXA> ViewPmp4gXA { get; set; }
        public virtual DbSet<ViewPmp4gXB> ViewPmp4gXB { get; set; }
        public virtual DbSet<ViewPmp5a> ViewPmp5a { get; set; }
        public virtual DbSet<ViewPmp5aA> ViewPmp5aA { get; set; }
        public virtual DbSet<ViewPmp5aB> ViewPmp5aB { get; set; }
        public virtual DbSet<ViewPmp5aX> ViewPmp5aX { get; set; }
        public virtual DbSet<ViewPmp5aXA> ViewPmp5aXA { get; set; }
        public virtual DbSet<ViewPmp5aXB> ViewPmp5aXB { get; set; }
        public virtual DbSet<ViewPmp5b> ViewPmp5b { get; set; }
        public virtual DbSet<ViewPmp5bA> ViewPmp5bA { get; set; }
        public virtual DbSet<ViewPmp5bB> ViewPmp5bB { get; set; }
        public virtual DbSet<ViewPmp5c> ViewPmp5c { get; set; }
        public virtual DbSet<ViewPmp5cA> ViewPmp5cA { get; set; }
        public virtual DbSet<ViewPmp5cB> ViewPmp5cB { get; set; }
        public virtual DbSet<ViewPmp5e> ViewPmp5e { get; set; }
        public virtual DbSet<ViewPmp5eA> ViewPmp5eA { get; set; }
        public virtual DbSet<ViewPmp5eX> ViewPmp5eX { get; set; }
        public virtual DbSet<ViewPmp5eXA> ViewPmp5eXA { get; set; }
        public virtual DbSet<ViewPmp5eXB> ViewPmp5eXB { get; set; }
        public virtual DbSet<ViewPmp5f> ViewPmp5f { get; set; }
        public virtual DbSet<ViewPmp5fA> ViewPmp5fA { get; set; }
        public virtual DbSet<ViewPmp5fB> ViewPmp5fB { get; set; }
        public virtual DbSet<ViewPmp5fX> ViewPmp5fX { get; set; }
        public virtual DbSet<ViewPmp5fXA> ViewPmp5fXA { get; set; }
        public virtual DbSet<ViewPmp5fXB> ViewPmp5fXB { get; set; }
        public virtual DbSet<ViewPmp5g> ViewPmp5g { get; set; }
        public virtual DbSet<ViewPmp5gA> ViewPmp5gA { get; set; }
        public virtual DbSet<ViewPmp5gB> ViewPmp5gB { get; set; }
        public virtual DbSet<ViewPmp5gX> ViewPmp5gX { get; set; }
        public virtual DbSet<ViewPmp5gXA> ViewPmp5gXA { get; set; }
        public virtual DbSet<ViewPmp5gXB> ViewPmp5gXB { get; set; }
        public virtual DbSet<ViewPmp5h> ViewPmp5h { get; set; }
        public virtual DbSet<ViewPmp5hX> ViewPmp5hX { get; set; }
        public virtual DbSet<ViewPmp5hX1> ViewPmp5hX1 { get; set; }
        public virtual DbSet<ViewPmp6a> ViewPmp6a { get; set; }
        public virtual DbSet<ViewPmp6aA> ViewPmp6aA { get; set; }
        public virtual DbSet<ViewPmp6aB> ViewPmp6aB { get; set; }
        public virtual DbSet<ViewPmp6b> ViewPmp6b { get; set; }
        public virtual DbSet<ViewPmp6bA> ViewPmp6bA { get; set; }
        public virtual DbSet<ViewPmp6bB> ViewPmp6bB { get; set; }
        public virtual DbSet<ViewPmp6c> ViewPmp6c { get; set; }
        public virtual DbSet<ViewPmp6cA> ViewPmp6cA { get; set; }
        public virtual DbSet<ViewPmp6cX> ViewPmp6cX { get; set; }
        public virtual DbSet<ViewPmp6cXA> ViewPmp6cXA { get; set; }
        public virtual DbSet<ViewPmp6cXB> ViewPmp6cXB { get; set; }
        public virtual DbSet<ViewPmp7a> ViewPmp7a { get; set; }
        public virtual DbSet<ViewPmp7aX> ViewPmp7aX { get; set; }
        public virtual DbSet<ViewPmp7b> ViewPmp7b { get; set; }
        public virtual DbSet<ViewPmp7bX> ViewPmp7bX { get; set; }
        public virtual DbSet<ViewPmp7c> ViewPmp7c { get; set; }
        public virtual DbSet<ViewPmp7cX> ViewPmp7cX { get; set; }
        public virtual DbSet<ViewPmpActualConsumption> ViewPmpActualConsumption { get; set; }
        public virtual DbSet<ViewPmpActualProcurementCost> ViewPmpActualProcurementCost { get; set; }
        public virtual DbSet<ViewPmpAdheringDeadline> ViewPmpAdheringDeadline { get; set; }
        public virtual DbSet<ViewPmpArvPrice> ViewPmpArvPrice { get; set; }
        public virtual DbSet<ViewPmpCorrectOrders> ViewPmpCorrectOrders { get; set; }
        public virtual DbSet<ViewPmpDeliverySchedule> ViewPmpDeliverySchedule { get; set; }
        public virtual DbSet<ViewPmpEmergencyProcurement> ViewPmpEmergencyProcurement { get; set; }
        public virtual DbSet<ViewPmpIndicatorProductType> ViewPmpIndicatorProductType { get; set; }
        public virtual DbSet<ViewPmpMetrix> ViewPmpMetrix { get; set; }
        public virtual DbSet<ViewPmpOrderFillRate> ViewPmpOrderFillRate { get; set; }
        public virtual DbSet<ViewPmpOrderFulfillment> ViewPmpOrderFulfillment { get; set; }
        public virtual DbSet<ViewPmpPerformanceIndicator> ViewPmpPerformanceIndicator { get; set; }
        public virtual DbSet<ViewPmpPerformanceIndicatorCopYear> ViewPmpPerformanceIndicatorCopYear { get; set; }
        public virtual DbSet<ViewPmpPerformanceIndicatorCopYearA> ViewPmpPerformanceIndicatorCopYearA { get; set; }
        public virtual DbSet<ViewPmpProcuredProducts> ViewPmpProcuredProducts { get; set; }
        public virtual DbSet<ViewPmpProcuredProductsMoh> ViewPmpProcuredProductsMoh { get; set; }
        public virtual DbSet<ViewPmpProcuredProductsWhoFda> ViewPmpProcuredProductsWhoFda { get; set; }
        public virtual DbSet<ViewPmpScheduledDeliveries> ViewPmpScheduledDeliveries { get; set; }
        public virtual DbSet<ViewPmpScheduledShipments> ViewPmpScheduledShipments { get; set; }
        public virtual DbSet<ViewPmpShipmentsDelivered> ViewPmpShipmentsDelivered { get; set; }
        public virtual DbSet<ViewPmpStockOutBase> ViewPmpStockOutBase { get; set; }
        public virtual DbSet<ViewPmpStockOutFacilityBase> ViewPmpStockOutFacilityBase { get; set; }
        public virtual DbSet<ViewPmpStockOutRate> ViewPmpStockOutRate { get; set; }
        public virtual DbSet<ViewPmpTotalArvOrder> ViewPmpTotalArvOrder { get; set; }
        public virtual DbSet<ViewPmpTotalDeliveries> ViewPmpTotalDeliveries { get; set; }
        public virtual DbSet<ViewPmpTotalShipments> ViewPmpTotalShipments { get; set; }
        public virtual DbSet<ViewPriceSupplierList> ViewPriceSupplierList { get; set; }
        public virtual DbSet<ViewProcBidStatusAwardedProvider> ViewProcBidStatusAwardedProvider { get; set; }
        public virtual DbSet<ViewProcBidStatusBidManager> ViewProcBidStatusBidManager { get; set; }
        public virtual DbSet<ViewProcBidStatusEvaluationCommittee> ViewProcBidStatusEvaluationCommittee { get; set; }
        public virtual DbSet<ViewProcBidStatusReport> ViewProcBidStatusReport { get; set; }
        public virtual DbSet<ViewProcBidStatusReportActionTaken> ViewProcBidStatusReportActionTaken { get; set; }
        public virtual DbSet<ViewProcBidStatusReportEvaluationCommittee> ViewProcBidStatusReportEvaluationCommittee { get; set; }
        public virtual DbSet<ViewProcBidStatusSupplierQuotation> ViewProcBidStatusSupplierQuotation { get; set; }
        public virtual DbSet<ViewProcBudget> ViewProcBudget { get; set; }
        public virtual DbSet<ViewProcCDamages> ViewProcCDamages { get; set; }
        public virtual DbSet<ViewProcCDeliveries> ViewProcCDeliveries { get; set; }
        public virtual DbSet<ViewProcCExpectedDeliveries> ViewProcCExpectedDeliveries { get; set; }
        public virtual DbSet<ViewProcCOntimeShipment> ViewProcCOntimeShipment { get; set; }
        public virtual DbSet<ViewProcCQualityIssue> ViewProcCQualityIssue { get; set; }
        public virtual DbSet<ViewProcOrders> ViewProcOrders { get; set; }
        public virtual DbSet<ViewProcPfiList> ViewProcPfiList { get; set; }
        public virtual DbSet<ViewProcPrequalifiedSuppliers> ViewProcPrequalifiedSuppliers { get; set; }
        public virtual DbSet<ViewProcPriceSupplier> ViewProcPriceSupplier { get; set; }
        public virtual DbSet<ViewProcPriceSupplierAdd> ViewProcPriceSupplierAdd { get; set; }
        public virtual DbSet<ViewProcPriceSupplierRStatus> ViewProcPriceSupplierRStatus { get; set; }
        public virtual DbSet<ViewProcPriceSupplierReport> ViewProcPriceSupplierReport { get; set; }
        public virtual DbSet<ViewProcProductTracker> ViewProcProductTracker { get; set; }
        public virtual DbSet<ViewProcTask> ViewProcTask { get; set; }
        public virtual DbSet<ViewProcTracker> ViewProcTracker { get; set; }
        public virtual DbSet<ViewProcTrackerDetail> ViewProcTrackerDetail { get; set; }
        public virtual DbSet<ViewProcTrackerPrice> ViewProcTrackerPrice { get; set; }
        public virtual DbSet<ViewProcTrackerPriceList> ViewProcTrackerPriceList { get; set; }
        public virtual DbSet<ViewProductClassification> ViewProductClassification { get; set; }
        public virtual DbSet<ViewProductList> ViewProductList { get; set; }
        public virtual DbSet<ViewReportingRate> ViewReportingRate { get; set; }
        public virtual DbSet<ViewReportingRateFacilityArt> ViewReportingRateFacilityArt { get; set; }
        public virtual DbSet<ViewReportingRateFacilityHiv> ViewReportingRateFacilityHiv { get; set; }
        public virtual DbSet<ViewReportingRateFacilityLab> ViewReportingRateFacilityLab { get; set; }
        public virtual DbSet<ViewReportingRateFacilityOis> ViewReportingRateFacilityOis { get; set; }
        public virtual DbSet<ViewReportingRateFacilityRutf> ViewReportingRateFacilityRutf { get; set; }
        public virtual DbSet<ViewReportingRateFacilitySmc> ViewReportingRateFacilitySmc { get; set; }
        public virtual DbSet<ViewReportingRateFacilityTb> ViewReportingRateFacilityTb { get; set; }
        public virtual DbSet<ViewReportingRateFacilityViralLoad> ViewReportingRateFacilityViralLoad { get; set; }
        public virtual DbSet<ViewReportingRateHiv> ViewReportingRateHiv { get; set; }
        public virtual DbSet<ViewReportingRateLab> ViewReportingRateLab { get; set; }
        public virtual DbSet<ViewReportingRateOis> ViewReportingRateOis { get; set; }
        public virtual DbSet<ViewReportingRateRutf> ViewReportingRateRutf { get; set; }
        public virtual DbSet<ViewReportingRateSmc> ViewReportingRateSmc { get; set; }
        public virtual DbSet<ViewReportingRateTb> ViewReportingRateTb { get; set; }
        public virtual DbSet<ViewReportingRateViralLoad> ViewReportingRateViralLoad { get; set; }
        public virtual DbSet<ViewRfsoArtHeader> ViewRfsoArtHeader { get; set; }
        public virtual DbSet<ViewRptReportingRates> ViewRptReportingRates { get; set; }
        public virtual DbSet<ViewRptReportingRates1> ViewRptReportingRates1 { get; set; }
        public virtual DbSet<ViewSPSmc> ViewSPSmc { get; set; }
        public virtual DbSet<ViewSapStockOnHand> ViewSapStockOnHand { get; set; }
        public virtual DbSet<ViewSapStockStatus> ViewSapStockStatus { get; set; }
        public virtual DbSet<ViewSapXArvEmergency> ViewSapXArvEmergency { get; set; }
        public virtual DbSet<ViewSapXLabEmergency> ViewSapXLabEmergency { get; set; }
        public virtual DbSet<ViewSapXOiStiEmergency> ViewSapXOiStiEmergency { get; set; }
        public virtual DbSet<ViewSapXSmc> ViewSapXSmc { get; set; }
        public virtual DbSet<ViewSapXSmc1> ViewSapXSmc1 { get; set; }
        public virtual DbSet<ViewSapXSmc1A> ViewSapXSmc1A { get; set; }
        public virtual DbSet<ViewSapXSmc2> ViewSapXSmc2 { get; set; }
        public virtual DbSet<ViewSapXSmcSlmEmergency> ViewSapXSmcSlmEmergency { get; set; }
        public virtual DbSet<ViewSapXSmcX> ViewSapXSmcX { get; set; }
        public virtual DbSet<ViewSapXSmcXA> ViewSapXSmcXA { get; set; }
        public virtual DbSet<ViewSapXTkEmergency> ViewSapXTkEmergency { get; set; }
        public virtual DbSet<ViewSapXVlrEmergency> ViewSapXVlrEmergency { get; set; }
        public virtual DbSet<ViewShipmentsDelivered> ViewShipmentsDelivered { get; set; }
        public virtual DbSet<ViewSsmtAreaVisited> ViewSsmtAreaVisited { get; set; }
        public virtual DbSet<ViewSsmtCrystalNationalLmisTools> ViewSsmtCrystalNationalLmisTools { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockCardsBase> ViewSsmtCrystalStockCardsBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockCardsCd4testBase> ViewSsmtCrystalStockCardsCd4testBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockCardsChemistryBase> ViewSsmtCrystalStockCardsChemistryBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockCardsHematologyBase> ViewSsmtCrystalStockCardsHematologyBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockoutBase> ViewSsmtCrystalStockoutBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockoutCd4testBase> ViewSsmtCrystalStockoutCd4testBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockoutChemistryBase> ViewSsmtCrystalStockoutChemistryBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalStockoutHematologyBase> ViewSsmtCrystalStockoutHematologyBase { get; set; }
        public virtual DbSet<ViewSsmtCrystalVisitsConducted> ViewSsmtCrystalVisitsConducted { get; set; }
        public virtual DbSet<ViewSsmtDbqAreaVisited> ViewSsmtDbqAreaVisited { get; set; }
        public virtual DbSet<ViewSsmtDbqComment> ViewSsmtDbqComment { get; set; }
        public virtual DbSet<ViewSsmtDbqFacility> ViewSsmtDbqFacility { get; set; }
        public virtual DbSet<ViewSsmtDbqIndicator> ViewSsmtDbqIndicator { get; set; }
        public virtual DbSet<ViewSsmtDbqJointVisit> ViewSsmtDbqJointVisit { get; set; }
        public virtual DbSet<ViewSsmtDbqLmis> ViewSsmtDbqLmis { get; set; }
        public virtual DbSet<ViewSsmtDbqLmisLab> ViewSsmtDbqLmisLab { get; set; }
        public virtual DbSet<ViewSsmtDbqPatients> ViewSsmtDbqPatients { get; set; }
        public virtual DbSet<ViewSsmtDbqPersonnel> ViewSsmtDbqPersonnel { get; set; }
        public virtual DbSet<ViewSsmtDbqRptIndicator> ViewSsmtDbqRptIndicator { get; set; }
        public virtual DbSet<ViewSsmtDbqSmp> ViewSsmtDbqSmp { get; set; }
        public virtual DbSet<ViewSsmtDbqSmpLab> ViewSsmtDbqSmpLab { get; set; }
        public virtual DbSet<ViewSsmtDbqSmt> ViewSsmtDbqSmt { get; set; }
        public virtual DbSet<ViewSsmtDbqSmtLab> ViewSsmtDbqSmtLab { get; set; }
        public virtual DbSet<ViewSsmtDbqSubmittedDocs> ViewSsmtDbqSubmittedDocs { get; set; }
        public virtual DbSet<ViewSsmtDbqVisitPurpose> ViewSsmtDbqVisitPurpose { get; set; }
        public virtual DbSet<ViewSsmtDenominatorYearMonth> ViewSsmtDenominatorYearMonth { get; set; }
        public virtual DbSet<ViewSsmtDispAidTools> ViewSsmtDispAidTools { get; set; }
        public virtual DbSet<ViewSsmtDispLab> ViewSsmtDispLab { get; set; }
        public virtual DbSet<ViewSsmtExpiryTracking> ViewSsmtExpiryTracking { get; set; }
        public virtual DbSet<ViewSsmtFacilityExport> ViewSsmtFacilityExport { get; set; }
        public virtual DbSet<ViewSsmtFacilityMostRecentVisitYearMonth> ViewSsmtFacilityMostRecentVisitYearMonth { get; set; }
        public virtual DbSet<ViewSsmtJointVisit> ViewSsmtJointVisit { get; set; }
        public virtual DbSet<ViewSsmtLmisAdequateStock1> ViewSsmtLmisAdequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisAdequateStock2> ViewSsmtLmisAdequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisCd4TestAdequateStock1> ViewSsmtLmisCd4TestAdequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisCd4TestAdequateStock2> ViewSsmtLmisCd4TestAdequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisCd4TestInadequateStock1> ViewSsmtLmisCd4TestInadequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisCd4TestInadequateStock2> ViewSsmtLmisCd4TestInadequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisChemistryAdequateStock1> ViewSsmtLmisChemistryAdequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisChemistryAdequateStock2> ViewSsmtLmisChemistryAdequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisChemistryInadequateStock1> ViewSsmtLmisChemistryInadequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisChemistryInadequateStock2> ViewSsmtLmisChemistryInadequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisHematologyAdequateStock1> ViewSsmtLmisHematologyAdequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisHematologyAdequateStock2> ViewSsmtLmisHematologyAdequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisHematologyInadequateStock1> ViewSsmtLmisHematologyInadequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisHematologyInadequateStock2> ViewSsmtLmisHematologyInadequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisInadequateStock1> ViewSsmtLmisInadequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisInadequateStock2> ViewSsmtLmisInadequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisTkAdequateStock1> ViewSsmtLmisTkAdequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisTkAdequateStock2> ViewSsmtLmisTkAdequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtLmisTkInadequateStock1> ViewSsmtLmisTkInadequateStock1 { get; set; }
        public virtual DbSet<ViewSsmtLmisTkInadequateStock2> ViewSsmtLmisTkInadequateStock2 { get; set; }
        public virtual DbSet<ViewSsmtMascisExport> ViewSsmtMascisExport { get; set; }
        public virtual DbSet<ViewSsmtOrderingReporting> ViewSsmtOrderingReporting { get; set; }
        public virtual DbSet<ViewSsmtProductOrganisation> ViewSsmtProductOrganisation { get; set; }
        public virtual DbSet<ViewSsmtRptIndicator1> ViewSsmtRptIndicator1 { get; set; }
        public virtual DbSet<ViewSsmtRptIndicator2> ViewSsmtRptIndicator2 { get; set; }
        public virtual DbSet<ViewSsmtStScoresA> ViewSsmtStScoresA { get; set; }
        public virtual DbSet<ViewSsmtStScoresB> ViewSsmtStScoresB { get; set; }
        public virtual DbSet<ViewSsmtStSubmittedDocsA> ViewSsmtStSubmittedDocsA { get; set; }
        public virtual DbSet<ViewSsmtStSubmittedDocsB> ViewSsmtStSubmittedDocsB { get; set; }
        public virtual DbSet<ViewSsmtStVisitsInMonth> ViewSsmtStVisitsInMonth { get; set; }
        public virtual DbSet<ViewSsmtSubmittedDocs> ViewSsmtSubmittedDocs { get; set; }
        public virtual DbSet<ViewSsmtVerificationPatientData> ViewSsmtVerificationPatientData { get; set; }
        public virtual DbSet<ViewSsmtVisitPurpose> ViewSsmtVisitPurpose { get; set; }
        public virtual DbSet<ViewUserManagement> ViewUserManagement { get; set; }
        public virtual DbSet<ViewUsers> ViewUsers { get; set; }
        public virtual DbSet<ViewUsersRoles> ViewUsersRoles { get; set; }
        public virtual DbSet<ViewVehiclePackingListAllocation> ViewVehiclePackingListAllocation { get; set; }
        public virtual DbSet<ViewWebTemplateArv> ViewWebTemplateArv { get; set; }
        public virtual DbSet<ViewWebTemplateArvAmc> ViewWebTemplateArvAmc { get; set; }
        public virtual DbSet<ViewWebTemplateArvEmergency> ViewWebTemplateArvEmergency { get; set; }
        public virtual DbSet<ViewWebTemplateArvExtraRegimen> ViewWebTemplateArvExtraRegimen { get; set; }
        public virtual DbSet<ViewWebTemplateArvFluconazole> ViewWebTemplateArvFluconazole { get; set; }
        public virtual DbSet<ViewWebTemplateArvPatients> ViewWebTemplateArvPatients { get; set; }
        public virtual DbSet<ViewWebTemplateArvPatientsPaediatric> ViewWebTemplateArvPatientsPaediatric { get; set; }
        public virtual DbSet<ViewWebTemplateArvPcReport> ViewWebTemplateArvPcReport { get; set; }
        public virtual DbSet<ViewWebTemplateArvPhysicalCount> ViewWebTemplateArvPhysicalCount { get; set; }
        public virtual DbSet<ViewWebTemplateArvPhysicalCountEdit> ViewWebTemplateArvPhysicalCountEdit { get; set; }
        public virtual DbSet<ViewWebTemplateArvPhysicalCountEditNew> ViewWebTemplateArvPhysicalCountEditNew { get; set; }
        public virtual DbSet<ViewWebTemplateArvReportExtraRegimen> ViewWebTemplateArvReportExtraRegimen { get; set; }
        public virtual DbSet<ViewWebTemplateArvReportHeader> ViewWebTemplateArvReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateFacilityRfso> ViewWebTemplateFacilityRfso { get; set; }
        public virtual DbSet<ViewWebTemplateFacilityRfso2> ViewWebTemplateFacilityRfso2 { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKits> ViewWebTemplateHivTestKits { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsAmc> ViewWebTemplateHivTestKitsAmc { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsEmergency> ViewWebTemplateHivTestKitsEmergency { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsPcReport> ViewWebTemplateHivTestKitsPcReport { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsPhysicalCount> ViewWebTemplateHivTestKitsPhysicalCount { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsPhysicalCountEdit> ViewWebTemplateHivTestKitsPhysicalCountEdit { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsReportHeader> ViewWebTemplateHivTestKitsReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateHivTestKitsSummary> ViewWebTemplateHivTestKitsSummary { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratory> ViewWebTemplateLaboratory { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryAmc> ViewWebTemplateLaboratoryAmc { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryEmergency> ViewWebTemplateLaboratoryEmergency { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryNew> ViewWebTemplateLaboratoryNew { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryPcReport> ViewWebTemplateLaboratoryPcReport { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryPhysicalCount> ViewWebTemplateLaboratoryPhysicalCount { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryPhysicalCountEdit> ViewWebTemplateLaboratoryPhysicalCountEdit { get; set; }
        public virtual DbSet<ViewWebTemplateLaboratoryReportHeader> ViewWebTemplateLaboratoryReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateOiSti> ViewWebTemplateOiSti { get; set; }
        public virtual DbSet<ViewWebTemplateOiStiEmergency> ViewWebTemplateOiStiEmergency { get; set; }
        public virtual DbSet<ViewWebTemplateOiStiPhysicalCount> ViewWebTemplateOiStiPhysicalCount { get; set; }
        public virtual DbSet<ViewWebTemplateOiStiPhysicalCountEdit> ViewWebTemplateOiStiPhysicalCountEdit { get; set; }
        public virtual DbSet<ViewWebTemplateOiStiWeb> ViewWebTemplateOiStiWeb { get; set; }
        public virtual DbSet<ViewWebTemplateOisPcReport> ViewWebTemplateOisPcReport { get; set; }
        public virtual DbSet<ViewWebTemplateOisReportHeader> ViewWebTemplateOisReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateRecipientEmail> ViewWebTemplateRecipientEmail { get; set; }
        public virtual DbSet<ViewWebTemplateRoleFacility> ViewWebTemplateRoleFacility { get; set; }
        public virtual DbSet<ViewWebTemplateRutf> ViewWebTemplateRutf { get; set; }
        public virtual DbSet<ViewWebTemplateRutfReportHeader> ViewWebTemplateRutfReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateRutfSummary> ViewWebTemplateRutfSummary { get; set; }
        public virtual DbSet<ViewWebTemplateSmcPcReport> ViewWebTemplateSmcPcReport { get; set; }
        public virtual DbSet<ViewWebTemplateSmcReportHeader> ViewWebTemplateSmcReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlm> ViewWebTemplateSmcSlm { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlmEmergency> ViewWebTemplateSmcSlmEmergency { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlmPhysicalCount> ViewWebTemplateSmcSlmPhysicalCount { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlmPhysicalCountEdit> ViewWebTemplateSmcSlmPhysicalCountEdit { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlmSummary> ViewWebTemplateSmcSlmSummary { get; set; }
        public virtual DbSet<ViewWebTemplateSmcSlmWeb> ViewWebTemplateSmcSlmWeb { get; set; }
        public virtual DbSet<ViewWebTemplateTb> ViewWebTemplateTb { get; set; }
        public virtual DbSet<ViewWebTemplateTbReportHeader> ViewWebTemplateTbReportHeader { get; set; }
        public virtual DbSet<ViewWebTemplateTbSummary> ViewWebTemplateTbSummary { get; set; }
        public virtual DbSet<ViewWebTemplateViralLoadReagents> ViewWebTemplateViralLoadReagents { get; set; }
        public virtual DbSet<ViewWebTemplateViralLoadReagentsSummary> ViewWebTemplateViralLoadReagentsSummary { get; set; }
        public virtual DbSet<ViewWebTemplateViralLoadReportHeader> ViewWebTemplateViralLoadReportHeader { get; set; }
        public virtual DbSet<ViewXPmpDistDeliveryCycleTimeA> ViewXPmpDistDeliveryCycleTimeA { get; set; }
        public virtual DbSet<ViewXPmpDistDeliveryCycleTimeB> ViewXPmpDistDeliveryCycleTimeB { get; set; }
        public virtual DbSet<ViewXPmpDistScheduleA> ViewXPmpDistScheduleA { get; set; }
        public virtual DbSet<ViewXPmpDistScheduleB> ViewXPmpDistScheduleB { get; set; }
        public virtual DbSet<ViewXPmpDistScheduleDen> ViewXPmpDistScheduleDen { get; set; }
        public virtual DbSet<ViewXPmpDistScheduleDen2> ViewXPmpDistScheduleDen2 { get; set; }
        public virtual DbSet<ViewXPmpProcActualVsInternationalPrice> ViewXPmpProcActualVsInternationalPrice { get; set; }
        public virtual DbSet<ViewXPmpProcBranded> ViewXPmpProcBranded { get; set; }
        public virtual DbSet<ViewXPmpProcCompletedVsPlannedA> ViewXPmpProcCompletedVsPlannedA { get; set; }
        public virtual DbSet<ViewXPmpProcCompletedVsPlannedB> ViewXPmpProcCompletedVsPlannedB { get; set; }
        public virtual DbSet<ViewXPmpProcCompletedVsPlannedC> ViewXPmpProcCompletedVsPlannedC { get; set; }
        public virtual DbSet<ViewXPmpProcCorrectlyFilledPos> ViewXPmpProcCorrectlyFilledPos { get; set; }
        public virtual DbSet<ViewXPmpProcCorrectlyFilledPosA> ViewXPmpProcCorrectlyFilledPosA { get; set; }
        public virtual DbSet<ViewXPmpProcCorrectlyFilledPosC> ViewXPmpProcCorrectlyFilledPosC { get; set; }
        public virtual DbSet<ViewXPmpProcDen> ViewXPmpProcDen { get; set; }
        public virtual DbSet<ViewXPmpProcDenBase> ViewXPmpProcDenBase { get; set; }
        public virtual DbSet<ViewXPmpProcEmergency> ViewXPmpProcEmergency { get; set; }
        public virtual DbSet<ViewXPmpProcGeneric> ViewXPmpProcGeneric { get; set; }
        public virtual DbSet<ViewXPmpProcMatchingShipmetPlanBudgetA> ViewXPmpProcMatchingShipmetPlanBudgetA { get; set; }
        public virtual DbSet<ViewXPmpProcMatchingShipmetPlanBudgetB> ViewXPmpProcMatchingShipmetPlanBudgetB { get; set; }
        public virtual DbSet<ViewXPmpProcMatchingShipmetPlanBudgetC> ViewXPmpProcMatchingShipmetPlanBudgetC { get; set; }
        public virtual DbSet<ViewXPmpProcNationalProcurementPlan> ViewXPmpProcNationalProcurementPlan { get; set; }
        public virtual DbSet<ViewXPmpProcNtgApproved> ViewXPmpProcNtgApproved { get; set; }
        public virtual DbSet<ViewXPmpProcNumBase> ViewXPmpProcNumBase { get; set; }
        public virtual DbSet<ViewXPmpProcOntimePerformanceA> ViewXPmpProcOntimePerformanceA { get; set; }
        public virtual DbSet<ViewXPmpProcOntimePerformanceB> ViewXPmpProcOntimePerformanceB { get; set; }
        public virtual DbSet<ViewXPmpProcWhoApproved> ViewXPmpProcWhoApproved { get; set; }
        public virtual DbSet<ViewXPmpSsmtVisits> ViewXPmpSsmtVisits { get; set; }
        public virtual DbSet<ViewXPmpSsmtVisitsB> ViewXPmpSsmtVisitsB { get; set; }
        public virtual DbSet<ViewXaAmc> ViewXaAmc { get; set; }
        public virtual DbSet<ViewXaOrderingCycle> ViewXaOrderingCycle { get; set; }
        public virtual DbSet<ViewXaProduct> ViewXaProduct { get; set; }
        public virtual DbSet<ViewXaRegimen> ViewXaRegimen { get; set; }
        public virtual DbSet<ViewYearArv> ViewYearArv { get; set; }
        public virtual DbSet<ViewYearLab> ViewYearLab { get; set; }
        public virtual DbSet<ViewYearSmc> ViewYearSmc { get; set; }
        public virtual DbSet<ViewYearTk> ViewYearTk { get; set; }
        public virtual DbSet<VwAspnetApplications> VwAspnetApplications { get; set; }
        public virtual DbSet<VwAspnetMembershipUsers> VwAspnetMembershipUsers { get; set; }
        public virtual DbSet<VwAspnetProfiles> VwAspnetProfiles { get; set; }
        public virtual DbSet<VwAspnetRoles> VwAspnetRoles { get; set; }
        public virtual DbSet<VwAspnetUsers> VwAspnetUsers { get; set; }
        public virtual DbSet<VwAspnetUsersInRoles> VwAspnetUsersInRoles { get; set; }
        public virtual DbSet<VwAspnetWebPartStatePaths> VwAspnetWebPartStatePaths { get; set; }
        public virtual DbSet<VwAspnetWebPartStateShared> VwAspnetWebPartStateShared { get; set; }
        public virtual DbSet<VwAspnetWebPartStateUser> VwAspnetWebPartStateUser { get; set; }
        public virtual DbSet<VwFoInvestigation> VwFoInvestigation { get; set; }
        public virtual DbSet<VwFoInvestigationEmpty> VwFoInvestigationEmpty { get; set; }
        public virtual DbSet<VwFoInvestigationQi> VwFoInvestigationQi { get; set; }
        public virtual DbSet<VwFoInvestigationQiEmpty> VwFoInvestigationQiEmpty { get; set; }
        public virtual DbSet<VwFoInvestigationQiTemplate> VwFoInvestigationQiTemplate { get; set; }
        public virtual DbSet<VwFoInvestigationTemplate> VwFoInvestigationTemplate { get; set; }
        public virtual DbSet<VwHsipLmisDep13aMoS> VwHsipLmisDep13aMoS { get; set; }
        public virtual DbSet<VwHsipLmisDep13bCon> VwHsipLmisDep13bCon { get; set; }
        public virtual DbSet<VwHsipPromoChssEInventorysys> VwHsipPromoChssEInventorysys { get; set; }
        public virtual DbSet<WebTemplateArv> WebTemplateArv { get; set; }
        public virtual DbSet<WebTemplateArvFluconazole> WebTemplateArvFluconazole { get; set; }
        public virtual DbSet<WebTemplateArvFluconazoleNew> WebTemplateArvFluconazoleNew { get; set; }
        public virtual DbSet<WebTemplateArvNew> WebTemplateArvNew { get; set; }
        public virtual DbSet<WebTemplateArvPatients> WebTemplateArvPatients { get; set; }
        public virtual DbSet<WebTemplateArvPatientsNew> WebTemplateArvPatientsNew { get; set; }
        public virtual DbSet<WebTemplateArvPhysicalCount> WebTemplateArvPhysicalCount { get; set; }
        public virtual DbSet<WebTemplateHivTestKits> WebTemplateHivTestKits { get; set; }
        public virtual DbSet<WebTemplateHivTestKitsNew> WebTemplateHivTestKitsNew { get; set; }
        public virtual DbSet<WebTemplateHivTestKitsPhysicalCount> WebTemplateHivTestKitsPhysicalCount { get; set; }
        public virtual DbSet<WebTemplateHivTestKitsSummary> WebTemplateHivTestKitsSummary { get; set; }
        public virtual DbSet<WebTemplateHivTestKitsSummaryNew> WebTemplateHivTestKitsSummaryNew { get; set; }
        public virtual DbSet<WebTemplateLaboratory> WebTemplateLaboratory { get; set; }
        public virtual DbSet<WebTemplateLaboratoryPhysicalCount> WebTemplateLaboratoryPhysicalCount { get; set; }
        public virtual DbSet<WebTemplateOiSti> WebTemplateOiSti { get; set; }
        public virtual DbSet<WebTemplateOiStiPhysicalCount> WebTemplateOiStiPhysicalCount { get; set; }
        public virtual DbSet<WebTemplateRecipientEmail> WebTemplateRecipientEmail { get; set; }
        public virtual DbSet<WebTemplateRutf> WebTemplateRutf { get; set; }
        public virtual DbSet<WebTemplateSmcSlm> WebTemplateSmcSlm { get; set; }
        public virtual DbSet<WebTemplateSmcSlmPhysicalCount> WebTemplateSmcSlmPhysicalCount { get; set; }
        public virtual DbSet<WebTemplateSummaryGuides> WebTemplateSummaryGuides { get; set; }
        public virtual DbSet<WebTemplateTb> WebTemplateTb { get; set; }
        public virtual DbSet<WebTemplateViralLoadReagents> WebTemplateViralLoadReagents { get; set; }
        public virtual DbSet<Zzzzzz> Zzzzzz { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=.;Database=MEDICALACCESS;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AArtProductClassification>(entity =>
            {
                entity.HasKey(e => e.ArtProductClassificationCode);

                entity.ToTable("A_ART_Product_Classification");

                entity.Property(e => e.ArtProductClassificationCode)
                    .HasColumnName("ART_product_classification_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtProductClassificationDesc)
                    .HasColumnName("ART_product_classification_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ACdcregion>(entity =>
            {
                entity.HasKey(e => e.CdcregionId);

                entity.ToTable("A_CDCRegion");

                entity.Property(e => e.CdcregionId)
                    .HasColumnName("CDCRegionId")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AClientType>(entity =>
            {
                entity.HasKey(e => e.ClientTypeCode);

                entity.ToTable("A_ClientType");

                entity.Property(e => e.ClientTypeCode)
                    .HasColumnName("client_type_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AColour>(entity =>
            {
                entity.HasKey(e => e.ColourCode);

                entity.ToTable("A_colour");

                entity.Property(e => e.ColourCode)
                    .HasColumnName("colour_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Colour)
                    .HasColumnName("colour")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ACopYear>(entity =>
            {
                entity.HasKey(e => e.CopYear);

                entity.ToTable("A_COP_Year");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(50);

                entity.Property(e => e.Year1).HasColumnName("Year_1");

                entity.Property(e => e.Year2).HasColumnName("Year_2");
            });

            modelBuilder.Entity<ACounty>(entity =>
            {
                entity.HasKey(e => e.CountyId);

                entity.ToTable("A_County");

                entity.Property(e => e.CountyId)
                    .HasColumnName("County_Id")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CountyMinistryCode)
                    .HasColumnName("County_Ministry_Code")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.CountyName)
                    .HasColumnName("County_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.DistrictId).HasColumnName("District_Id");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ACounty)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_A_County_A_District");
            });

            modelBuilder.Entity<ADeliveryZone>(entity =>
            {
                entity.HasKey(e => e.ZoneCode);

                entity.ToTable("A_DeliveryZone");

                entity.Property(e => e.ZoneCode).ValueGeneratedNever();

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ADistrict>(entity =>
            {
                entity.HasKey(e => e.DistrictCode);

                entity.ToTable("A_District");

                entity.Property(e => e.DistrictCode)
                    .HasColumnName("District_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DistrictMinistryCode)
                    .HasColumnName("District_Ministry_Code")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.IsMunicipality).HasColumnName("Is_Municipality");

                entity.Property(e => e.IsUrban).HasColumnName("Is_Urban");

                entity.Property(e => e.IsoCode)
                    .HasColumnName("ISO_Code")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.RegionId)
                    .HasColumnName("Region_Id")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.HasOne(d => d.Cdcregion)
                    .WithMany(p => p.ADistrict)
                    .HasForeignKey(d => d.CdcregionId)
                    .HasConstraintName("FK_A_District_A_CDCRegion");

                entity.HasOne(d => d.ImplimentingPartnerCodeNavigation)
                    .WithMany(p => p.ADistrict)
                    .HasForeignKey(d => d.ImplimentingPartnerCode)
                    .HasConstraintName("FK_A_District_A_ImplimentingPartners");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.ADistrict)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_A_District_A_Region");
            });

            modelBuilder.Entity<ADriver>(entity =>
            {
                entity.HasKey(e => e.DriverPermitNumber)
                    .HasName("PK_A_Drivers");

                entity.ToTable("A_Driver");

                entity.Property(e => e.DriverPermitNumber)
                    .HasColumnName("Driver_PermitNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.DriverName)
                    .HasColumnName("Driver_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.DriverStatus).HasColumnName("Driver_Status");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.ADriverAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_Driver_User_Account");

                entity.HasOne(d => d.DriverStatusNavigation)
                    .WithMany(p => p.ADriver)
                    .HasForeignKey(d => d.DriverStatus)
                    .HasConstraintName("FK_A_Driver_A_Driver_Status");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.ADriverEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_A_Driver_User_Account1");
            });

            modelBuilder.Entity<ADriverStatus>(entity =>
            {
                entity.HasKey(e => e.DriverStatusCode);

                entity.ToTable("A_Driver_Status");

                entity.Property(e => e.DriverStatusCode)
                    .HasColumnName("Driver_StatusCode")
                    .ValueGeneratedNever();

                entity.Property(e => e.DriverStatusDesc)
                    .HasColumnName("Driver_StatusDesc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugBasicUnit>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("A_DrugBasicUnit");

                entity.Property(e => e.ItemCode).ValueGeneratedNever();

                entity.Property(e => e.ItemForm).HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugDosage>(entity =>
            {
                entity.HasKey(e => e.DosageCode);

                entity.ToTable("A_DrugDosage");

                entity.Property(e => e.DosageCode).ValueGeneratedNever();

                entity.Property(e => e.Dosage).HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugErrorFactor>(entity =>
            {
                entity.HasKey(e => e.ErrorCode);

                entity.ToTable("A_DrugErrorFactor");

                entity.Property(e => e.ErrorCode).ValueGeneratedNever();

                entity.Property(e => e.ErrorDesc).HasMaxLength(255);

                entity.Property(e => e.ErrorName).HasMaxLength(255);
            });

            modelBuilder.Entity<ADrugFluconazale>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode);

                entity.ToTable("A_DrugFluconazale");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("Indicator_Code")
                    .HasMaxLength(10);

                entity.Property(e => e.DatasourceCode).HasColumnName("Datasource_Code");

                entity.Property(e => e.IndicatorDefinition)
                    .HasColumnName("Indicator_Definition")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorName)
                    .HasColumnName("Indicator_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.ToolCode).HasColumnName("Tool_Code");
            });

            modelBuilder.Entity<ADrugFormulation>(entity =>
            {
                entity.HasKey(e => e.DrugCode);

                entity.ToTable("A_DrugFormulation");

                entity.Property(e => e.DrugCode).ValueGeneratedNever();

                entity.Property(e => e.DosageFormulatioCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DrugDesc).HasMaxLength(75);

                entity.Property(e => e.NnrtiRatio).HasColumnName("NNRTI_ratio");

                entity.Property(e => e.NrtiRatio).HasColumnName("NRTI_ratio");

                entity.Property(e => e.PiRatio).HasColumnName("PI_ratio");

                entity.Property(e => e.PillsPerDose).HasColumnName("Pills_per_Dose");

                entity.Property(e => e.RegimenCombination).HasMaxLength(50);

                entity.Property(e => e.VisibleCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.BasicUnitNavigation)
                    .WithMany(p => p.ADrugFormulation)
                    .HasForeignKey(d => d.BasicUnit)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_A_DrugFormulation_A_DrugBasicUnit");

                entity.HasOne(d => d.DrugFormulationCodeNavigation)
                    .WithMany(p => p.ADrugFormulation)
                    .HasForeignKey(d => d.DrugFormulationCode)
                    .HasConstraintName("FK_A_DrugFormulation_A_DrugFormulationCode");
            });

            modelBuilder.Entity<ADrugFormulationCode>(entity =>
            {
                entity.HasKey(e => e.DrugFormulationCode);

                entity.ToTable("A_DrugFormulationCode");

                entity.Property(e => e.DrugFormulationCode).ValueGeneratedNever();

                entity.Property(e => e.DrugFormulationDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugItem>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("A_DrugItem");

                entity.Property(e => e.ItemCode).ValueGeneratedNever();

                entity.Property(e => e.Abbrev).HasMaxLength(50);

                entity.Property(e => e.ExtraInfo)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ItemName).HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugRegimen>(entity =>
            {
                entity.HasKey(e => e.RegimenCode);

                entity.ToTable("A_DrugRegimen");

                entity.Property(e => e.RegimenCode).ValueGeneratedNever();

                entity.Property(e => e.DrugCombination).HasMaxLength(15);

                entity.Property(e => e.ExtraInfo).HasMaxLength(50);

                entity.Property(e => e.IsExtra).HasDefaultValueSql("((0))");

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.HasOne(d => d.RegimenCategoryCodeNavigation)
                    .WithMany(p => p.ADrugRegimen)
                    .HasForeignKey(d => d.RegimenCategoryCode)
                    .HasConstraintName("FK_A_DrugRegimen_A_DrugRegimenCategory");

                entity.HasOne(d => d.RegimenClassificationNavigation)
                    .WithMany(p => p.ADrugRegimen)
                    .HasForeignKey(d => d.RegimenClassification)
                    .HasConstraintName("FK_A_DrugRegimen_A_DrugRegimenClassification");
            });

            modelBuilder.Entity<ADrugRegimenCategory>(entity =>
            {
                entity.HasKey(e => e.RegimenCategoryCode);

                entity.ToTable("A_DrugRegimenCategory");

                entity.Property(e => e.RegimenCategoryCode).ValueGeneratedNever();

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugRegimenClassification>(entity =>
            {
                entity.HasKey(e => e.RegimenClassificationCode);

                entity.ToTable("A_DrugRegimenClassification");

                entity.Property(e => e.RegimenClassificationCode)
                    .HasColumnName("regimen_classification_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ADrugsSupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierId);

                entity.ToTable("A_DrugsSupplier");

                entity.Property(e => e.SupplierId)
                    .HasColumnName("SupplierID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Addres).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(50);

                entity.Property(e => e.Website).HasMaxLength(50);
            });

            modelBuilder.Entity<AEventCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("A_EventCategory");

                entity.Property(e => e.CategoryId).ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<AFacilities>(entity =>
            {
                entity.HasKey(e => e.FacilityCode);

                entity.ToTable("A_Facilities");

                entity.Property(e => e.FacilityCode).ValueGeneratedNever();

                entity.Property(e => e.ActiveArt).HasColumnName("Active_ART");

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.Dsdm)
                    .HasColumnName("DSDM")
                    .HasMaxLength(250);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NearestPublicHfDistance).HasColumnName("Nearest_Public_HF_Distance");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.VillageId)
                    .HasColumnName("Village_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.HasOne(d => d.Cdcregion)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.CdcregionId)
                    .HasConstraintName("FK_A_Facilities_A_CDCRegion");

                entity.HasOne(d => d.ClientTypeCodeNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.ClientTypeCode)
                    .HasConstraintName("FK_A_Facilities_A_ClientType");

                entity.HasOne(d => d.ComprehensiveImplimentingPartnerCodeNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.ComprehensiveImplimentingPartnerCode)
                    .HasConstraintName("FK_A_Facilities_A_ImplimentingPartners");

                entity.HasOne(d => d.DeliveryZoneCodeNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.DeliveryZoneCode)
                    .HasConstraintName("FK_A_Facilities_A_DeliveryZone");

                entity.HasOne(d => d.DistrrictCodeNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.DistrrictCode)
                    .HasConstraintName("FK_A_Facilities_A_District");

                entity.HasOne(d => d.FacilityType)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.FacilityTypeId)
                    .HasConstraintName("FK_A_Facilities_A_FacilityType");

                entity.HasOne(d => d.LevelOfCareNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.LevelOfCare)
                    .HasConstraintName("FK_A_Facilities_A_Facility_Level_Of_Care");

                entity.HasOne(d => d.Ownership)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.OwnershipId)
                    .HasConstraintName("FK_A_Facilities_A_Ownership");

                entity.HasOne(d => d.PatientLoadCodeNavigation)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.PatientLoadCode)
                    .HasConstraintName("FK_A_Facilities_A_PatientLoad");

                entity.HasOne(d => d.Village)
                    .WithMany(p => p.AFacilities)
                    .HasForeignKey(d => d.VillageId)
                    .HasConstraintName("FK_A_Facilities_A_Village");
            });

            modelBuilder.Entity<AFacilityLevelOfCare>(entity =>
            {
                entity.HasKey(e => e.LevelOfCareCode);

                entity.ToTable("A_Facility_Level_Of_Care");

                entity.Property(e => e.LevelOfCareCode)
                    .HasColumnName("level_of_care_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<AFacilityType>(entity =>
            {
                entity.HasKey(e => e.FacilityTypeId);

                entity.ToTable("A_FacilityType");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityType).HasMaxLength(50);
            });

            modelBuilder.Entity<AGender>(entity =>
            {
                entity.HasKey(e => e.GenderCode);

                entity.ToTable("A_Gender");

                entity.Property(e => e.GenderCode)
                    .HasColumnName("gender_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<AHivRapidTestKit>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("A_hiv_rapid_test_kit");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("item_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("basic_unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemDescription)
                    .HasColumnName("item_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<AImplimentingPartners>(entity =>
            {
                entity.HasKey(e => e.ImplimentingPartnerCode);

                entity.ToTable("A_ImplimentingPartners");

                entity.Property(e => e.ImplimentingPartnerCode).ValueGeneratedNever();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);
            });

            modelBuilder.Entity<AInsuranceCompany>(entity =>
            {
                entity.HasKey(e => e.InsuranceCompanyId);

                entity.ToTable("A_InsuranceCompany");

                entity.Property(e => e.InsuranceCompanyId)
                    .HasColumnName("insurance_company_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.InsuranceCompanyDesc)
                    .HasColumnName("insurance_company_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<AItems>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("A_Items");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("item_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemDescription)
                    .HasColumnName("item_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ALabCategory1>(entity =>
            {
                entity.HasKey(e => e.LabCat1Code);

                entity.ToTable("A_Lab_Category1");

                entity.Property(e => e.LabCat1Code)
                    .HasColumnName("lab_cat_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ALabCategory2>(entity =>
            {
                entity.HasKey(e => e.LabCat2Code);

                entity.ToTable("A_Lab_Category2");

                entity.Property(e => e.LabCat2Code)
                    .HasColumnName("lab_cat_2_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LabCat1Code).HasColumnName("lab_cat_1_code");

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.LabCat1CodeNavigation)
                    .WithMany(p => p.ALabCategory2)
                    .HasForeignKey(d => d.LabCat1Code)
                    .HasConstraintName("FK_A_Lab_Category2_A_Lab_Category1");
            });

            modelBuilder.Entity<ALabCategory3>(entity =>
            {
                entity.HasKey(e => e.LabCat3Code);

                entity.ToTable("A_Lab_Category3");

                entity.Property(e => e.LabCat3Code)
                    .HasColumnName("lab_cat_3_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LabCat2Code).HasColumnName("lab_cat_2_code");

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.LabCat2CodeNavigation)
                    .WithMany(p => p.ALabCategory3)
                    .HasForeignKey(d => d.LabCat2Code)
                    .HasConstraintName("FK_A_Lab_Category3_A_Lab_Category2");
            });

            modelBuilder.Entity<ALabGroup1>(entity =>
            {
                entity.HasKey(e => e.GroupCode);

                entity.ToTable("A_Lab_Group_1");

                entity.Property(e => e.GroupCode)
                    .HasColumnName("group_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupDescription)
                    .HasColumnName("group_description")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ALabGroupChild1>(entity =>
            {
                entity.HasKey(e => new { e.GroupCode, e.GroupChild1 });

                entity.ToTable("A_Lab_Group_Child_1");

                entity.Property(e => e.GroupCode).HasColumnName("group_code");

                entity.Property(e => e.GroupChild1).HasColumnName("group_child_1");

                entity.Property(e => e.Child1Description)
                    .HasColumnName("child_1_description")
                    .HasMaxLength(50);

                entity.HasOne(d => d.GroupCodeNavigation)
                    .WithMany(p => p.ALabGroupChild1)
                    .HasForeignKey(d => d.GroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_Lab_Group_Child_1_A_Lab_Group_1");
            });

            modelBuilder.Entity<ALabGroupChild2>(entity =>
            {
                entity.HasKey(e => new { e.GroupCode, e.GroupChild1, e.GroupChild2 });

                entity.ToTable("A_Lab_Group_Child_2");

                entity.Property(e => e.GroupCode).HasColumnName("group_code");

                entity.Property(e => e.GroupChild1).HasColumnName("group_child_1");

                entity.Property(e => e.GroupChild2).HasColumnName("group_child_2");

                entity.Property(e => e.Child2Description)
                    .HasColumnName("child_2_description")
                    .HasMaxLength(50);

                entity.HasOne(d => d.GroupC)
                    .WithMany(p => p.ALabGroupChild2)
                    .HasForeignKey(d => new { d.GroupCode, d.GroupChild1 })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_Lab_Group_Child_2_A_Lab_Group_Child_1");
            });

            modelBuilder.Entity<ALabItem>(entity =>
            {
                entity.HasKey(e => e.ItemCode);

                entity.ToTable("A_Lab_Item");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("item_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupChild1).HasColumnName("group_child_1");

                entity.Property(e => e.GroupChild2).HasColumnName("group_child_2");

                entity.Property(e => e.GroupCode).HasColumnName("group_code");

                entity.Property(e => e.ItemDescsription)
                    .HasColumnName("item_descsription")
                    .HasMaxLength(150);

                entity.Property(e => e.ItemOrder).HasColumnName("item_order");

                entity.Property(e => e.UnitPrice).HasColumnName("unit_price");

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);

                entity.HasOne(d => d.GroupCodeNavigation)
                    .WithMany(p => p.ALabItem)
                    .HasForeignKey(d => d.GroupCode)
                    .HasConstraintName("FK_A_Lab_Item_A_Lab_Group_1");

                entity.HasOne(d => d.GroupC)
                    .WithMany(p => p.ALabItem)
                    .HasForeignKey(d => new { d.GroupCode, d.GroupChild1 })
                    .HasConstraintName("FK_A_Lab_Item_A_Lab_Group_Child_1");

                entity.HasOne(d => d.GroupCNavigation)
                    .WithMany(p => p.ALabItem)
                    .HasForeignKey(d => new { d.GroupCode, d.GroupChild1, d.GroupChild2 })
                    .HasConstraintName("FK_A_Lab_Item_A_Lab_Group_Child_2");
            });

            modelBuilder.Entity<AManufacturers>(entity =>
            {
                entity.HasKey(e => e.ManufacturerId);

                entity.ToTable("A_Manufacturers");

                entity.Property(e => e.ManufacturerId).HasColumnName("Manufacturer_ID");

                entity.Property(e => e.Manufacturer).HasMaxLength(80);
            });

            modelBuilder.Entity<AMonth>(entity =>
            {
                entity.HasKey(e => e.MonthId);

                entity.ToTable("A_Month");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AMonthQuarter>(entity =>
            {
                entity.HasKey(e => new { e.QuarterId, e.MonthId });

                entity.ToTable("A_Month_Quarter");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.MonthId).HasColumnName("month_id");
            });

            modelBuilder.Entity<AMonthSector>(entity =>
            {
                entity.HasKey(e => new { e.Sector, e.Month });

                entity.ToTable("A_Month_Sector");

                entity.Property(e => e.Sector).HasColumnName("sector");

                entity.Property(e => e.Month).HasColumnName("month");
            });

            modelBuilder.Entity<ANdaRegistration>(entity =>
            {
                entity.HasKey(e => e.RegistrationCode);

                entity.ToTable("A_NDA_Registration");

                entity.Property(e => e.RegistrationCode)
                    .HasColumnName("registration_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.RegistrationDesc)
                    .HasColumnName("registration_desc")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<AOrderStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("A_OrderStatus");

                entity.Property(e => e.StatusId).ValueGeneratedNever();

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<AOrderType>(entity =>
            {
                entity.HasKey(e => e.OrderTypeId);

                entity.ToTable("A_OrderType");

                entity.Property(e => e.OrderTypeId).ValueGeneratedNever();

                entity.Property(e => e.OrderType).HasMaxLength(50);
            });

            modelBuilder.Entity<AOwnership>(entity =>
            {
                entity.HasKey(e => e.OwnershipId);

                entity.ToTable("A_Ownership");

                entity.Property(e => e.OwnershipId).ValueGeneratedNever();

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<AParish>(entity =>
            {
                entity.HasKey(e => e.ParishId);

                entity.ToTable("A_Parish");

                entity.Property(e => e.ParishId)
                    .HasColumnName("Parish_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ParishMinistryCode)
                    .HasColumnName("Parish_Ministry_Code")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ParishName)
                    .HasColumnName("Parish_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SubcountyId)
                    .HasColumnName("Subcounty_Id")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.HasOne(d => d.Subcounty)
                    .WithMany(p => p.AParish)
                    .HasForeignKey(d => d.SubcountyId)
                    .HasConstraintName("FK_A_Parish_A_Subcounty");
            });

            modelBuilder.Entity<APatientLoad>(entity =>
            {
                entity.HasKey(e => e.PatientLoadCode);

                entity.ToTable("A_PatientLoad");

                entity.Property(e => e.PatientLoadCode).ValueGeneratedNever();

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AProduct>(entity =>
            {
                entity.HasKey(e => e.ProductCode);

                entity.ToTable("A_Product");

                entity.Property(e => e.ProductCode)
                    .HasColumnName("product_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NmsCodes)
                    .HasColumnName("NMS_Codes")
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.HasOne(d => d.BasicUnitNavigation)
                    .WithMany(p => p.AProduct)
                    .HasForeignKey(d => d.BasicUnit)
                    .HasConstraintName("FK_A_Product_A_DrugBasicUnit");

                entity.HasOne(d => d.ProductCategoryNavigation)
                    .WithMany(p => p.AProduct)
                    .HasForeignKey(d => d.ProductCategory)
                    .HasConstraintName("FK_A_Product_A_product_category");

                entity.HasOne(d => d.ProductClassificationNavigation)
                    .WithMany(p => p.AProduct)
                    .HasForeignKey(d => d.ProductClassification)
                    .HasConstraintName("FK_A_Product_A_Product_Classification");

                entity.HasOne(d => d.ProductStatus)
                    .WithMany(p => p.AProduct)
                    .HasForeignKey(d => d.ProductStatusId)
                    .HasConstraintName("FK_A_Product_A_ProductStatus");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.AProduct)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("FK_A_Product_A_ProductType");
            });

            modelBuilder.Entity<AProduct1>(entity =>
            {
                entity.HasKey(e => e.ProductCode);

                entity.ToTable("A_Product1");

                entity.Property(e => e.ProductCode)
                    .HasColumnName("product_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NmsCodes)
                    .HasColumnName("NMS_Codes")
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AProductCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryCode);

                entity.ToTable("A_product_category");

                entity.Property(e => e.CategoryCode)
                    .HasColumnName("category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<AProductClassification>(entity =>
            {
                entity.ToTable("A_Product_Classification");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ProductType).HasMaxLength(50);
            });

            modelBuilder.Entity<AProductLabCategory>(entity =>
            {
                entity.HasKey(e => e.ProductCategoryCode);

                entity.ToTable("A_Product_Lab_Category");

                entity.Property(e => e.ProductCategoryCode)
                    .HasColumnName("product_category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.HasOne(d => d.Category2CodeNavigation)
                    .WithMany(p => p.AProductLabCategory)
                    .HasForeignKey(d => d.Category2Code)
                    .HasConstraintName("FK_A_Product_Lab_Category_A_Lab_Category2");

                entity.HasOne(d => d.Category3CodeNavigation)
                    .WithMany(p => p.AProductLabCategory)
                    .HasForeignKey(d => d.Category3Code)
                    .HasConstraintName("FK_A_Product_Lab_Category_A_Lab_Category3");
            });

            modelBuilder.Entity<AProductLabCategory1>(entity =>
            {
                entity.HasKey(e => e.ProductCategoryCode);

                entity.ToTable("A_Product_Lab_Category1");

                entity.Property(e => e.ProductCategoryCode)
                    .HasColumnName("product_category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.HasOne(d => d.Category3CodeNavigation)
                    .WithMany(p => p.AProductLabCategory1)
                    .HasForeignKey(d => d.Category3Code)
                    .HasConstraintName("FK_A_Product_Lab_Category1_A_Lab_Category3");
            });

            modelBuilder.Entity<AProductStatus>(entity =>
            {
                entity.HasKey(e => e.ProductStatusId);

                entity.ToTable("A_ProductStatus");

                entity.Property(e => e.ProductStatusId).ValueGeneratedNever();

                entity.Property(e => e.ProductStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<AProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId);

                entity.ToTable("A_ProductType");

                entity.Property(e => e.ProductTypeId).ValueGeneratedNever();

                entity.Property(e => e.ProductType).HasMaxLength(50);
            });

            modelBuilder.Entity<ARegion>(entity =>
            {
                entity.HasKey(e => e.RegionId);

                entity.ToTable("A_Region");

                entity.Property(e => e.RegionId)
                    .HasColumnName("Region_Id")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.RegionDescription)
                    .HasColumnName("Region_Description")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ASectorChange>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfChange, e.OldSector })
                    .HasName("PK_Sector_Change");

                entity.ToTable("A_Sector_Change");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfChange)
                    .HasColumnName("date_of_change")
                    .HasColumnType("datetime");

                entity.Property(e => e.OldSector).HasColumnName("Old_sector");

                entity.Property(e => e.NewSector).HasColumnName("New_sector");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ASectorChange)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sector_Change_A_Facilities");
            });

            modelBuilder.Entity<ASmcCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryCode);

                entity.ToTable("A_smc_category");

                entity.Property(e => e.CategoryCode)
                    .HasColumnName("category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryName)
                    .HasColumnName("Category_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ASmcItem>(entity =>
            {
                entity.HasKey(e => e.ItemCode)
                    .HasName("PK_A_smc_item_1");

                entity.ToTable("A_smc_item");

                entity.Property(e => e.ItemCode)
                    .HasColumnName("item_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.ItemName)
                    .HasColumnName("item_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50);

                entity.HasOne(d => d.CategoryCodeNavigation)
                    .WithMany(p => p.ASmcItem)
                    .HasForeignKey(d => d.CategoryCode)
                    .HasConstraintName("FK_A_smc_item_A_smc_category");
            });

            modelBuilder.Entity<ASubcounty>(entity =>
            {
                entity.HasKey(e => e.SubcountyId);

                entity.ToTable("A_Subcounty");

                entity.Property(e => e.SubcountyId)
                    .HasColumnName("Subcounty_Id")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.Property(e => e.CountyId)
                    .HasColumnName("County_Id")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.SubcountyMinistryCode)
                    .HasColumnName("Subcounty_Ministry_Code")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.SubcountyName)
                    .HasColumnName("Subcounty_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.County)
                    .WithMany(p => p.ASubcounty)
                    .HasForeignKey(d => d.CountyId)
                    .HasConstraintName("FK_A_Subcounty_A_County");
            });

            modelBuilder.Entity<ASupplier>(entity =>
            {
                entity.HasKey(e => e.SupplierCode);

                entity.ToTable("A_Supplier");

                entity.Property(e => e.SupplierCode)
                    .HasColumnName("supplier_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountryCode).HasColumnName("country_code");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SupplierCategory).HasColumnName("supplier_category");

                entity.Property(e => e.SupplierDesc)
                    .HasColumnName("supplier_desc")
                    .HasMaxLength(350);

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.ASupplier)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_A_Supplier_A_Supplier_Status");
            });

            modelBuilder.Entity<ASupplierCategory>(entity =>
            {
                entity.HasKey(e => e.SupplierCategoryCode);

                entity.ToTable("A_Supplier_Category");

                entity.Property(e => e.SupplierCategoryCode)
                    .HasColumnName("supplier_category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SupplierCategoryDesc)
                    .HasColumnName("supplier_category_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ASupplierStatus>(entity =>
            {
                entity.HasKey(e => e.StatusCode);

                entity.ToTable("A_Supplier_Status");

                entity.Property(e => e.StatusCode)
                    .HasColumnName("status_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ATreatmentFluconazole>(entity =>
            {
                entity.HasKey(e => e.ConditionCode);

                entity.ToTable("A_Treatment_Fluconazole");

                entity.Property(e => e.ConditionCode).ValueGeneratedNever();

                entity.Property(e => e.Condition).HasMaxLength(50);
            });

            modelBuilder.Entity<AUserType>(entity =>
            {
                entity.HasKey(e => e.UserTypeId);

                entity.ToTable("A_UserType");

                entity.Property(e => e.UserTypeId).ValueGeneratedNever();

                entity.Property(e => e.UserType).HasMaxLength(50);
            });

            modelBuilder.Entity<AVehicle>(entity =>
            {
                entity.HasKey(e => e.VehicleNumber);

                entity.ToTable("A_Vehicle");

                entity.Property(e => e.VehicleNumber)
                    .HasColumnName("Vehicle_Number")
                    .HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.VehicleCapacityInTonnes).HasColumnName("Vehicle_CapacityInTonnes");

                entity.Property(e => e.VehicleStatus).HasColumnName("Vehicle_Status");

                entity.Property(e => e.VehicleType).HasColumnName("Vehicle_Type");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.AVehicleAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_Vehicle_User_Account");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.AVehicleEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_A_Vehicle_User_Account1");

                entity.HasOne(d => d.VehicleStatusNavigation)
                    .WithMany(p => p.AVehicle)
                    .HasForeignKey(d => d.VehicleStatus)
                    .HasConstraintName("FK_A_Vehicle_A_Vehicle_Status");

                entity.HasOne(d => d.VehicleTypeNavigation)
                    .WithMany(p => p.AVehicle)
                    .HasForeignKey(d => d.VehicleType)
                    .HasConstraintName("FK_A_Vehicle_A_VehicleType");
            });

            modelBuilder.Entity<AVehicleStatus>(entity =>
            {
                entity.HasKey(e => e.VehicleStatusCode);

                entity.ToTable("A_Vehicle_Status");

                entity.Property(e => e.VehicleStatusCode)
                    .HasColumnName("Vehicle_StatusCode")
                    .ValueGeneratedNever();

                entity.Property(e => e.VehicleStatusDesc)
                    .HasColumnName("Vehicle_StatusDesc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AVehicleType>(entity =>
            {
                entity.HasKey(e => e.AVehicleTypeCode);

                entity.ToTable("A_VehicleType");

                entity.Property(e => e.AVehicleTypeCode)
                    .HasColumnName("A_Vehicle_TypeCode")
                    .ValueGeneratedNever();

                entity.Property(e => e.AVehicleTypeDesc)
                    .HasColumnName("A_Vehicle_TypeDesc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AVenue>(entity =>
            {
                entity.ToTable("A_Venue");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.VenueName).HasMaxLength(255);
            });

            modelBuilder.Entity<AVenueList>(entity =>
            {
                entity.HasKey(e => new { e.VenueId, e.Id });

                entity.ToTable("A_Venue_List");

                entity.Property(e => e.VenueId).HasColumnName("VenueID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.VenueListName).HasMaxLength(550);

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.AVenueList)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_Venue_List_A_Venue");
            });

            modelBuilder.Entity<AVillage>(entity =>
            {
                entity.HasKey(e => e.VillageId);

                entity.ToTable("A_Village");

                entity.Property(e => e.VillageId)
                    .HasColumnName("Village_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ParishId)
                    .HasColumnName("Parish_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.VillageMinistryCode)
                    .HasColumnName("Village_Ministry_Code")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.VillageName)
                    .HasColumnName("Village_Name")
                    .HasMaxLength(50);

                entity.HasOne(d => d.Parish)
                    .WithMany(p => p.AVillage)
                    .HasForeignKey(d => d.ParishId)
                    .HasConstraintName("FK_A_Village_A_Parish");
            });

            modelBuilder.Entity<AWarehouse>(entity =>
            {
                entity.HasKey(e => e.WarehouseId);

                entity.ToTable("A_Warehouse");

                entity.Property(e => e.WarehouseId)
                    .HasColumnName("warehouse_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.WarehouseDesc)
                    .HasColumnName("warehouse_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AYear>(entity =>
            {
                entity.HasKey(e => new { e.YearId, e.Year });

                entity.ToTable("A_Year");

                entity.Property(e => e.YearId).HasColumnName("YearID");

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<AYesNo>(entity =>
            {
                entity.HasKey(e => e.YesNoId);

                entity.ToTable("A_yes_no");

                entity.Property(e => e.YesNoId)
                    .HasColumnName("yes_no_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.YesNoDesc)
                    .HasColumnName("yes_no_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Applications>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("PK__Applicat__C93A4C99BA721FCB");

                entity.Property(e => e.ApplicationId).ValueGeneratedNever();

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(235);

                entity.Property(e => e.Description).HasMaxLength(256);
            });

            modelBuilder.Entity<ApprovedFacilityOrders>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDateOrderForm, e.EndDateOrderForm })
                    .HasName("PK_ApprovedFacilityOrders_1");

                entity.Property(e => e.StartDateOrderForm)
                    .HasColumnName("StartDate_OrderForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDateOrderForm)
                    .HasColumnName("EndDate_OrderForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.ApprovedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.DatePhysicalCountForm)
                    .HasColumnName("Date_PhysicalCountForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.IssuedBy).HasMaxLength(50);

                entity.Property(e => e.IssuedDate).HasColumnType("datetime");

                entity.HasOne(d => d.ApprovedByNavigation)
                    .WithMany(p => p.ApprovedFacilityOrdersApprovedByNavigation)
                    .HasForeignKey(d => d.ApprovedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApprovedFacilityOrders_User_Account");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ApprovedFacilityOrders)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApprovedFacilityOrders_A_Facilities");

                entity.HasOne(d => d.IssuedByNavigation)
                    .WithMany(p => p.ApprovedFacilityOrdersIssuedByNavigation)
                    .HasForeignKey(d => d.IssuedBy)
                    .HasConstraintName("FK_ApprovedFacilityOrders_User_Account1");

                entity.HasOne(d => d.PhysicalCountHeader)
                    .WithMany(p => p.ApprovedFacilityOrders)
                    .HasForeignKey(d => new { d.DatePhysicalCountForm, d.FacilityCode })
                    .HasConstraintName("FK_ApprovedFacilityOrders_PhysicalCount_Header");
            });

            modelBuilder.Entity<AspNetRoles1>(entity =>
            {
                entity.ToTable("AspNetRoles");

                entity.HasIndex(e => e.Name)
                    .HasName("RoleNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_dbo.AspNetUserRoles");

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_RoleId");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUsers1>(entity =>
            {
                entity.ToTable("AspNetUsers");

                entity.HasIndex(e => e.UserName)
                    .HasName("UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.Md5hash).HasColumnName("MD5Hash");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.AspNetUsers1)
                    .HasForeignKey(d => d.FacilityId)
                    .HasConstraintName("FK_AspNetUsers_A_Facilities");

                entity.HasOne(d => d.UserType)
                    .WithMany(p => p.AspNetUsers1)
                    .HasForeignKey(d => d.UserTypeId)
                    .HasConstraintName("FK_AspNetUsers_A_UserType");
            });

            modelBuilder.Entity<AspnetApplications>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("PK__aspnet_A__C93A4C984B95B81C")
                    .IsClustered(false);

                entity.ToTable("aspnet_Applications");

                entity.HasIndex(e => e.ApplicationName)
                    .HasName("UQ__aspnet_A__30910331889464A2")
                    .IsUnique();

                entity.HasIndex(e => e.LoweredApplicationName)
                    .HasName("aspnet_Applications_Index")
                    .IsClustered();

                entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetMembership>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_M__1788CC4D319A4C3D")
                    .IsClustered(false);

                entity.ToTable("aspnet_Membership");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredEmail })
                    .HasName("aspnet_Membership_index")
                    .IsClustered();

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredEmail).HasMaxLength(256);

                entity.Property(e => e.MobilePin)
                    .HasColumnName("MobilePIN")
                    .HasMaxLength(16);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AspnetMembership)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__Appli__4B16DA89");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.AspnetMembership)
                    .HasForeignKey<AspnetMembership>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__UserI__4C0AFEC2");
            });

            modelBuilder.Entity<AspnetPaths>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC582F234BAE")
                    .IsClustered(false);

                entity.ToTable("aspnet_Paths");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredPath })
                    .HasName("aspnet_Paths_index")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AspnetPaths)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pa__Appli__78DDA539");
            });

            modelBuilder.Entity<AspnetPersonalizationAllUsers>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC5988ECCC56");

                entity.ToTable("aspnet_PersonalizationAllUsers");

                entity.Property(e => e.PathId).ValueGeneratedNever();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.Path)
                    .WithOne(p => p.AspnetPersonalizationAllUsers)
                    .HasForeignKey<AspnetPersonalizationAllUsers>(d => d.PathId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pe__PathI__7E967E8F");
            });

            modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__aspnet_P__3214EC06FCFF8E22")
                    .IsClustered(false);

                entity.ToTable("aspnet_PersonalizationPerUser");

                entity.HasIndex(e => new { e.PathId, e.UserId })
                    .HasName("aspnet_PersonalizationPerUser_index1")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.UserId, e.PathId })
                    .HasName("aspnet_PersonalizationPerUser_ncindex2")
                    .IsUnique();

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.Path)
                    .WithMany(p => p.AspnetPersonalizationPerUser)
                    .HasForeignKey(d => d.PathId)
                    .HasConstraintName("FK__aspnet_Pe__PathI__02670F73");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspnetPersonalizationPerUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__aspnet_Pe__UserI__035B33AC");
            });

            modelBuilder.Entity<AspnetProfile>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_P__1788CC4CA7D48E41");

                entity.ToTable("aspnet_Profile");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyNames)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PropertyValuesBinary)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.PropertyValuesString)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.AspnetProfile)
                    .HasForeignKey<AspnetProfile>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pr__UserI__5F1DD336");
            });

            modelBuilder.Entity<AspnetRoles>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__aspnet_R__8AFACE1B2571E13A")
                    .IsClustered(false);

                entity.ToTable("aspnet_Roles");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredRoleName })
                    .HasName("aspnet_Roles_index1")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AspnetRoles)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Ro__Appli__67B31937");
            });

            modelBuilder.Entity<AspnetSchemaVersions>(entity =>
            {
                entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion })
                    .HasName("PK__aspnet_S__5A1E6BC1D0D78DCD");

                entity.ToTable("aspnet_SchemaVersions");

                entity.Property(e => e.Feature).HasMaxLength(128);

                entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetUsers>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_U__1788CC4D2DC0DEFB")
                    .IsClustered(false);

                entity.ToTable("aspnet_Users");

                entity.HasIndex(e => new { e.ApplicationId, e.LastActivityDate })
                    .HasName("aspnet_Users_Index2");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredUserName })
                    .HasName("aspnet_Users_Index")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.AspnetUsers)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__Appli__3CC8BB32");
            });

            modelBuilder.Entity<AspnetUsersInRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK__aspnet_U__AF2760AD7B8B5C7D");

                entity.ToTable("aspnet_UsersInRoles");

                entity.HasIndex(e => e.RoleId)
                    .HasName("aspnet_UsersInRoles_index");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspnetUsersInRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__RoleI__6C77CE54");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspnetUsersInRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__UserI__6B83AA1B");
            });

            modelBuilder.Entity<AspnetWebEventEvents>(entity =>
            {
                entity.HasKey(e => e.EventId)
                    .HasName("PK__aspnet_W__7944C810030B66D8");

                entity.ToTable("aspnet_WebEvent_Events");

                entity.Property(e => e.EventId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ApplicationPath).HasMaxLength(256);

                entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventTime).HasColumnType("datetime");

                entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ExceptionType).HasMaxLength(256);

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Message).HasMaxLength(1024);

                entity.Property(e => e.RequestUrl).HasMaxLength(1024);
            });

            modelBuilder.Entity<ChssAllOrdersMadeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chss_All_Orders_Made_View");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssAreas>(entity =>
            {
                entity.HasKey(e => e.AreaCode);

                entity.ToTable("Chss_Areas");

                entity.Property(e => e.AreaCode)
                    .HasColumnName("area_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChssAreasVisited>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.AreaCode });

                entity.ToTable("Chss_Areas_Visited");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AreaCode).HasColumnName("area_code");

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.WasVisited).HasColumnName("was_visited");

                entity.HasOne(d => d.AreaCodeNavigation)
                    .WithMany(p => p.ChssAreasVisited)
                    .HasForeignKey(d => d.AreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Areas_Visited_Chss_Areas");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssAreasVisited)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Areas_Visited_A_Facilities");
            });

            modelBuilder.Entity<ChssArtPatientCareRegister>(entity =>
            {
                entity.HasKey(e => new { e.RegisterNo, e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_ART_Patient_Care_Register");

                entity.HasIndex(e => new { e.RegisterNo, e.FacilityCode, e.DateOfVisit })
                    .HasName("IX_Chss_ART_Patient_Care_Register")
                    .IsUnique();

                entity.Property(e => e.RegisterNo).HasColumnName("Register_No");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrentRegimen).HasColumnName("Current_Regimen");

                entity.Property(e => e.OriginalRegimen).HasColumnName("Original_Regimen");

                entity.Property(e => e.PatientAge).HasColumnName("Patient_Age");

                entity.Property(e => e.PatientName).HasColumnName("Patient_Name");

                entity.Property(e => e.PatientNo).HasColumnName("Patient_No");

                entity.Property(e => e.PatientWeight).HasColumnName("Patient_Weight");

                entity.Property(e => e.StartDate).HasColumnName("Start_Date");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssArtPatientCareRegister)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Care_Register_A_Facilities");
            });

            modelBuilder.Entity<ChssArtPatientDispensingLog>(entity =>
            {
                entity.HasKey(e => new { e.LogNo, e.FacilityCode, e.DateOfVisit })
                    .IsClustered(false);

                entity.ToTable("Chss_ART_Patient_Dispensing_Log");

                entity.HasIndex(e => new { e.LogNo, e.FacilityCode, e.DateOfVisit })
                    .HasName("IX_Chss_ART_Patient_Dispensing_Log")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.LogNo).HasColumnName("Log_No");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AmountDispensed).HasColumnName("Amount_Dispensed");

                entity.Property(e => e.DispensingDate).HasColumnName("Dispensing_Date");

                entity.Property(e => e.MedicineName).HasColumnName("Medicine_Name");

                entity.Property(e => e.PatientNo).HasColumnName("Patient_No");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssArtPatientDispensingLog)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Dispensing_Log_A_Facilities");
            });

            modelBuilder.Entity<ChssArtPatientToolAvailability>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_ART_Patient_Tool_Availability");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssArtPatientToolAvailability)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Tool_Availability_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssArtPatientToolAvailability)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Tool_Availability_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssArtPatientTreatementGuide>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.RegimenCode, e.RegimenClassificationCode, e.TreatmentCases });

                entity.ToTable("Chss_ART_Patient_Treatement_Guide");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.TreatmentCases).HasColumnName("Treatment_Cases");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssArtPatientTreatementGuide)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Treatement_Guide_A_Facilities");

                entity.HasOne(d => d.RegimenClassificationCodeNavigation)
                    .WithMany(p => p.ChssArtPatientTreatementGuide)
                    .HasForeignKey(d => d.RegimenClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Treatement_Guide_A_DrugRegimenClassification");

                entity.HasOne(d => d.RegimenCodeNavigation)
                    .WithMany(p => p.ChssArtPatientTreatementGuide)
                    .HasForeignKey(d => d.RegimenCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_ART_Patient_Treatement_Guide_A_DrugRegimen");
            });

            modelBuilder.Entity<ChssCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryCode);

                entity.ToTable("Chss_Category");

                entity.Property(e => e.CategoryCode)
                    .HasColumnName("Category_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<ChssClassification>(entity =>
            {
                entity.HasKey(e => e.ClassificationCode);

                entity.ToTable("Chss_Classification");

                entity.HasIndex(e => new { e.CategoryCode, e.GuidId })
                    .HasName("IX_Chss_Classification")
                    .IsUnique();

                entity.Property(e => e.ClassificationCode)
                    .HasColumnName("Classification_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_id");

                entity.HasOne(d => d.CategoryCodeNavigation)
                    .WithMany(p => p.ChssClassification)
                    .HasForeignKey(d => d.CategoryCode)
                    .HasConstraintName("FK_Chss_Classification_Chss_Category");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssClassification)
                    .HasForeignKey(d => d.GuidId)
                    .HasConstraintName("FK_Chss_Classification_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssComments>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ModuleId, e.SectorId });

                entity.ToTable("Chss_Comments");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssComments)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Comments_A_Facilities");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ChssComments)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Comments_Chss_Module");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ChssComments)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Comments_Chss_Module_Sector");
            });

            modelBuilder.Entity<ChssEmail>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_Email");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.EmailDate)
                    .HasColumnName("Email_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssEquipment>(entity =>
            {
                entity.HasKey(e => e.EquipId);

                entity.ToTable("Chss_Equipment");

                entity.Property(e => e.EquipId)
                    .HasColumnName("Equip_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CatId).HasColumnName("Cat_ID");

                entity.Property(e => e.EquipDesc)
                    .HasColumnName("Equip_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Cat)
                    .WithMany(p => p.ChssEquipment)
                    .HasForeignKey(d => d.CatId)
                    .HasConstraintName("FK_Chss_Equipment_Chss_Equipment_Category");
            });

            modelBuilder.Entity<ChssEquipmentCategory>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("Chss_Equipment_Category");

                entity.Property(e => e.CatId)
                    .HasColumnName("Cat_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CatDesc)
                    .HasColumnName("Cat_Desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssEquipmentVerification>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.EquipId });

                entity.ToTable("Chss_Equipment_Verification");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("Date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.EquipId).HasColumnName("Equip_ID");

                entity.Property(e => e.ActionPoint)
                    .HasColumnName("Action_Point")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.EngravingCode)
                    .HasColumnName("Engraving_Code")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ItemFunctional).HasColumnName("Item_functional");

                entity.Property(e => e.LocationAtHf)
                    .HasColumnName("Location_at_HF")
                    .HasMaxLength(200);

                entity.Property(e => e.SerialNo)
                    .HasColumnName("Serial_No")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Timeline)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasOne(d => d.Equip)
                    .WithMany(p => p.ChssEquipmentVerification)
                    .HasForeignKey(d => d.EquipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Equipment_Verification_Chss_Equipment");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssEquipmentVerification)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Equipment_Verification_A_Facilities");
            });

            modelBuilder.Entity<ChssExpiryFefoUse>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId, e.ClassificationCode });

                entity.ToTable("Chss_Expiry_Fefo_Use");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.HasOne(d => d.ClassificationCodeNavigation)
                    .WithMany(p => p.ChssExpiryFefoUse)
                    .HasForeignKey(d => d.ClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Fefo_Use_Chss_Tracking_Places");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssExpiryFefoUse)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Fefo_Use_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssExpiryFefoUse)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Fefo_Use_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssExpiryPresence>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId, e.ClassificationCode });

                entity.ToTable("Chss_Expiry_Presence");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.HasOne(d => d.ClassificationCodeNavigation)
                    .WithMany(p => p.ChssExpiryPresence)
                    .HasForeignKey(d => d.ClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Presence_Chss_Classification");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssExpiryPresence)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Presence_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssExpiryPresence)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Presence_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssExpiryTrackingTools>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId, e.ClassificationCode })
                    .HasName("PK_Chss_Expiry_Tracking_Tools_1");

                entity.ToTable("Chss_Expiry_Tracking_Tools");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.HasOne(d => d.ClassificationCodeNavigation)
                    .WithMany(p => p.ChssExpiryTrackingTools)
                    .HasForeignKey(d => d.ClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Tracking_Tools_Chss_Classification");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssExpiryTrackingTools)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Tracking_Tools_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssExpiryTrackingTools)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Expiry_Tracking_Tools_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssFacilityContacts>(entity =>
            {
                entity.HasKey(e => e.FacilityCode);

                entity.ToTable("Chss_Facility_Contacts");

                entity.Property(e => e.FacilityCode)
                    .HasColumnName("Facility_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtInchargeContact)
                    .HasColumnName("ART_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.ArtInchargeName)
                    .HasColumnName("ART_Incharge_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.FacilityInchargeContact)
                    .HasColumnName("Facility_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.FacilityInchargeName)
                    .HasColumnName("Facility_Incharge_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MmsContact)
                    .HasColumnName("MMS_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.MmsName)
                    .HasColumnName("MMS_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.PharmaconvigilenceContact)
                    .HasColumnName("Pharmaconvigilence_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.PharmaconvigilenceName)
                    .HasColumnName("Pharmaconvigilence_Name")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithOne(p => p.ChssFacilityContacts)
                    .HasForeignKey<ChssFacilityContacts>(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Facility_Contacts_A_Facilities");
            });

            modelBuilder.Entity<ChssFacilityDetails>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit })
                    .HasName("PK_Chss_Facility_Visits");

                entity.ToTable("Chss_Facility_Details");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.AdjustedBy).HasMaxLength(100);

                entity.Property(e => e.AdjustedDate)
                    .HasColumnName("Adjusted_Date")
                    .HasColumnType("date");

                entity.Property(e => e.CapturedBy).HasMaxLength(100);

                entity.Property(e => e.CcuCode).HasColumnName("Ccu_Code");

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.VisitNo).HasColumnName("Visit_No");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFacilityDetails)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Facility_Visits_A_Facilities");
            });

            modelBuilder.Entity<ChssFacilityVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_Facility_Visits");

                entity.Property(e => e.AdjustedBy).HasMaxLength(100);

                entity.Property(e => e.AdjustedDate)
                    .HasColumnName("Adjusted_Date")
                    .HasColumnType("date");

                entity.Property(e => e.CapturedBy).HasMaxLength(100);

                entity.Property(e => e.CcuCode).HasColumnName("Ccu_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.VisitNo).HasColumnName("Visit_No");
            });

            modelBuilder.Entity<ChssFeedBackActionArea>(entity =>
            {
                entity.HasKey(e => new { e.ActionCode, e.FacilityCode, e.DateOfVisit, e.SectorId })
                    .HasName("PK_Chss_RxSolution_Action_Area");

                entity.ToTable("Chss_Feed_Back_Action_Area");

                entity.Property(e => e.ActionCode).HasColumnName("action_Code");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.ActionOwner)
                    .HasColumnName("Action_Owner")
                    .HasMaxLength(100);

                entity.Property(e => e.CorrectionArea)
                    .HasColumnName("Correction_Area")
                    .HasColumnType("text");

                entity.Property(e => e.Mitigation).HasColumnType("text");

                entity.Property(e => e.TimeLine)
                    .HasColumnName("Time_Line")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFeedBackActionArea)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_RxSolution_Action_Area_A_Facilities");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ChssFeedBackActionArea)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Feed_Back_Action_Area_Chss_Module_Sector");
            });

            modelBuilder.Entity<ChssFeedBackPharmacovigilenceSolution>(entity =>
            {
                entity.HasKey(e => new { e.DateOfVisit, e.FacilityCode, e.GuidId })
                    .HasName("PK_FeedBack_Pharmacovigilence_Solution");

                entity.ToTable("Chss_FeedBack_Pharmacovigilence_Solution");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Result).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFeedBackPharmacovigilenceSolution)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeedBack_Pharmacovigilence_Solution_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssFeedBackPharmacovigilenceSolution)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FeedBack_Pharmacovigilence_Solution_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssFeedBackReport>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ModuleId, e.SectorId });

                entity.ToTable("Chss_Feed_Back_Report");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.ActionPlan)
                    .HasColumnName("Action_Plan")
                    .HasColumnType("text");

                entity.Property(e => e.Recommendation).HasColumnType("text");

                entity.Property(e => e.ResponsiblePerson)
                    .HasColumnName("Responsible_Person")
                    .HasMaxLength(150);

                entity.Property(e => e.TimeLine)
                    .HasColumnName("Time_line")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFeedBackReport)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Feed_Back_Report_A_Facilities");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ChssFeedBackReport)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Feed_Back_Report_Chss_Module");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ChssFeedBackReport)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Feed_Back_Report_Chss_Module_Sector");
            });

            modelBuilder.Entity<ChssFeedBackReportView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_FeedBack_Report_View");

                entity.Property(e => e.ActionPlan)
                    .HasColumnName("Action_Plan")
                    .HasColumnType("text");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ModuleDescription)
                    .HasColumnName("Module_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.Recommendation).HasColumnType("text");

                entity.Property(e => e.ResponsiblePerson)
                    .HasColumnName("Responsible_Person")
                    .HasMaxLength(150);

                entity.Property(e => e.SectorDescription)
                    .HasColumnName("Sector_Description")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.TimeLine)
                    .HasColumnName("Time_line")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssFeedBackSolution>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId })
                    .HasName("PK_Chss_RxSolution");

                entity.ToTable("Chss_Feed_Back_Solution");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFeedBackSolution)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_RxSolution_A_Facilities");
            });

            modelBuilder.Entity<ChssFrostStockMovementOptions>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Frost_Stock_Movement_Options");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.OrderFulfilmentStatus)
                    .HasColumnName("Order_Fulfilment_Status")
                    .HasMaxLength(100);

                entity.Property(e => e.TopUpOption)
                    .HasColumnName("Top_Up_Option")
                    .HasMaxLength(150);

                entity.Property(e => e.TopUpQuantity).HasColumnName("Top_Up_Quantity");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssFrostStockMovementOptions)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Frost_Stock_Movement_Options_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssFrostStockMovementOptions)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Frost_Stock_Movement_Options_A_Product");
            });

            modelBuilder.Entity<ChssFullScore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_Full_Score");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Amc)
                    .HasColumnName("AMC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtAvailability)
                    .HasColumnName("ART_Availability")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtDispensingLog)
                    .HasColumnName("ART_DispensingLog")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtRegister)
                    .HasColumnName("ART_Register")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtSparsTotal).HasColumnName("ART_Spars_Total");

                entity.Property(e => e.ArtTotal).HasColumnName("ART_Total");

                entity.Property(e => e.ArtTreatment)
                    .HasColumnName("ART_Treatment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cleanliness)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryPresence)
                    .HasColumnName("Expiry_Presence")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirySparsTotal).HasColumnName("Expiry_Spars_Total");

                entity.Property(e => e.ExpiryTotal).HasColumnName("Expiry_Total");

                entity.Property(e => e.FacilityStore)
                    .HasColumnName("Facility_Store")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FefoUse)
                    .HasColumnName("FEFO_Use")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinalSparsTotal).HasColumnName("Final_Spars_Total");

                entity.Property(e => e.FinalTotal).HasColumnName("Final_Total");

                entity.Property(e => e.IssuedToPatients)
                    .HasColumnName("Issued_to_Patients")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderAccuracy)
                    .HasColumnName("Order_Accuracy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSparsTotal).HasColumnName("Order_Spars_Total");

                entity.Property(e => e.OrderTotal).HasColumnName("Order_Total");

                entity.Property(e => e.PatientReport)
                    .HasColumnName("Patient_report")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalCount)
                    .HasColumnName("Physical_Count")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportAvailability)
                    .HasColumnName("Report_Availability")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionSystem)
                    .HasColumnName("Requisition_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SparsScore)
                    .HasColumnName("Spars_Score")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockBookUse)
                    .HasColumnName("Stock_Book_Use")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockCard)
                    .HasColumnName("Stock_Card")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockCardFill)
                    .HasColumnName("Stock_Card_Fill")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockSparsTotal).HasColumnName("Stock_Spars_Total");

                entity.Property(e => e.StockTotal).HasColumnName("Stock_Total");

                entity.Property(e => e.StorageCondition)
                    .HasColumnName("Storage_Condition")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StoragePractice)
                    .HasColumnName("Storage_Practice")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StorageSystem)
                    .HasColumnName("Storage_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StoreSparsTotal).HasColumnName("Store_Spars_Total");

                entity.Property(e => e.StoreTotal).HasColumnName("Store_Total");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TackingTools)
                    .HasColumnName("Tacking_tools")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestKits)
                    .HasColumnName("Test_Kits")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TraceabilitySparsTotal).HasColumnName("Traceability_Spars_Total");

                entity.Property(e => e.TraceabilityTotal).HasColumnName("Traceability_Total");

                entity.Property(e => e.UpdatingStockCard)
                    .HasColumnName("Updating_Stock_Card")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChssHivOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_Hiv_Order_View");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssLabOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chss_Lab_Orders");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssLabOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chss_Lab_Orders_View");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssLocation>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_Location");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDateTime)
                    .HasColumnName("End_date_Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndLat).HasColumnName("End_Lat");

                entity.Property(e => e.EndLong).HasColumnName("End_Long");

                entity.Property(e => e.EndPlace)
                    .HasColumnName("End_Place")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDateTime)
                    .HasColumnName("Start_date_Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartPlace)
                    .HasColumnName("Start_Place")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ChssMAreasVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Areas_Visited");

                entity.Property(e => e.AreaCode).HasColumnName("area_code");

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.WasVisited).HasColumnName("was_visited");
            });

            modelBuilder.Entity<ChssMArtPatientCareAvailability>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ART_Patient_Care_Availability");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Percentage)
                    .HasColumnName("_Percentage")
                    .HasColumnType("numeric(21, 6)");

                entity.Property(e => e.QEight).HasColumnName("Q_eight");

                entity.Property(e => e.QFive).HasColumnName("Q_five");

                entity.Property(e => e.QFour).HasColumnName("Q_four");

                entity.Property(e => e.QNine).HasColumnName("Q_nine");

                entity.Property(e => e.QOne).HasColumnName("Q_one");

                entity.Property(e => e.QSeven).HasColumnName("Q_seven");

                entity.Property(e => e.QSix).HasColumnName("Q_six");

                entity.Property(e => e.QTen).HasColumnName("Q_ten");

                entity.Property(e => e.QThree).HasColumnName("Q_three");

                entity.Property(e => e.QTwo).HasColumnName("Q_two");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Sum).HasColumnName("_SUM");
            });

            modelBuilder.Entity<ChssMArtPatientCareAvailability1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ART_Patient_Care_Availability_1");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.QEight).HasColumnName("Q_eight");

                entity.Property(e => e.QFive).HasColumnName("Q_five");

                entity.Property(e => e.QFour).HasColumnName("Q_four");

                entity.Property(e => e.QNine).HasColumnName("Q_nine");

                entity.Property(e => e.QOne).HasColumnName("Q_one");

                entity.Property(e => e.QSeven).HasColumnName("Q_seven");

                entity.Property(e => e.QSix).HasColumnName("Q_six");

                entity.Property(e => e.QTen).HasColumnName("Q_ten");

                entity.Property(e => e.QThree).HasColumnName("Q_three");

                entity.Property(e => e.QTwo).HasColumnName("Q_two");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMArtPatientCareDispensingLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ART_Patient_Care_DispensingLog");

                entity.Property(e => e.AmountDispensed)
                    .IsRequired()
                    .HasColumnName("Amount_Dispensed")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DispensingDate)
                    .IsRequired()
                    .HasColumnName("Dispensing_Date")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LogNo).HasColumnName("Log_No");

                entity.Property(e => e.MedicineName)
                    .IsRequired()
                    .HasColumnName("Medicine_Name")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PatientNo)
                    .IsRequired()
                    .HasColumnName("Patient_No")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMArtPatientCareRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ART_Patient_Care_Register");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.CurrentRegimen)
                    .IsRequired()
                    .HasColumnName("Current_Regimen")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Dapsone)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OriginalRegimen)
                    .IsRequired()
                    .HasColumnName("Original_Regimen")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PatientAge)
                    .IsRequired()
                    .HasColumnName("Patient_Age")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PatientName)
                    .IsRequired()
                    .HasColumnName("Patient_Name")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PatientNo)
                    .IsRequired()
                    .HasColumnName("Patient_No")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PatientWeight)
                    .IsRequired()
                    .HasColumnName("Patient_Weight")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterNo).HasColumnName("Register_No");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .IsRequired()
                    .HasColumnName("Start_Date")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChssMArtPatientCareTreatment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ART_Patient_Care_Treatment");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug1)
                    .HasColumnName("Drug_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug10)
                    .HasColumnName("Drug_10")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug2)
                    .HasColumnName("Drug_2")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug3)
                    .HasColumnName("Drug_3")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug4)
                    .HasColumnName("Drug_4")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug5)
                    .HasColumnName("Drug_5")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug6)
                    .HasColumnName("Drug_6")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug7)
                    .HasColumnName("Drug_7")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug8)
                    .HasColumnName("Drug_8")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug9)
                    .HasColumnName("Drug_9")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score1).HasColumnName("Score_1");

                entity.Property(e => e.Score10).HasColumnName("Score_10");

                entity.Property(e => e.Score2).HasColumnName("Score_2");

                entity.Property(e => e.Score3).HasColumnName("Score_3");

                entity.Property(e => e.Score4).HasColumnName("Score_4");

                entity.Property(e => e.Score5).HasColumnName("Score_5");

                entity.Property(e => e.Score6).HasColumnName("Score_6");

                entity.Property(e => e.Score7).HasColumnName("Score_7");

                entity.Property(e => e.Score8).HasColumnName("Score_8");

                entity.Property(e => e.Score9).HasColumnName("Score_9");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalScore).HasColumnName("Total_Score");
            });

            modelBuilder.Entity<ChssMComments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Comments");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ModuleDescription)
                    .HasColumnName("Module_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SectorDescription)
                    .HasColumnName("Sector_Description")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");
            });

            modelBuilder.Entity<ChssMConnectedToSap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_ConnectedToSAP");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDesc).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Details");

                entity.Property(e => e.AdjustedBy).HasMaxLength(100);

                entity.Property(e => e.AdjustedDate)
                    .HasColumnName("Adjusted_Date")
                    .HasColumnType("date");

                entity.Property(e => e.ArtInchargeContact)
                    .HasColumnName("ART_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.ArtInchargeName)
                    .HasColumnName("ART_Incharge_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.CapturedBy).HasMaxLength(100);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityInchargeContact)
                    .HasColumnName("Facility_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.FacilityInchargeName)
                    .HasColumnName("Facility_Incharge_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.MmsName)
                    .HasColumnName("MMS_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PharmaconvigilenceContact)
                    .HasColumnName("Pharmaconvigilence_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.PharmaconvigilenceName)
                    .HasColumnName("Pharmaconvigilence_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.RegionDescription)
                    .HasColumnName("Region_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.VisitNo).HasColumnName("Visit_No");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMEquipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Equipment");

                entity.Property(e => e.CatDesc)
                    .HasColumnName("Cat_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.CatId).HasColumnName("Cat_ID");

                entity.Property(e => e.EquipDesc)
                    .HasColumnName("Equip_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EquipId).HasColumnName("Equip_ID");
            });

            modelBuilder.Entity<ChssMEquipmentVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Equipment_Verification");

                entity.Property(e => e.ActionPoint)
                    .HasColumnName("Action_Point")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CatDesc)
                    .HasColumnName("Cat_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("Date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EngravingCode)
                    .HasColumnName("Engraving_Code")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EquipDesc)
                    .HasColumnName("Equip_Desc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EquipId).HasColumnName("Equip_ID");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemFunctional)
                    .IsRequired()
                    .HasColumnName("Item_functional")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LocationAtHf)
                    .HasColumnName("Location_at_HF")
                    .HasMaxLength(200);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SerialNo)
                    .HasColumnName("Serial_No")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Timeline)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMExpiryFefoUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Expiry_Fefo_Use");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMExpiryPresence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Expiry_Presence");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMExpiryTrackingTools>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Expiry_Tracking_Tools");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMFacilities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Facilities");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMFeedBackActionArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_FeedBack_ActionArea");

                entity.Property(e => e.ActionCode).HasColumnName("action_Code");

                entity.Property(e => e.ActionOwner)
                    .HasColumnName("Action_Owner")
                    .HasMaxLength(100);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.CorrectionArea)
                    .HasColumnName("Correction_Area")
                    .HasColumnType("text");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Mitigation).HasColumnType("text");

                entity.Property(e => e.ModuleDesc)
                    .HasColumnName("Module_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SectorDesc)
                    .HasColumnName("Sector_desc")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.TimeLine)
                    .HasColumnName("Time_Line")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMFeedBackDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_FeedBackDetails");

                entity.Property(e => e.ActionPlan)
                    .HasColumnName("Action_Plan")
                    .HasColumnType("text");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Followup).HasColumnType("text");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ModuleDesc)
                    .HasColumnName("Module_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.PreviousFindings)
                    .HasColumnName("Previous_Findings")
                    .HasColumnType("text");

                entity.Property(e => e.Recommendation).HasColumnType("text");

                entity.Property(e => e.ResponsiblePerson)
                    .HasColumnName("Responsible_Person")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SectorDesc)
                    .HasColumnName("Sector_Desc")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.TimeLine)
                    .HasColumnName("Time_line")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMFeedBackSolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_FeedBack_Solution");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMFeedbackParameters>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Feedback_Parameters");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.OverStock).HasColumnName("Over_Stock");

                entity.Property(e => e.OverStockPercent).HasColumnName("Over_Stock_Percent");

                entity.Property(e => e.RedistributionPercent).HasColumnName("Redistribution_Percent");

                entity.Property(e => e.RightStock).HasColumnName("Right_Stock");

                entity.Property(e => e.RightStockPercent).HasColumnName("Right_Stock_Percent");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StockedOut).HasColumnName("Stocked_Out");

                entity.Property(e => e.StockedOutPercent).HasColumnName("Stocked_Out_Percent");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.UnderStock).HasColumnName("Under_Stock");

                entity.Property(e => e.UnderStockPercent).HasColumnName("Under_Stock_Percent");
            });

            modelBuilder.Entity<ChssMFrostStockMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Frost_Stock_Movement");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.OrderFulfilmentStatus)
                    .HasColumnName("Order_Fulfilment_Status")
                    .HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.TopUpOption)
                    .HasColumnName("Top_Up_Option")
                    .HasMaxLength(150);

                entity.Property(e => e.TopUpQuantity).HasColumnName("Top_Up_Quantity");
            });

            modelBuilder.Entity<ChssMLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Location");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDateTime)
                    .HasColumnName("End_date_Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndLat).HasColumnName("End_Lat");

                entity.Property(e => e.EndLong).HasColumnName("End_Long");

                entity.Property(e => e.EndPlace)
                    .HasColumnName("End_Place")
                    .HasMaxLength(150);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDateTime)
                    .HasColumnName("Start_date_Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartPlace)
                    .HasColumnName("Start_Place")
                    .HasMaxLength(150);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMOrderAccuracy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Order_Accuracy");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DispensingQuantityConsumed).HasColumnName("Dispensing_Quantity_Consumed");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityComsumed).HasColumnName("Quantity_Comsumed");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssMOrderBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Order_Balance");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClosingBalance).HasColumnName("Closing_Balance");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OpeningBalance).HasColumnName("Opening_Balance");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssMOrderPatientsReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Order_Patients_Report");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMOrderReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Order_Report");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMOrderTestKits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Order_TestKits");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order_Quantity");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("Product_Code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.RegisterQuantity).HasColumnName("Register_Quantity");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssMPam>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Pam");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.OverStock).HasColumnName("Over_Stock");

                entity.Property(e => e.RightStock).HasColumnName("Right_Stock");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StockedOut).HasColumnName("Stocked_Out");

                entity.Property(e => e.Total).HasColumnName("TOTAL");

                entity.Property(e => e.UnderStock).HasColumnName("Under_Stock");
            });

            modelBuilder.Entity<ChssMPharmSolution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Pharm_Solution");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.Result).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Products");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NmsCodes)
                    .HasColumnName("NMS_Codes")
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMScores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Scores");

                entity.Property(e => e.Amc)
                    .HasColumnName("AMC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtAvailability)
                    .HasColumnName("ART_Availability")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtDispensingLog)
                    .HasColumnName("ART_DispensingLog")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtRegister)
                    .HasColumnName("ART_Register")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArtSparsTotal).HasColumnName("ART_Spars_Total");

                entity.Property(e => e.ArtTotal).HasColumnName("ART_Total");

                entity.Property(e => e.ArtTreatment)
                    .HasColumnName("ART_Treatment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Cleanliness)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryPresence)
                    .HasColumnName("Expiry_Presence")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirySparsTotal).HasColumnName("Expiry_Spars_Total");

                entity.Property(e => e.ExpiryTotal).HasColumnName("Expiry_Total");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.FacilityStore)
                    .HasColumnName("Facility_Store")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FefoUse)
                    .HasColumnName("FEFO_Use")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinalSparsTotal).HasColumnName("Final_Spars_Total");

                entity.Property(e => e.FinalTotal).HasColumnName("Final_Total");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.IssuedToPatients)
                    .HasColumnName("Issued_to_Patients")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderAccuracy)
                    .HasColumnName("Order_Accuracy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSparsTotal).HasColumnName("Order_Spars_Total");

                entity.Property(e => e.OrderTotal).HasColumnName("Order_Total");

                entity.Property(e => e.PatientReport)
                    .HasColumnName("Patient_report")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalCount)
                    .HasColumnName("Physical_Count")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportAvailability)
                    .HasColumnName("Report_Availability")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionSystem)
                    .HasColumnName("Requisition_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SparsScore)
                    .HasColumnName("Spars_Score")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockBookUse)
                    .HasColumnName("Stock_Book_Use")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockCard)
                    .HasColumnName("Stock_Card")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockCardFill)
                    .HasColumnName("Stock_Card_Fill")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StockSparsTotal).HasColumnName("Stock_Spars_Total");

                entity.Property(e => e.StockTotal).HasColumnName("Stock_Total");

                entity.Property(e => e.StorageCondition)
                    .HasColumnName("Storage_Condition")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StoragePractice)
                    .HasColumnName("Storage_Practice")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StorageSystem)
                    .HasColumnName("Storage_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StoreSparsTotal).HasColumnName("Store_Spars_Total");

                entity.Property(e => e.StoreTotal).HasColumnName("Store_Total");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TackingTools)
                    .HasColumnName("Tacking_tools")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestKits)
                    .HasColumnName("Test_Kits")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TraceabilitySparsTotal).HasColumnName("Traceability_Spars_Total");

                entity.Property(e => e.TraceabilityTotal).HasColumnName("Traceability_Total");

                entity.Property(e => e.UpdatingStockCard)
                    .HasColumnName("Updating_Stock_Card")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChssMSctoContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_SCTO_Contact");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SctoEmail)
                    .HasColumnName("SCTO_Email")
                    .HasMaxLength(255);

                entity.Property(e => e.SctoTelNo1)
                    .HasColumnName("SCTO_TelNo1")
                    .HasMaxLength(255);

                entity.Property(e => e.SctoTelNo2)
                    .HasColumnName("SCTO_TelNo2")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ChssMStockManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Stock_Management");

                entity.Property(e => e.Amc)
                    .HasColumnName("AMC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AmcComparison).HasColumnName("AMC_Comparison");

                entity.Property(e => e.BalanceComparison)
                    .IsRequired()
                    .HasColumnName("Balance_Comparison")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CalculatedAmc).HasColumnName("Calculated_AMC");

                entity.Property(e => e.CardAvailability)
                    .IsRequired()
                    .HasColumnName("Card_Availability")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.CorrectCardFil)
                    .IsRequired()
                    .HasColumnName("Correct_Card_Fil")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectStockBookUse)
                    .IsRequired()
                    .HasColumnName("Correct_Stock_Book_Use")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiredQuantity).HasColumnName("Expired_Quantity");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityQuantity).HasColumnName("Facility_Quantity");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemAvailable).HasColumnName("Item_Available");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.MonthOfStock).HasColumnName("Month_Of_Stock");

                entity.Property(e => e.MonthlyPhysicalCount)
                    .IsRequired()
                    .HasColumnName("Monthly_Physical_Count")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.OutOfStockDays).HasColumnName("Out_Of_Stock_Days");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PharmacyQuantity).HasColumnName("Pharmacy_Quantity");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityIssued).HasColumnName("Quantity_Issued");

                entity.Property(e => e.QuantityToBorrow).HasColumnName("Quantity_ToBorrow");

                entity.Property(e => e.QuantityToLend).HasColumnName("Quantity_ToLend");

                entity.Property(e => e.Recommendation)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StockBookAvailability)
                    .IsRequired()
                    .HasColumnName("Stock_Book_Availability")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StockCardBalance)
                    .HasColumnName("Stock_Card_Balance")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StockStatus)
                    .IsRequired()
                    .HasColumnName("Stock_Status")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StoreQuantity).HasColumnName("Store_Quantity");
            });

            modelBuilder.Entity<ChssMStorageCleanliness>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Storage_Cleanliness");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMStoragePractice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Storage_Practice");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMStorageSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Storage_System");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMStoreCondition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Store_Condition");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMSupervised>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Supervised");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode1).HasColumnName("facility_code");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.IsTrained).HasColumnName("Is_Trained");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Profession).HasMaxLength(80);

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RegionDescription)
                    .IsRequired()
                    .HasColumnName("Region_Description")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMSupervisors>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Supervisors");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RegionDescription)
                    .IsRequired()
                    .HasColumnName("Region_Description")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SupervisionType).HasColumnName("Supervision_Type");

                entity.Property(e => e.SupervisorDesc)
                    .HasColumnName("Supervisor_Desc")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Title).HasMaxLength(80);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMTraceabilityFacilityStoreToDispensingUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Traceability_Facility_Store_To_DispensingUnit");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateComp)
                    .IsRequired()
                    .HasColumnName("Date_Comp")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("Issue_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemAvailability)
                    .IsRequired()
                    .HasColumnName("Item_Availability")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityComp)
                    .IsRequired()
                    .HasColumnName("Quantity_Comp")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityIssued)
                    .HasColumnName("Quantity_Issued")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StockCardIssueDate)
                    .HasColumnName("Stock_Card_Issue_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockCardQuantityIssued)
                    .HasColumnName("Stock_Card_Quantity_Issued")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChssMTraceabilityIssuedToPatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Traceability_Issued_To_Patients");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMTraceabilityRequisitionSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Traceability_Requisition_System");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMTraceabilitySpecialisation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Traceability_Specialisation");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMTraceabilitySupplierToFacilityStore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Traceability_Supplier_To_Facility_Store");

                entity.Property(e => e.BatchComp).HasColumnName("Batch_Comp");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityComp).HasColumnName("Quantity_Comp");

                entity.Property(e => e.ReceivedStockCardNoteBatch)
                    .HasColumnName("Received_Stock_Card_Note_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.ReceivedStockCardQuantity)
                    .HasColumnName("Received_Stock_Card_Quantity")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RecentDeliveryNoteBatch)
                    .HasColumnName("Recent_Delivery_Note_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.RecentDeliveryNoteQuantity)
                    .HasColumnName("Recent_Delivery_Note_Quantity")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespondingGoodsReceivedBatch)
                    .HasColumnName("Responding_Goods_Received_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.RespondingGoodsReceivedNoteQuantity)
                    .HasColumnName("Responding_Goods_Received_Note_Quantity")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssMTreatment1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_M_Treatment_1");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug1)
                    .HasColumnName("Drug_1")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug10)
                    .HasColumnName("Drug_10")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug2)
                    .HasColumnName("Drug_2")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug3)
                    .HasColumnName("Drug_3")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug4)
                    .HasColumnName("Drug_4")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug5)
                    .HasColumnName("Drug_5")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug6)
                    .HasColumnName("Drug_6")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug7)
                    .HasColumnName("Drug_7")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug8)
                    .HasColumnName("Drug_8")
                    .HasMaxLength(50);

                entity.Property(e => e.Drug9)
                    .HasColumnName("Drug_9")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score1).HasColumnName("Score_1");

                entity.Property(e => e.Score10).HasColumnName("Score_10");

                entity.Property(e => e.Score2).HasColumnName("Score_2");

                entity.Property(e => e.Score3).HasColumnName("Score_3");

                entity.Property(e => e.Score4).HasColumnName("Score_4");

                entity.Property(e => e.Score5).HasColumnName("Score_5");

                entity.Property(e => e.Score6).HasColumnName("Score_6");

                entity.Property(e => e.Score7).HasColumnName("Score_7");

                entity.Property(e => e.Score8).HasColumnName("Score_8");

                entity.Property(e => e.Score9).HasColumnName("Score_9");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChssModule>(entity =>
            {
                entity.HasKey(e => e.ModuleId);

                entity.ToTable("Chss_Module");

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssModuleSector>(entity =>
            {
                entity.HasKey(e => e.SectorId);

                entity.ToTable("Chss_Module_Sector");

                entity.HasIndex(e => e.SectorId)
                    .HasName("IX_Chss_Module_Sector")
                    .IsUnique();

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ChssModuleSector)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Chss_Module_Sector_Chss_Module");
            });

            modelBuilder.Entity<ChssModuleView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_Module_View");

                entity.Property(e => e.ModuleDescription)
                    .HasColumnName("Module_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.SectorDescription)
                    .HasColumnName("Sector_Description")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_Id");
            });

            modelBuilder.Entity<ChssOiStiOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_OI_STI_Order_View");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssOrderAccuracy>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Order_Accuracy");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.DispensingQuantityConsumed).HasColumnName("Dispensing_Quantity_Consumed");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuantityComsumed).HasColumnName("Quantity_Comsumed");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssOrderAccuracy)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Accuracy_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssOrderAccuracy)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Accuracy_A_Product");
            });

            modelBuilder.Entity<ChssOrderBalanceComparison>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Order_Balance_Comparison");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ClosingBalance).HasColumnName("Closing_Balance");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OpeningBalance).HasColumnName("Opening_Balance");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssOrderBalanceComparison)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Balance_Comparison_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssOrderBalanceComparison)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Balance_Comparison_A_Product");
            });

            modelBuilder.Entity<ChssOrderMeans>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Order_Means");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssOrderMeans)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Means_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssOrderMeans)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Means_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssOrderPatientsReport>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.RegimenCode, e.RegimenClassificationCode });

                entity.ToTable("Chss_Order_Patients_Report");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssOrderPatientsReport)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Patients_Report_A_Facilities");

                entity.HasOne(d => d.RegimenClassificationCodeNavigation)
                    .WithMany(p => p.ChssOrderPatientsReport)
                    .HasForeignKey(d => d.RegimenClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Patients_Report_A_DrugRegimenClassification");

                entity.HasOne(d => d.RegimenCodeNavigation)
                    .WithMany(p => p.ChssOrderPatientsReport)
                    .HasForeignKey(d => d.RegimenCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Order_Patients_Report_A_DrugRegimen");
            });

            modelBuilder.Entity<ChssOrderTestKits>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode })
                    .HasName("PK_Order_Test_Kits");

                entity.ToTable("Chss_Order_Test_Kits");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("Product_Code");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderQuantity).HasColumnName("Order_Quantity");

                entity.Property(e => e.RegisterQuantity).HasColumnName("Register_Quantity");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssOrderTestKits)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Test_Kits_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssOrderTestKits)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Test_Kits_A_Product");
            });

            modelBuilder.Entity<ChssProductOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chss_Product_Order_View");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssQuestionGuid>(entity =>
            {
                entity.HasKey(e => e.GuidId)
                    .HasName("PK_Chss_Question_Guid_1");

                entity.ToTable("Chss_Question_Guid");

                entity.Property(e => e.GuidId)
                    .HasColumnName("Guid_Id")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SectorId).HasColumnName("Sector_id");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ChssQuestionGuid)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Question_Guid_Chss_Module");

                entity.HasOne(d => d.Sector)
                    .WithMany(p => p.ChssQuestionGuid)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Question_Guid_Chss_Module_Sector");
            });

            modelBuilder.Entity<ChssRegimenView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_Regimen_View");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssRxSolutionInstalled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_RX_Solution_Installed");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDesc).HasMaxLength(80);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.RxSolutionInstalled).HasColumnName("RX_Solution_Installed");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssScore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_Score");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.SparsPlusScore).HasColumnName("Spars_Plus_Score");

                entity.Property(e => e.SparsScore).HasColumnName("Spars_Score");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssScore)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Score_A_Facilities");
            });

            modelBuilder.Entity<ChssSmcSlmOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_SMC_SLM_Order_View");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ChssStockManagement>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Stock_Management");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.CalculatedAmc).HasColumnName("Calculated_AMC");

                entity.Property(e => e.CardAvailability).HasColumnName("Card_Availability");

                entity.Property(e => e.CorrectCardFill).HasColumnName("Correct_Card_Fill");

                entity.Property(e => e.CorrectStockBookUse).HasColumnName("Correct_Stock_Book_Use");

                entity.Property(e => e.ExpiredQuantity).HasColumnName("Expired_Quantity");

                entity.Property(e => e.ItemAvailable).HasColumnName("Item_Available");

                entity.Property(e => e.MonthlyPhysicalCount).HasColumnName("Monthly_Physical_Count");

                entity.Property(e => e.OutOfStockDays).HasColumnName("Out_Of_Stock_Days");

                entity.Property(e => e.PharmacyQuantity).HasColumnName("Pharmacy_Quantity");

                entity.Property(e => e.QuantityIssued).HasColumnName("Quantity_Issued");

                entity.Property(e => e.StockBookAvailability).HasColumnName("Stock_Book_Availability");

                entity.Property(e => e.StockCardBalance).HasColumnName("Stock_Card_Balance");

                entity.Property(e => e.StoreQuantity).HasColumnName("Store_Quantity");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssStockManagement)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Stock_Management_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssStockManagement)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Stock_Management_A_Product");
            });

            modelBuilder.Entity<ChssStorageCondition>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Storage_Condition");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssStorageCondition)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Storage_Condition_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssStorageCondition)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Storage_Condition_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssStoragePractice>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Storage_Practice");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssStoragePractice)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Storage_Practice_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssStoragePractice)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Storage_Practice_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssStorageSystem>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_storage_System");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssStorageSystem)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_storage_System_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssStorageSystem)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_storage_System_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssStoreCleanliness>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Store_Cleanliness");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssStoreCleanliness)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Store_Cleanliness_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssStoreCleanliness)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Store_Cleanliness_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssSupervised>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.FacilityCode, e.DateOfVisit });

                entity.ToTable("Chss_Supervised");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.IsTrained)
                    .HasColumnName("Is_Trained")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Profession).HasMaxLength(80);
            });

            modelBuilder.Entity<ChssSupervisor>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.FacilityCode, e.DateOfVisit, e.SupervisionType });

                entity.ToTable("Chss_Supervisor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SupervisionType).HasColumnName("Supervision_Type");

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(80);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssSupervisor)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Supervisor_A_Facilities");

                entity.HasOne(d => d.SupervisionTypeNavigation)
                    .WithMany(p => p.ChssSupervisor)
                    .HasForeignKey(d => d.SupervisionType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Supervisor_Chss_Supervisor_Type");
            });

            modelBuilder.Entity<ChssSupervisorType>(entity =>
            {
                entity.HasKey(e => e.SupervisorType);

                entity.ToTable("Chss_Supervisor_Type");

                entity.Property(e => e.SupervisorType)
                    .HasColumnName("Supervisor_Type")
                    .ValueGeneratedNever();

                entity.Property(e => e.SupervisorDesc)
                    .HasColumnName("Supervisor_Desc")
                    .HasMaxLength(15)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ChssSync>(entity =>
            {
                entity.HasKey(e => new { e.Facilitycode, e.DateOfVisit });

                entity.ToTable("Chss_Sync");

                entity.Property(e => e.Facilitycode).HasColumnName("facilitycode");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.SyncDate)
                    .HasColumnName("Sync_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FacilitycodeNavigation)
                    .WithMany(p => p.ChssSync)
                    .HasForeignKey(d => d.Facilitycode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Sync_A_Facilities");
            });

            modelBuilder.Entity<ChssTraceabilityFacilityStoreToArtDispensingUnit>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Traceability_Facility_Store_To_ART_Dispensing_Unit");

                entity.HasIndex(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode })
                    .HasName("IX_Chss_Traceability_Facility_Store_To_ART_Dispensing_Unit")
                    .IsUnique();

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("Issue_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(80);

                entity.Property(e => e.QuantityIssued).HasColumnName("Quantity_Issued");

                entity.Property(e => e.StockCardIssueDate)
                    .HasColumnName("Stock_Card_Issue_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockCardQuantityIssued).HasColumnName("Stock_Card_Quantity_Issued");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssTraceabilityFacilityStoreToArtDispensingUnit)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Facility_Store_To_ART_Dispensing_Unit_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssTraceabilityFacilityStoreToArtDispensingUnit)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Facility_Store_To_ART_Dispensing_Unit_A_Product");
            });

            modelBuilder.Entity<ChssTraceabilityIssuedToPatients>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Traceability_Issued_To_Patients");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssTraceabilityIssuedToPatients)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Issued_To_Patients_A_Facilities");
            });

            modelBuilder.Entity<ChssTraceabilityRequisitioningSystem>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.GuidId });

                entity.ToTable("Chss_Traceability_Requisitioning_System");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssTraceabilityRequisitioningSystem)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Requisitioning_System_A_Facilities");

                entity.HasOne(d => d.Guid)
                    .WithMany(p => p.ChssTraceabilityRequisitioningSystem)
                    .HasForeignKey(d => d.GuidId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Requisitioning_System_Chss_Question_Guid");
            });

            modelBuilder.Entity<ChssTraceabilitySpecialisation>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ClassificationCode });

                entity.ToTable("Chss_Traceability_Specialisation");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.HasOne(d => d.ClassificationCodeNavigation)
                    .WithMany(p => p.ChssTraceabilitySpecialisation)
                    .HasForeignKey(d => d.ClassificationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Specialisation_Chss_Traceability_Specialization_Classification");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssTraceabilitySpecialisation)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Specialisation_A_Facilities");
            });

            modelBuilder.Entity<ChssTraceabilitySpecialisationView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_Traceability_Specialisation_View");

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");
            });

            modelBuilder.Entity<ChssTraceabilitySpecializationClassification>(entity =>
            {
                entity.HasKey(e => e.ClassificationCode);

                entity.ToTable("Chss_Traceability_Specialization_Classification");

                entity.Property(e => e.ClassificationCode)
                    .HasColumnName("Classification_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<ChssTraceabilitySupplierToFacilityStore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("Chss_Traceability_Supplier_To_Facility_Store");

                entity.HasIndex(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode })
                    .HasName("IX_Chss_Traceability_Supplier_To_Facility_Store")
                    .IsUnique();

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ReceivedStockCardNoteBatch)
                    .HasColumnName("Received_Stock_Card_Note_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.ReceivedStockCardQuantity).HasColumnName("Received_Stock_Card_Quantity");

                entity.Property(e => e.RecentDeliveryNoteBatch)
                    .HasColumnName("Recent_Delivery_Note_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.RecentDeliveryNoteQuantity).HasColumnName("Recent_Delivery_Note_Quantity");

                entity.Property(e => e.RespondingGoodsReceivedBatch)
                    .HasColumnName("Responding_Goods_Received_Batch")
                    .HasMaxLength(80);

                entity.Property(e => e.RespondingGoodsReceivedNoteQuantity).HasColumnName("Responding_Goods_Received_Note_Quantity");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.ChssTraceabilitySupplierToFacilityStore)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Supplier_To_Facility_Store_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ChssTraceabilitySupplierToFacilityStore)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chss_Traceability_Supplier_To_Facility_Store_A_Product");
            });

            modelBuilder.Entity<ChssTrackingPlaces>(entity =>
            {
                entity.HasKey(e => e.PlaceCode);

                entity.ToTable("Chss_Tracking_Places");

                entity.Property(e => e.PlaceCode)
                    .HasColumnName("Place_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PlaceDescription)
                    .HasColumnName("Place_Description")
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<ChssVSavedArtPatientAvailabilty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_V_Saved_ART_Patient_Availabilty");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SectorId).HasColumnName("Sector_id");
            });

            modelBuilder.Entity<ChssVSupervised>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_V_Supervised");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Profession).HasMaxLength(80);
            });

            modelBuilder.Entity<ChssVSupervisor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_V_Supervisor");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Gender)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Title).HasMaxLength(80);
            });

            modelBuilder.Entity<ChssViewFacilities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_View_Facilities");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RegionDescription)
                    .HasColumnName("Region_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionId)
                    .HasColumnName("Region_Id")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ChssViewGuidQuestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_View_Guid_Question");

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ModuleDescription)
                    .HasColumnName("Module_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("Module_Id");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SectorDescription)
                    .HasColumnName("Sector_Description")
                    .HasMaxLength(400);

                entity.Property(e => e.SectorId).HasColumnName("Sector_id");
            });

            modelBuilder.Entity<ChssViewQuestionClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_View_Question_Classification");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_Code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("Category_Desc")
                    .HasMaxLength(300);

                entity.Property(e => e.ClassificationCode).HasColumnName("Classification_Code");

                entity.Property(e => e.GuidId).HasColumnName("Guid_id");

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SectorId).HasColumnName("Sector_id");
            });

            modelBuilder.Entity<ChssViralLoadOrderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Chss_ViralLoad_Order_View");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DistAssessment>(entity =>
            {
                entity.HasKey(e => e.AssessmentCode)
                    .HasName("PK_dist_assessment_1");

                entity.ToTable("dist_assessment");

                entity.Property(e => e.AssessmentCode)
                    .HasColumnName("assessment_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssessmentCategoryCode).HasColumnName("assessment_category_code");

                entity.Property(e => e.AssessmentDesc)
                    .HasColumnName("assessment_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.AssessmentCategoryCodeNavigation)
                    .WithMany(p => p.DistAssessment)
                    .HasForeignKey(d => d.AssessmentCategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_assessment_dist_assessment_category");
            });

            modelBuilder.Entity<DistAssessmentCategory>(entity =>
            {
                entity.HasKey(e => e.AssessmentCategoryCode);

                entity.ToTable("dist_assessment_category");

                entity.Property(e => e.AssessmentCategoryCode)
                    .HasColumnName("assessment_category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssessmentCategoryDesc)
                    .HasColumnName("assessment_category_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistAssessmentResult>(entity =>
            {
                entity.HasKey(e => new { e.DateOfAssessment, e.DriverPermitNo, e.AssessmentCode });

                entity.ToTable("dist_assessment_result");

                entity.Property(e => e.DateOfAssessment)
                    .HasColumnName("date_of_assessment")
                    .HasColumnType("datetime");

                entity.Property(e => e.DriverPermitNo)
                    .HasColumnName("driver_permit_no")
                    .HasMaxLength(150);

                entity.Property(e => e.AssessmentCode).HasColumnName("assessment_code");

                entity.Property(e => e.AssessmentResult).HasColumnName("assessment_result");

                entity.Property(e => e.AssessorObservations)
                    .HasColumnName("assessor_observations")
                    .HasMaxLength(200);

                entity.HasOne(d => d.AssessmentCodeNavigation)
                    .WithMany(p => p.DistAssessmentResult)
                    .HasForeignKey(d => d.AssessmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_assessment_result_dist_assessment");

                entity.HasOne(d => d.DriverPermitNoNavigation)
                    .WithMany(p => p.DistAssessmentResult)
                    .HasForeignKey(d => d.DriverPermitNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_assessment_result_dist_operator_personal");

                entity.HasOne(d => d.D)
                    .WithMany(p => p.DistAssessmentResult)
                    .HasForeignKey(d => new { d.DateOfAssessment, d.DriverPermitNo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_assessment_result_dist_assessment_result_header");
            });

            modelBuilder.Entity<DistAssessmentResultHeader>(entity =>
            {
                entity.HasKey(e => new { e.DateOfAssessment, e.DriverPermitNo });

                entity.ToTable("dist_assessment_result_header");

                entity.Property(e => e.DateOfAssessment)
                    .HasColumnName("date_of_assessment")
                    .HasColumnType("datetime");

                entity.Property(e => e.DriverPermitNo)
                    .HasColumnName("driver_permit_no")
                    .HasMaxLength(150);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Assessor)
                    .HasColumnName("assessor")
                    .HasMaxLength(250);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.VehicleType).HasColumnName("vehicle_type");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.DistAssessmentResultHeader)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_dist_assessment_result_header_dist_location");

                entity.HasOne(d => d.VehicleTypeNavigation)
                    .WithMany(p => p.DistAssessmentResultHeader)
                    .HasForeignKey(d => d.VehicleType)
                    .HasConstraintName("FK_dist_assessment_result_header_dist_vehicle_type");
            });

            modelBuilder.Entity<DistDistibutionSchedule>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DepartureDate })
                    .HasName("PK_dist_distibution_schedule_1");

                entity.ToTable("dist_distibution_schedule");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DriverPermitNumber)
                    .IsRequired()
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(4000);

                entity.Property(e => e.StatusDeliveyId).HasColumnName("status_delivey_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TotalNoCartons).HasColumnName("total_no_cartons");

                entity.Property(e => e.TotalWeightCartons).HasColumnName("total_weight_cartons");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.HasOne(d => d.DriverPermitNumberNavigation)
                    .WithMany(p => p.DistDistibutionSchedule)
                    .HasForeignKey(d => d.DriverPermitNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_distibution_schedule_dist_operator_permit");
            });

            modelBuilder.Entity<DistDistibutionScheduleMaulStaff>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DepartureDate, e.CpCode });

                entity.ToTable("dist_distibution_schedule_maul_staff");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.HasOne(d => d.DistDistibutionSchedule)
                    .WithMany(p => p.DistDistibutionScheduleMaulStaff)
                    .HasForeignKey(d => new { d.FacilityCode, d.DepartureDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_distibution_schedule_maul_staff_dist_distibution_schedule");
            });

            modelBuilder.Entity<DistDsStatus>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("dist_ds_status");

                entity.Property(e => e.StatusId)
                    .HasColumnName("status_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistFuelType>(entity =>
            {
                entity.HasKey(e => e.FuelCode);

                entity.ToTable("dist_fuel_type");

                entity.Property(e => e.FuelCode)
                    .HasColumnName("fuel_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.FuelType)
                    .HasColumnName("fuel_type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistIncidentReport>(entity =>
            {
                entity.HasKey(e => new { e.OperatorPermit, e.VehicleRegistartion, e.DateOfIncident })
                    .HasName("PK_dist_incident_report_1");

                entity.ToTable("dist_incident_report");

                entity.Property(e => e.OperatorPermit)
                    .HasColumnName("operator_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.VehicleRegistartion)
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfIncident)
                    .HasColumnName("date_of_incident")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CompletedBy)
                    .HasColumnName("completed_by")
                    .HasMaxLength(150);

                entity.Property(e => e.DamageOrgVehicle)
                    .HasColumnName("damage_org_vehicle")
                    .HasMaxLength(500);

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecieved)
                    .HasColumnName("date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.DiagramCrash)
                    .HasColumnName("diagram_crash")
                    .HasColumnType("image");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.InjuryOperator)
                    .HasColumnName("injury_operator")
                    .HasMaxLength(500);

                entity.Property(e => e.InjuryOtherParty)
                    .HasColumnName("injury_other_party")
                    .HasMaxLength(500);

                entity.Property(e => e.LocationOfIncident)
                    .HasColumnName("location_of_incident")
                    .HasMaxLength(150);

                entity.Property(e => e.NoOfPeopleInjured).HasColumnName("no_of_people_injured");

                entity.Property(e => e.NoOfVehiclesInvolved).HasColumnName("no_of_vehicles_involved");

                entity.Property(e => e.NoOfWitnesses).HasColumnName("no_of_witnesses");

                entity.Property(e => e.OtherObjects)
                    .HasColumnName("other_objects")
                    .HasMaxLength(500);

                entity.Property(e => e.PoliceCaseNo)
                    .HasColumnName("police_case_no")
                    .HasMaxLength(150);

                entity.Property(e => e.PoliceOfficer)
                    .HasColumnName("police_officer")
                    .HasMaxLength(250);

                entity.Property(e => e.TimeOfIncident)
                    .HasColumnName("time_of_incident")
                    .HasColumnType("datetime");

                entity.Property(e => e.TripAuthorityNo)
                    .IsRequired()
                    .HasColumnName("trip_authority_no")
                    .HasMaxLength(50);

                entity.HasOne(d => d.OperatorPermitNavigation)
                    .WithMany(p => p.DistIncidentReport)
                    .HasForeignKey(d => d.OperatorPermit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_incident_report_dist_operator_permit");

                entity.HasOne(d => d.VehicleRegistartionNavigation)
                    .WithMany(p => p.DistIncidentReport)
                    .HasForeignKey(d => d.VehicleRegistartion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_incident_report_dist_vehicle_inventory");
            });

            modelBuilder.Entity<DistIncidentReportOtherVehicle>(entity =>
            {
                entity.HasKey(e => new { e.OperatorPermit, e.DateOfIncident, e.VehicleRegistartion, e.OtherVehicleReg })
                    .HasName("PK_dist_incident_report_other_vehicle_1");

                entity.ToTable("dist_incident_report_other_vehicle");

                entity.Property(e => e.OperatorPermit)
                    .HasColumnName("operator_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.DateOfIncident)
                    .HasColumnName("date_of_incident")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistartion)
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.OtherVehicleReg)
                    .HasColumnName("other_vehicle_reg")
                    .HasMaxLength(50);

                entity.Property(e => e.InsuranceCompany).HasColumnName("insurance_company");

                entity.Property(e => e.OperatorName)
                    .HasColumnName("operator_name")
                    .HasMaxLength(150);

                entity.Property(e => e.OwnerContactName)
                    .HasColumnName("owner_contact_name")
                    .HasMaxLength(150);

                entity.Property(e => e.OwnerContactTel).HasColumnName("owner_contact_tel");

                entity.Property(e => e.OwnerName)
                    .HasColumnName("owner_name")
                    .HasMaxLength(150);

                entity.Property(e => e.OwnerPermit)
                    .HasColumnName("owner_permit")
                    .HasMaxLength(50);

                entity.HasOne(d => d.VehicleRegistartionNavigation)
                    .WithMany(p => p.DistIncidentReportOtherVehicle)
                    .HasForeignKey(d => d.VehicleRegistartion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_incident_report_other_vehicle_dist_vehicle_inventory");

                entity.HasOne(d => d.DistIncidentReport)
                    .WithMany(p => p.DistIncidentReportOtherVehicle)
                    .HasForeignKey(d => new { d.OperatorPermit, d.VehicleRegistartion, d.DateOfIncident })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_incident_report_other_vehicle_dist_incident_report");
            });

            modelBuilder.Entity<DistIncidentReportWitness>(entity =>
            {
                entity.HasKey(e => e.WitnessCode);

                entity.ToTable("dist_incident_report_witness");

                entity.Property(e => e.WitnessCode).HasColumnName("witness_code");

                entity.Property(e => e.DateOfIncident)
                    .HasColumnName("date_of_incident")
                    .HasColumnType("datetime");

                entity.Property(e => e.OperatorPermit)
                    .IsRequired()
                    .HasColumnName("operator_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.VehicleRegistartion)
                    .IsRequired()
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.WitnessAddress)
                    .HasColumnName("witness_address")
                    .HasMaxLength(50);

                entity.Property(e => e.WitnessContact).HasColumnName("witness_contact");

                entity.Property(e => e.WitnessName)
                    .HasColumnName("witness_name")
                    .HasMaxLength(150);

                entity.HasOne(d => d.DistIncidentReport)
                    .WithMany(p => p.DistIncidentReportWitness)
                    .HasForeignKey(d => new { d.OperatorPermit, d.VehicleRegistartion, d.DateOfIncident })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_incident_report_witness_dist_incident_report");
            });

            modelBuilder.Entity<DistJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleCode);

                entity.ToTable("dist_job_title");

                entity.Property(e => e.JobTitleCode)
                    .HasColumnName("job_title_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistLocation>(entity =>
            {
                entity.HasKey(e => e.LocationCode)
                    .HasName("PK_dist_job_location");

                entity.ToTable("dist_location");

                entity.Property(e => e.LocationCode)
                    .HasColumnName("location_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<DistLocationOther>(entity =>
            {
                entity.HasKey(e => e.LocationCode)
                    .HasName("PK_dis_location_other");

                entity.ToTable("dist_location_other");

                entity.Property(e => e.LocationCode)
                    .HasColumnName("location_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LocationDecs)
                    .HasColumnName("location_decs")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<DistLogPurpose>(entity =>
            {
                entity.HasKey(e => e.PurposeCode);

                entity.ToTable("dist_log_purpose");

                entity.Property(e => e.PurposeCode)
                    .HasColumnName("purpose_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PurposeDesc)
                    .HasColumnName("purpose_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistLogbook>(entity =>
            {
                entity.HasKey(e => new { e.VehicleRegistration, e.DepartureDate, e.DriverPermit, e.TimeStart });

                entity.ToTable("dist_logbook");

                entity.Property(e => e.VehicleRegistration)
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DriverPermit)
                    .HasColumnName("driver_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.TimeStart)
                    .HasColumnName("time_start")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DestinationFacility).HasColumnName("destination_facility");

                entity.Property(e => e.DestinationOther).HasColumnName("destination_other");

                entity.Property(e => e.DistanceTravelled).HasColumnName("distance_travelled");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("fuel_added");

                entity.Property(e => e.FuelUnitCost).HasColumnName("fuel_unit_cost");

                entity.Property(e => e.OrdometerArrival).HasColumnName("ordometer_arrival");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.Passengers)
                    .HasColumnName("passengers")
                    .HasMaxLength(500);

                entity.Property(e => e.Remarks).HasColumnName("remarks");

                entity.Property(e => e.SourceFacility).HasColumnName("source_facility");

                entity.Property(e => e.SourceOther).HasColumnName("source_other");

                entity.Property(e => e.TimeArrival)
                    .HasColumnName("time_arrival")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.DestinationFacilityNavigation)
                    .WithMany(p => p.DistLogbookDestinationFacilityNavigation)
                    .HasForeignKey(d => d.DestinationFacility)
                    .HasConstraintName("FK_dist_logbook_A_Facilities1");

                entity.HasOne(d => d.DriverPermitNavigation)
                    .WithMany(p => p.DistLogbook)
                    .HasForeignKey(d => d.DriverPermit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_logbook_dist_operator_permit");

                entity.HasOne(d => d.SourceFacilityNavigation)
                    .WithMany(p => p.DistLogbookSourceFacilityNavigation)
                    .HasForeignKey(d => d.SourceFacility)
                    .HasConstraintName("FK_dist_logbook_A_Facilities");

                entity.HasOne(d => d.VehicleRegistrationNavigation)
                    .WithMany(p => p.DistLogbook)
                    .HasForeignKey(d => d.VehicleRegistration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_logbook_dist_vehicle_inventory");
            });

            modelBuilder.Entity<DistOperatorAccident>(entity =>
            {
                entity.HasKey(e => new { e.DriverPermitNumber, e.DateOfAccident });

                entity.ToTable("dist_operator_accident");

                entity.Property(e => e.DriverPermitNumber)
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.DateOfAccident)
                    .HasColumnName("date_of_accident")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionTaken)
                    .HasColumnName("action_taken")
                    .HasMaxLength(500);

                entity.Property(e => e.DamageDeptVehicle)
                    .HasColumnName("damage_dept_vehicle")
                    .HasMaxLength(500);

                entity.Property(e => e.DamageOtherParty)
                    .HasColumnName("damage_other_party")
                    .HasMaxLength(500);

                entity.Property(e => e.InjuryOperator)
                    .HasColumnName("injury_operator")
                    .HasMaxLength(500);

                entity.Property(e => e.InjuryOtherParty)
                    .HasColumnName("injury_other_party")
                    .HasMaxLength(500);

                entity.HasOne(d => d.DriverPermitNumberNavigation)
                    .WithMany(p => p.DistOperatorAccident)
                    .HasForeignKey(d => d.DriverPermitNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_operator_accident_dist_operator_personal");
            });

            modelBuilder.Entity<DistOperatorPermit>(entity =>
            {
                entity.HasKey(e => e.DriverPermitNumber);

                entity.ToTable("dist_operator_permit");

                entity.Property(e => e.DriverPermitNumber)
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.OperatorId)
                    .HasColumnName("operator_id")
                    .HasMaxLength(150);

                entity.Property(e => e.PermitCategory).HasColumnName("permit_category");

                entity.Property(e => e.PermitDateOfIssue)
                    .HasColumnName("permit_date_of_issue")
                    .HasColumnType("datetime");

                entity.Property(e => e.PermitExpiryDate)
                    .HasColumnName("permit_expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ValidPermit).HasColumnName("valid_permit");

                entity.HasOne(d => d.PermitCategoryNavigation)
                    .WithMany(p => p.DistOperatorPermit)
                    .HasForeignKey(d => d.PermitCategory)
                    .HasConstraintName("FK_dist_operator_permit_dist_permit_category");
            });

            modelBuilder.Entity<DistOperatorPersonal>(entity =>
            {
                entity.HasKey(e => e.OperatorId);

                entity.ToTable("dist_operator_personal");

                entity.Property(e => e.OperatorId)
                    .HasColumnName("operator_id")
                    .HasMaxLength(150);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(50);

                entity.Property(e => e.DateEnteredService)
                    .HasColumnName("date_entered_service")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnName("date_of_birth")
                    .HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Endorsement).HasMaxLength(500);

                entity.Property(e => e.JobLocation).HasColumnName("job_location");

                entity.Property(e => e.JobTitle).HasColumnName("job_title");

                entity.Property(e => e.MedicalCoverBenefits)
                    .HasColumnName("medical_cover_benefits")
                    .HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.NextOfKin)
                    .HasColumnName("next_of_kin")
                    .HasMaxLength(250);

                entity.Property(e => e.PermitCategory).HasColumnName("permit_category");

                entity.Property(e => e.PermitDateOfIssue)
                    .HasColumnName("permit_date_of_issue")
                    .HasColumnType("datetime");

                entity.Property(e => e.PermitExpiryDate)
                    .HasColumnName("permit_expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Residence)
                    .HasColumnName("residence")
                    .HasMaxLength(150);

                entity.Property(e => e.StaffNumber)
                    .HasColumnName("staff_number")
                    .HasMaxLength(50);

                entity.Property(e => e.Telephone).HasColumnName("telephone");

                entity.HasOne(d => d.JobLocationNavigation)
                    .WithMany(p => p.DistOperatorPersonal)
                    .HasForeignKey(d => d.JobLocation)
                    .HasConstraintName("FK_dist_operator_personal_dist_location");

                entity.HasOne(d => d.JobTitleNavigation)
                    .WithMany(p => p.DistOperatorPersonal)
                    .HasForeignKey(d => d.JobTitle)
                    .HasConstraintName("FK_dist_operator_personal_dist_job_title");

                entity.HasOne(d => d.PermitCategoryNavigation)
                    .WithMany(p => p.DistOperatorPersonal)
                    .HasForeignKey(d => d.PermitCategory)
                    .HasConstraintName("FK_dist_operator_personal_dist_permit_category");
            });

            modelBuilder.Entity<DistOperatorTraining>(entity =>
            {
                entity.HasKey(e => new { e.OperatorId, e.DateOfTarining });

                entity.ToTable("dist_operator_training");

                entity.Property(e => e.OperatorId)
                    .HasColumnName("operator_id")
                    .HasMaxLength(150);

                entity.Property(e => e.DateOfTarining)
                    .HasColumnName("date_of_tarining")
                    .HasColumnType("datetime");

                entity.Property(e => e.CourseDescription)
                    .HasColumnName("course_description")
                    .HasMaxLength(250);

                entity.Property(e => e.Result)
                    .HasColumnName("result")
                    .HasMaxLength(250);

                entity.HasOne(d => d.Operator)
                    .WithMany(p => p.DistOperatorTraining)
                    .HasForeignKey(d => d.OperatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_operator_training_dist_operator_personal");
            });

            modelBuilder.Entity<DistPackingList>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.PostingDate, e.DrugCode, e.BatchNo });

                entity.ToTable("dist_packing_list");

                entity.Property(e => e.PostingDate)
                    .HasColumnName("Posting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("Batch_No")
                    .HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnName("Line_Total");

                entity.Property(e => e.LsatPurchasePrice).HasColumnName("Lsat_Purchase_Price");
            });

            modelBuilder.Entity<DistPermitCategory>(entity =>
            {
                entity.HasKey(e => e.PermitTypeCode);

                entity.ToTable("dist_permit_category");

                entity.Property(e => e.PermitTypeCode)
                    .HasColumnName("permit_type_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PermitDescription)
                    .HasColumnName("permit_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<DistServiceStation>(entity =>
            {
                entity.HasKey(e => e.StationCode);

                entity.ToTable("dist_service_station");

                entity.Property(e => e.StationCode)
                    .HasColumnName("station_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SeviceStation)
                    .HasColumnName("sevice_station")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<DistStatusDelivey>(entity =>
            {
                entity.HasKey(e => e.StatusDeliveyId);

                entity.ToTable("dist_status_delivey");

                entity.Property(e => e.StatusDeliveyId)
                    .HasColumnName("status_delivey_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDelivey)
                    .HasColumnName("status_delivey")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleAuthorization>(entity =>
            {
                entity.HasKey(e => new { e.OperatorPermit, e.DateOfAuthorization, e.VehicleRegistartion });

                entity.ToTable("dist_vehicle_authorization");

                entity.Property(e => e.OperatorPermit)
                    .HasColumnName("operator_permit")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfAuthorization)
                    .HasColumnName("date_of_authorization")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistartion)
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.AdministationManager).HasColumnName("administation_manager");

                entity.Property(e => e.Destination).HasColumnName("destination");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LineManager).HasColumnName("line_manager");

                entity.Property(e => e.PurposeOfTrip)
                    .HasColumnName("purpose_of_trip")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.VehicleRegistartionNavigation)
                    .WithMany(p => p.DistVehicleAuthorization)
                    .HasForeignKey(d => d.VehicleRegistartion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_authorization_dist_vehicle_inventory");
            });

            modelBuilder.Entity<DistVehicleCheckDefectReport>(entity =>
            {
                entity.HasKey(e => new { e.DateOfAssessment, e.VehicleRegistration, e.OperatorPermit, e.StatusCode });

                entity.ToTable("dist_vehicle_check_defect_report");

                entity.Property(e => e.DateOfAssessment)
                    .HasColumnName("date_of_assessment")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistration)
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.OperatorPermit)
                    .HasColumnName("operator_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.StatusCode).HasColumnName("status_code");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(500);

                entity.Property(e => e.Result).HasColumnName("result");

                entity.HasOne(d => d.OperatorPermitNavigation)
                    .WithMany(p => p.DistVehicleCheckDefectReport)
                    .HasForeignKey(d => d.OperatorPermit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_defect_report_dist_operator_personal");

                entity.HasOne(d => d.StatusCodeNavigation)
                    .WithMany(p => p.DistVehicleCheckDefectReport)
                    .HasForeignKey(d => d.StatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_defect_report_dist_vehicle_check_status");

                entity.HasOne(d => d.VehicleRegistrationNavigation)
                    .WithMany(p => p.DistVehicleCheckDefectReport)
                    .HasForeignKey(d => d.VehicleRegistration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_defect_report_dist_vehicle_inventory");

                entity.HasOne(d => d.DistVehicleCheckRecommendation)
                    .WithMany(p => p.DistVehicleCheckDefectReport)
                    .HasForeignKey(d => new { d.DateOfAssessment, d.VehicleRegistration, d.OperatorPermit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_defect_report_dist_vehicle_check_recommendation");
            });

            modelBuilder.Entity<DistVehicleCheckParticular>(entity =>
            {
                entity.HasKey(e => e.ParticularCode);

                entity.ToTable("dist_vehicle_check_particular");

                entity.Property(e => e.ParticularCode).HasColumnName("particular_code");

                entity.Property(e => e.ParticularDesc)
                    .HasColumnName("particular_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleCheckRecommendation>(entity =>
            {
                entity.HasKey(e => new { e.DateOfAssessment, e.VehicleRegistration, e.OperatorPermit });

                entity.ToTable("dist_vehicle_check_recommendation");

                entity.Property(e => e.DateOfAssessment)
                    .HasColumnName("date_of_assessment")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistration)
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.OperatorPermit)
                    .HasColumnName("operator_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.AdditionalRemarks)
                    .HasColumnName("additional_remarks")
                    .HasMaxLength(500);

                entity.Property(e => e.AssessingOfficer)
                    .HasColumnName("assessing_officer")
                    .HasMaxLength(150);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.IsVehicleFitForTrip).HasColumnName("is_vehicle_fit_for_trip");

                entity.Property(e => e.VehicleType).HasColumnName("vehicle_type");

                entity.HasOne(d => d.OperatorPermitNavigation)
                    .WithMany(p => p.DistVehicleCheckRecommendation)
                    .HasForeignKey(d => d.OperatorPermit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_recommendation_dist_operator_personal");

                entity.HasOne(d => d.VehicleRegistrationNavigation)
                    .WithMany(p => p.DistVehicleCheckRecommendation)
                    .HasForeignKey(d => d.VehicleRegistration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_recommendation_dist_vehicle_inventory");
            });

            modelBuilder.Entity<DistVehicleCheckStatus>(entity =>
            {
                entity.HasKey(e => e.StatusCode);

                entity.ToTable("dist_vehicle_check_status");

                entity.Property(e => e.StatusCode)
                    .HasColumnName("status_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ParticularCode).HasColumnName("particular_code");

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(250);

                entity.HasOne(d => d.ParticularCodeNavigation)
                    .WithMany(p => p.DistVehicleCheckStatus)
                    .HasForeignKey(d => d.ParticularCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_check_status_dist_vehicle_check_particular");
            });

            modelBuilder.Entity<DistVehicleClassification>(entity =>
            {
                entity.HasKey(e => e.VehicleClassificationId);

                entity.ToTable("dist_vehicle_classification");

                entity.Property(e => e.VehicleClassificationId)
                    .HasColumnName("vehicle_classification_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.VehicleClassification)
                    .HasColumnName("vehicle_classification")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleCondition>(entity =>
            {
                entity.HasKey(e => e.ConditionCode);

                entity.ToTable("dist_vehicle_condition");

                entity.Property(e => e.ConditionCode)
                    .HasColumnName("condition_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Condition)
                    .HasColumnName("condition")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<DistVehicleInventory>(entity =>
            {
                entity.HasKey(e => e.Registration);

                entity.ToTable("dist_vehicle_inventory");

                entity.Property(e => e.Registration)
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ChassisNo)
                    .HasColumnName("chassis_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.DateRecieved)
                    .HasColumnName("date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EngineNo)
                    .HasColumnName("engine_no")
                    .HasMaxLength(50);

                entity.Property(e => e.EngineSize)
                    .HasColumnName("engine_size")
                    .HasMaxLength(50);

                entity.Property(e => e.FuelType).HasColumnName("fuel_type");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnName("invoice_number")
                    .HasMaxLength(50);

                entity.Property(e => e.LoadCapacity).HasColumnName("load_capacity");

                entity.Property(e => e.Make).HasColumnName("make");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.Property(e => e.PassengerCapacity).HasColumnName("passenger_capacity");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasMaxLength(150);

                entity.Property(e => e.VehicleClassification).HasColumnName("vehicle_classification");

                entity.Property(e => e.Year).HasColumnName("year");

                entity.HasOne(d => d.ColorNavigation)
                    .WithMany(p => p.DistVehicleInventory)
                    .HasForeignKey(d => d.Color)
                    .HasConstraintName("FK_dist_vehicle_inventory_A_colour");

                entity.HasOne(d => d.FuelTypeNavigation)
                    .WithMany(p => p.DistVehicleInventory)
                    .HasForeignKey(d => d.FuelType)
                    .HasConstraintName("FK_dist_vehicle_inventory_dist_fuel_type");

                entity.HasOne(d => d.MakeNavigation)
                    .WithMany(p => p.DistVehicleInventory)
                    .HasForeignKey(d => d.Make)
                    .HasConstraintName("FK_dist_vehicle_inventory_dist_vehicle_make");

                entity.HasOne(d => d.ModelNavigation)
                    .WithMany(p => p.DistVehicleInventory)
                    .HasForeignKey(d => d.Model)
                    .HasConstraintName("FK_dist_vehicle_inventory_dist_vehicle_model");
            });

            modelBuilder.Entity<DistVehicleInventoryTracking>(entity =>
            {
                entity.HasKey(e => new { e.Registration, e.DateOfInventory });

                entity.ToTable("dist_vehicle_inventory_tracking");

                entity.Property(e => e.Registration)
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfInventory)
                    .HasColumnName("date_of_inventory")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Allocated).HasColumnName("allocated");

                entity.Property(e => e.AvgDaysInUseMonth).HasColumnName("avg_days_in_use_month");

                entity.Property(e => e.Condition).HasColumnName("condition");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.MainOperator).HasColumnName("main_operator");

                entity.Property(e => e.MajorUse).HasColumnName("major_use");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SafetyEquipment).HasColumnName("safety_equipment");

                entity.Property(e => e.SecuritySystem).HasColumnName("security_system");

                entity.Property(e => e.TotalKilometers).HasColumnName("total_kilometers");

                entity.Property(e => e.TotalKmPerMonth).HasColumnName("total_km_per_month");

                entity.Property(e => e.VehicleBased).HasColumnName("vehicle_based");

                entity.HasOne(d => d.AllocatedNavigation)
                    .WithMany(p => p.DistVehicleInventoryTrackingAllocatedNavigation)
                    .HasForeignKey(d => d.Allocated)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_location");

                entity.HasOne(d => d.ConditionNavigation)
                    .WithMany(p => p.DistVehicleInventoryTracking)
                    .HasForeignKey(d => d.Condition)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_vehicle_condition");

                entity.HasOne(d => d.MainOperatorNavigation)
                    .WithMany(p => p.DistVehicleInventoryTracking)
                    .HasForeignKey(d => d.MainOperator)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_job_title");

                entity.HasOne(d => d.MajorUseNavigation)
                    .WithMany(p => p.DistVehicleInventoryTracking)
                    .HasForeignKey(d => d.MajorUse)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_vehicle_major_use");

                entity.HasOne(d => d.RegistrationNavigation)
                    .WithMany(p => p.DistVehicleInventoryTracking)
                    .HasForeignKey(d => d.Registration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_vehicle_inventory");

                entity.HasOne(d => d.SafetyEquipmentNavigation)
                    .WithMany(p => p.DistVehicleInventoryTracking)
                    .HasForeignKey(d => d.SafetyEquipment)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_vehicle_safety_equipment");

                entity.HasOne(d => d.VehicleBasedNavigation)
                    .WithMany(p => p.DistVehicleInventoryTrackingVehicleBasedNavigation)
                    .HasForeignKey(d => d.VehicleBased)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_dist_location1");
            });

            modelBuilder.Entity<DistVehicleInventoryTrackingSafetyEquipment>(entity =>
            {
                entity.HasKey(e => new { e.Registration, e.DateOfInventory, e.SafetyEquipmentId });

                entity.ToTable("dist_vehicle_inventory_tracking_safety_equipment");

                entity.Property(e => e.Registration)
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfInventory)
                    .HasColumnName("date_of_inventory")
                    .HasColumnType("datetime");

                entity.Property(e => e.SafetyEquipmentId).HasColumnName("safety_equipment_id");

                entity.HasOne(d => d.SafetyEquipment)
                    .WithMany(p => p.DistVehicleInventoryTrackingSafetyEquipment)
                    .HasForeignKey(d => d.SafetyEquipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_safety_equipment_dist_vehicle_safety_equipment");

                entity.HasOne(d => d.DistVehicleInventoryTracking)
                    .WithMany(p => p.DistVehicleInventoryTrackingSafetyEquipment)
                    .HasForeignKey(d => new { d.Registration, d.DateOfInventory })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_safety_equipment_dist_vehicle_inventory_tracking");
            });

            modelBuilder.Entity<DistVehicleInventoryTrackingSecuritySystem>(entity =>
            {
                entity.HasKey(e => new { e.Registration, e.DateOfInventory, e.SecuritySystemId });

                entity.ToTable("dist_vehicle_inventory_tracking_security_system");

                entity.Property(e => e.Registration)
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfInventory)
                    .HasColumnName("date_of_inventory")
                    .HasColumnType("datetime");

                entity.Property(e => e.SecuritySystemId).HasColumnName("security_system_id");

                entity.HasOne(d => d.SecuritySystem)
                    .WithMany(p => p.DistVehicleInventoryTrackingSecuritySystem)
                    .HasForeignKey(d => d.SecuritySystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_security_system_dist_vehicle_security_system");

                entity.HasOne(d => d.DistVehicleInventoryTracking)
                    .WithMany(p => p.DistVehicleInventoryTrackingSecuritySystem)
                    .HasForeignKey(d => new { d.Registration, d.DateOfInventory })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_inventory_tracking_security_system_dist_vehicle_inventory_tracking");
            });

            modelBuilder.Entity<DistVehicleMaintaince>(entity =>
            {
                entity.HasKey(e => new { e.Registration, e.DateRecorded });

                entity.ToTable("dist_vehicle_maintaince");

                entity.Property(e => e.Registration)
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.DateRecorded)
                    .HasColumnName("date_recorded")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CostOfParts).HasColumnName("cost_of_parts");

                entity.Property(e => e.DaysInWorkhop).HasColumnName("days_in_workhop");

                entity.Property(e => e.DriverPermit)
                    .HasColumnName("driver_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.LabourCost).HasColumnName("labour_cost");

                entity.Property(e => e.MileageBefore).HasColumnName("mileage_before");

                entity.Property(e => e.MileageNext).HasColumnName("mileage_next");

                entity.Property(e => e.ServiceStation).HasColumnName("service_station");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");

                entity.Property(e => e.WorkPerformed)
                    .HasColumnName("work_performed")
                    .HasMaxLength(500);

                entity.HasOne(d => d.DriverPermitNavigation)
                    .WithMany(p => p.DistVehicleMaintaince)
                    .HasForeignKey(d => d.DriverPermit)
                    .HasConstraintName("FK_dist_vehicle_maintaince_dist_operator_permit");

                entity.HasOne(d => d.RegistrationNavigation)
                    .WithMany(p => p.DistVehicleMaintaince)
                    .HasForeignKey(d => d.Registration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_vehicle_maintaince_dist_vehicle_inventory");

                entity.HasOne(d => d.ServiceStationNavigation)
                    .WithMany(p => p.DistVehicleMaintaince)
                    .HasForeignKey(d => d.ServiceStation)
                    .HasConstraintName("FK_dist_vehicle_maintaince_dist_service_station");
            });

            modelBuilder.Entity<DistVehicleMajorUse>(entity =>
            {
                entity.HasKey(e => e.UsageCode);

                entity.ToTable("dist_vehicle_major_use");

                entity.Property(e => e.UsageCode)
                    .HasColumnName("usage_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Usage)
                    .HasColumnName("usage")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleMake>(entity =>
            {
                entity.HasKey(e => e.MakeCode);

                entity.ToTable("dist_vehicle_make");

                entity.Property(e => e.MakeCode)
                    .HasColumnName("make_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.MakeDesc)
                    .HasColumnName("make_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleModel>(entity =>
            {
                entity.HasKey(e => e.ModelCode);

                entity.ToTable("dist_vehicle_model");

                entity.Property(e => e.ModelCode)
                    .HasColumnName("model_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModelDesc)
                    .HasColumnName("model_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistVehicleSafetyEquipment>(entity =>
            {
                entity.HasKey(e => e.EquipmentCode);

                entity.ToTable("dist_vehicle_safety_equipment");

                entity.Property(e => e.EquipmentCode)
                    .HasColumnName("equipment_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Equipment)
                    .HasColumnName("equipment")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<DistVehicleSecuritySystem>(entity =>
            {
                entity.HasKey(e => e.SecuritySystemId);

                entity.ToTable("dist_vehicle_security_system");

                entity.Property(e => e.SecuritySystemId)
                    .HasColumnName("security_system_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.SecuritySystem)
                    .HasColumnName("security_system")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<DistVehicleType>(entity =>
            {
                entity.HasKey(e => e.VehicleTypeCode);

                entity.ToTable("dist_vehicle_type");

                entity.Property(e => e.VehicleTypeCode)
                    .HasColumnName("vehicle_type_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.VehicleType)
                    .HasColumnName("vehicle_type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DistWorkingDays>(entity =>
            {
                entity.HasKey(e => new { e.YearId, e.MonthId });

                entity.ToTable("dist_working_days");

                entity.Property(e => e.YearId).HasColumnName("year_id");

                entity.Property(e => e.MonthId).HasColumnName("month_id");

                entity.Property(e => e.NoOfWorkingDays).HasColumnName("no_of_working_days");
            });

            modelBuilder.Entity<DistWorkingDaysMonth>(entity =>
            {
                entity.HasKey(e => new { e.MonthId, e.Year });

                entity.ToTable("dist_working_days_month");

                entity.Property(e => e.MonthId).HasColumnName("month_id");

                entity.Property(e => e.Year).HasColumnName("year");

                entity.Property(e => e.WorkingDays).HasColumnName("working_days");

                entity.HasOne(d => d.Month)
                    .WithMany(p => p.DistWorkingDaysMonth)
                    .HasForeignKey(d => d.MonthId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dist_working_days_month_A_Month");
            });

            modelBuilder.Entity<FileCollection>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(100);

                entity.Property(e => e.Details).HasMaxLength(256);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FileCollection)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .HasConstraintName("FK_FileCollection_fo_complaint");
            });

            modelBuilder.Entity<FileCollectionSupDoc>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(100);

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QualityIssueCode).HasColumnName("QualityIssue_code");

                entity.HasOne(d => d.QualityIssueCodeNavigation)
                    .WithMany(p => p.FileCollectionSupDoc)
                    .HasForeignKey(d => d.QualityIssueCode)
                    .HasConstraintName("FK_FileCollectionSupDoc_fo_complaint_quality_issue");
            });

            modelBuilder.Entity<FilesClientInfo>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(100);

                entity.Property(e => e.Details).HasMaxLength(256);

                entity.Property(e => e.DocCategory).HasColumnName("Doc_Category");

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<FoAActionTaken>(entity =>
            {
                entity.HasKey(e => e.ActionTakenCode);

                entity.ToTable("fo_a_action_taken");

                entity.Property(e => e.ActionTakenCode)
                    .HasColumnName("action_taken_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionTakenDesc)
                    .HasColumnName("action_taken_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FoAAuthorizedRepresentative>(entity =>
            {
                entity.HasKey(e => e.ArCode);

                entity.ToTable("fo_a_authorized_representative");

                entity.Property(e => e.ArCode)
                    .HasColumnName("AR_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuthorizedRepresentativeDesc)
                    .HasColumnName("Authorized_Representative_Desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FoACommunicationMode>(entity =>
            {
                entity.HasKey(e => e.CommModeCode);

                entity.ToTable("fo_a_communication_mode");

                entity.Property(e => e.CommModeCode)
                    .HasColumnName("comm_mode_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CommModeDesc)
                    .HasColumnName("comm_mode_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<FoAComplaintAccuteness>(entity =>
            {
                entity.HasKey(e => e.AccutenessCode);

                entity.ToTable("fo_a_complaint_accuteness");

                entity.Property(e => e.AccutenessCode)
                    .HasColumnName("accuteness_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccutenessDesc)
                    .HasColumnName("accuteness_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<FoAComplaintCategory>(entity =>
            {
                entity.HasKey(e => e.ComplaintCategoryCode);

                entity.ToTable("fo_a_complaint_category");

                entity.Property(e => e.ComplaintCategoryCode)
                    .HasColumnName("complaint_category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ComplaintCategoryDesc)
                    .HasColumnName("complaint_category_desc")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<FoADocumentsAttached>(entity =>
            {
                entity.HasKey(e => e.DocCode);

                entity.ToTable("fo_a_Documents_Attached");

                entity.Property(e => e.DocCode)
                    .HasColumnName("Doc_Code")
                    .ValueGeneratedNever();

                entity.Property(e => e.DocDescription)
                    .HasColumnName("Doc_Description")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FoADosage>(entity =>
            {
                entity.HasKey(e => e.DosageId);

                entity.ToTable("fo_a_dosage");

                entity.Property(e => e.DosageId)
                    .HasColumnName("dosage_id")
                    .HasMaxLength(5);

                entity.Property(e => e.DosageDesc)
                    .HasColumnName("dosage_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoAFilesClientInfo>(entity =>
            {
                entity.ToTable("fo_a_FilesClientInfo");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ClientInfoDesc)
                    .HasColumnName("ClientInfo_Desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FoAInvestigation>(entity =>
            {
                entity.HasKey(e => e.InvestigationCode);

                entity.ToTable("fo_a_investigation");

                entity.Property(e => e.InvestigationCode)
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.InvestigationDesc)
                    .HasColumnName("investigation_desc")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<FoAInvestigationEvidence>(entity =>
            {
                entity.ToTable("fo_a_investigation_evidence");

                entity.Property(e => e.InvestigationEvidence).HasMaxLength(500);
            });

            modelBuilder.Entity<FoAMaulService>(entity =>
            {
                entity.ToTable("fo_a_MAUL_Service");

                entity.Property(e => e.ServiceLevel).HasMaxLength(50);
            });

            modelBuilder.Entity<FoAQualityIssueIntervention>(entity =>
            {
                entity.HasKey(e => e.InterventionCode);

                entity.ToTable("fo_a_quality_issue_intervention");

                entity.Property(e => e.InterventionCode)
                    .HasColumnName("intervention_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.InterventionDesc)
                    .HasColumnName("intervention_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoAReleaseInstruction>(entity =>
            {
                entity.HasKey(e => e.RiCode);

                entity.ToTable("fo_a_release_instruction");

                entity.Property(e => e.RiCode)
                    .HasColumnName("RI_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ReleaseInstructionDesc)
                    .HasColumnName("Release_Instruction_Desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<FoASsmt>(entity =>
            {
                entity.HasKey(e => e.SsmtCode);

                entity.ToTable("fo_a_ssmt");

                entity.Property(e => e.SsmtCode)
                    .HasColumnName("ssmt_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SsmtDesc)
                    .HasColumnName("ssmt_desc")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<FoAStatus>(entity =>
            {
                entity.HasKey(e => e.StatusCode);

                entity.ToTable("fo_a_status");

                entity.Property(e => e.StatusCode)
                    .HasColumnName("status_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<FoAssigmentEmail>(entity =>
            {
                entity.HasKey(e => new { e.ERegComplaintNo, e.CpCode, e.EmailLevel });

                entity.ToTable("fo_Assigment_Email");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.EmailLevel).HasColumnName("email_level");

                entity.Property(e => e.DateOfEmail)
                    .HasColumnName("Date_of_email")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<FoCertificateReleaseFrmQuarantine>(entity =>
            {
                entity.ToTable("fo_Certificate_Release_frm_Quarantine");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AttachedOther)
                    .HasColumnName("attached_other")
                    .HasMaxLength(250);

                entity.Property(e => e.AttachedOtherDoc).HasColumnName("attached_otherDoc");

                entity.Property(e => e.AuthorizedRepresentativeCategory).HasColumnName("Authorized_Representative_Category");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CopyInvestigationReport).HasColumnName("Copy_Investigation_Report");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.DateRequest)
                    .HasColumnName("Date_request")
                    .HasColumnType("datetime");

                entity.Property(e => e.DosageForm)
                    .HasColumnName("dosage_form")
                    .HasMaxLength(5);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GoodsReturnedNote).HasColumnName("Goods_Returned_Note");

                entity.Property(e => e.GoodsReturnedNoteCommet)
                    .HasColumnName("Goods_Returned_Note_Commet")
                    .IsUnicode(false);

                entity.Property(e => e.ManufactureDate)
                    .HasColumnName("Manufacture_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(250);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductOther)
                    .HasColumnName("product_other")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(50);

                entity.Property(e => e.ReceivedBy).HasColumnName("Received_by");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("Received_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseAuthorizedDate)
                    .HasColumnName("Release_Authorized_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseAuthorizedby).HasColumnName("Release_Authorizedby");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnName("Release_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseInstruction).HasColumnName("Release_Instruction");

                entity.Property(e => e.ReleasedBy).HasColumnName("Released_By");

                entity.Property(e => e.StaffDesignation).HasColumnName("Staff_Designation");

                entity.Property(e => e.StaffEmail)
                    .HasColumnName("Staff_email")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.StaffName)
                    .HasColumnName("Staff_name")
                    .HasMaxLength(150);

                entity.Property(e => e.StaffPhone).HasColumnName("Staff_phone");

                entity.Property(e => e.SummaryOfInvestigations)
                    .HasColumnName("Summary_of_Investigations")
                    .HasMaxLength(1060);

                entity.Property(e => e.Supplier).HasMaxLength(256);

                entity.HasOne(d => d.AuthorizedRepresentativeCategoryNavigation)
                    .WithMany(p => p.FoCertificateReleaseFrmQuarantine)
                    .HasForeignKey(d => d.AuthorizedRepresentativeCategory)
                    .HasConstraintName("FK_fo_Certificate_Release_frm_Quarantine_fo_a_authorized_representative");

                entity.HasOne(d => d.CopyInvestigationReportNavigation)
                    .WithMany(p => p.FoCertificateReleaseFrmQuarantine)
                    .HasForeignKey(d => d.CopyInvestigationReport)
                    .HasConstraintName("FK_fo_Certificate_Release_frm_Quarantine_A_yes_no");

                entity.HasOne(d => d.ReleaseInstructionNavigation)
                    .WithMany(p => p.FoCertificateReleaseFrmQuarantine)
                    .HasForeignKey(d => d.ReleaseInstruction)
                    .HasConstraintName("FK_fo_Certificate_Release_frm_Quarantine_fo_a_release_instruction");
            });

            modelBuilder.Entity<FoClientFeedback>(entity =>
            {
                entity.ToTable("fo_ClientFeedback");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AnyAreasOfConcern).HasColumnName("AnyAreas_of_Concern");

                entity.Property(e => e.AreasOfConcern)
                    .HasColumnName("Areas_of_Concern")
                    .HasMaxLength(250);

                entity.Property(e => e.BetterService)
                    .HasColumnName("Better_Service")
                    .HasMaxLength(250);

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.ContactPersonDesignation).HasMaxLength(50);

                entity.Property(e => e.ContactPersonTele).HasMaxLength(50);

                entity.Property(e => e.FeedbackDate).HasColumnType("datetime");

                entity.Property(e => e.MaulServices).HasColumnName("MAUL_Services");

                entity.Property(e => e.SctoLastVist)
                    .HasColumnName("SCTO_LastVist")
                    .HasColumnType("datetime");

                entity.Property(e => e.SctoVisited).HasColumnName("SCTO_visited");

                entity.Property(e => e.SctosVisited)
                    .HasColumnName("SCTOs_visited")
                    .HasMaxLength(250);

                entity.HasOne(d => d.AnyAreasOfConcernNavigation)
                    .WithMany(p => p.FoClientFeedbackAnyAreasOfConcernNavigation)
                    .HasForeignKey(d => d.AnyAreasOfConcern)
                    .HasConstraintName("FK_fo_ClientFeedback_A_yes_no");

                entity.HasOne(d => d.ContactPersonDesgNavigation)
                    .WithMany(p => p.FoClientFeedback)
                    .HasForeignKey(d => d.ContactPersonDesg)
                    .HasConstraintName("FK_fo_ClientFeedback_fo_contact_title");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.FoClientFeedback)
                    .HasForeignKey(d => d.FacilityCode)
                    .HasConstraintName("FK_fo_ClientFeedback_A_Facilities");

                entity.HasOne(d => d.MaulServicesNavigation)
                    .WithMany(p => p.FoClientFeedback)
                    .HasForeignKey(d => d.MaulServices)
                    .HasConstraintName("FK_fo_ClientFeedback_fo_a_MAUL_Service");

                entity.HasOne(d => d.MaulServices1)
                    .WithMany(p => p.FoClientFeedbackMaulServices1)
                    .HasForeignKey(d => d.MaulServices)
                    .HasConstraintName("FK_fo_ClientFeedback_A_yes_no1");

                entity.HasOne(d => d.SctoVisitedNavigation)
                    .WithMany(p => p.FoClientFeedbackSctoVisitedNavigation)
                    .HasForeignKey(d => d.SctoVisited)
                    .HasConstraintName("FK_fo_ClientFeedback_A_yes_no2");
            });

            modelBuilder.Entity<FoComplaint>(entity =>
            {
                entity.HasKey(e => e.ERegComplaintCode);

                entity.ToTable("fo_complaint");

                entity.Property(e => e.ERegComplaintCode)
                    .HasColumnName("e_reg_complaint_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AffectedSites).HasMaxLength(256);

                entity.Property(e => e.BriefFeedbackDesc)
                    .HasColumnName("Brief_Feedback_Desc")
                    .HasMaxLength(1024);

                entity.Property(e => e.CommunicatedByLev1)
                    .HasColumnName("Communicated_By_Lev1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CommunicatedByLev1Date)
                    .HasColumnName("Communicated_By_Lev1Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev1Title)
                    .HasColumnName("Communicated_By_Lev1Title")
                    .HasMaxLength(50);

                entity.Property(e => e.CommunicatedByLev2).HasColumnName("Communicated_By_Lev2");

                entity.Property(e => e.CommunicatedByLev2Date)
                    .HasColumnName("Communicated_By_Lev2Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev2Email).HasColumnName("Communicated_By_Lev2Email");

                entity.Property(e => e.CommunicatedByLev2Title)
                    .HasColumnName("Communicated_By_Lev2Title")
                    .HasMaxLength(50);

                entity.Property(e => e.ComplainantEmail).HasMaxLength(50);

                entity.Property(e => e.ComplainantMobile).HasMaxLength(25);

                entity.Property(e => e.ComplainantName).HasMaxLength(50);

                entity.Property(e => e.ComplainantPhone).HasMaxLength(50);

                entity.Property(e => e.ComplainantTitle).HasMaxLength(50);

                entity.Property(e => e.ERegAffectedSites).HasColumnName("e_reg_affected_sites");

                entity.Property(e => e.ERegCommunicationMode).HasColumnName("e_reg_communication_mode");

                entity.Property(e => e.ERegComplaintAccuteness).HasColumnName("e_reg_complaint_accuteness");

                entity.Property(e => e.ERegComplaintCategory).HasColumnName("e_reg_complaint_category");

                entity.Property(e => e.ERegComplaintDetails)
                    .HasColumnName("e_reg_complaint_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegComplaintStatus).HasColumnName("e_reg_complaint_status");

                entity.Property(e => e.ERegComplaintTitle)
                    .HasColumnName("e_reg_complaint_Title")
                    .HasMaxLength(560);

                entity.Property(e => e.ERegContactPersonId).HasColumnName("e_reg_contact_person_id");

                entity.Property(e => e.ERegDateComplaint)
                    .HasColumnName("e_reg_date_complaint")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateResolved)
                    .HasColumnName("e_reg_date_resolved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegExpectedDateResolution)
                    .HasColumnName("e_reg_expected_date_resolution")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegMaulStaff).HasColumnName("e_reg_MAUL_Staff");

                entity.Property(e => e.ERegProductCategory).HasColumnName("e_reg_product_category");

                entity.Property(e => e.EmailLetterAttached).HasColumnName("Email_letter_attached");

                entity.Property(e => e.Feedback).HasMaxLength(500);

                entity.Property(e => e.FeedbackCommunicated).HasColumnName("Feedback_Communicated");

                entity.Property(e => e.FeedbackDate)
                    .HasColumnName("Feedback_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ip).HasColumnName("IP");

                entity.Property(e => e.IsQualityIssue).HasColumnName("is_quality_issue");

                entity.Property(e => e.Level1Assignment)
                    .HasColumnName("Level1_Assignment")
                    .HasMaxLength(50);

                entity.Property(e => e.Level1AssignmentDate)
                    .HasColumnName("Level1_Assignment_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Level1EmailSent).HasColumnName("Level1_Email_Sent");

                entity.Property(e => e.Level2Assignment)
                    .HasColumnName("Level2_Assignment")
                    .HasMaxLength(50);

                entity.Property(e => e.Level2AssignmentDate)
                    .HasColumnName("Level2_Assignment_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Level2EmailSent).HasColumnName("Level2_Email_Sent");

                entity.Property(e => e.NoFeedbackReason)
                    .HasColumnName("No_Feedback_Reason")
                    .HasMaxLength(1024);

                entity.Property(e => e.ProdSamplesProvided).HasColumnName("Prod_Samples_Provided");

                entity.Property(e => e.SupDocEvidenceRec).HasColumnName("Sup_Doc_Evidence_Rec");

                entity.HasOne(d => d.ComplainantCategoryNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ComplainantCategory)
                    .HasConstraintName("FK_fo_complaint_fo_contact_category");

                entity.HasOne(d => d.ComplainantFacilityCodeNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ComplainantFacilityCode)
                    .HasConstraintName("FK_fo_complaint_A_Facilities");

                entity.HasOne(d => d.ERegCommunicationModeNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ERegCommunicationMode)
                    .HasConstraintName("FK_fo_complaint_fo_a_communication_mode");

                entity.HasOne(d => d.ERegComplaintAccutenessNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ERegComplaintAccuteness)
                    .HasConstraintName("FK_fo_complaint_fo_a_complaint_accuteness");

                entity.HasOne(d => d.ERegComplaintCategoryNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ERegComplaintCategory)
                    .HasConstraintName("FK_fo_complaint_fo_a_complaint_category");

                entity.HasOne(d => d.ERegComplaintStatusNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.ERegComplaintStatus)
                    .HasConstraintName("FK_fo_complaint_fo_a_status");

                entity.HasOne(d => d.FinalSubmissionNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.FinalSubmission)
                    .HasConstraintName("FK_fo_complaint_A_yes_no1");

                entity.HasOne(d => d.IpNavigation)
                    .WithMany(p => p.FoComplaint)
                    .HasForeignKey(d => d.Ip)
                    .HasConstraintName("FK_fo_complaint_A_yes_no");
            });

            modelBuilder.Entity<FoComplaintActionTaken>(entity =>
            {
                entity.HasKey(e => new { e.ERegTrackCode, e.ActionCode });

                entity.ToTable("fo_complaint_action_taken");

                entity.Property(e => e.ERegTrackCode).HasColumnName("e_reg_track_code");

                entity.Property(e => e.ActionCode).HasColumnName("action_code");

                entity.HasOne(d => d.ActionCodeNavigation)
                    .WithMany(p => p.FoComplaintActionTaken)
                    .HasForeignKey(d => d.ActionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_action_taken_fo_a_action_taken");

                entity.HasOne(d => d.ERegTrackCodeNavigation)
                    .WithMany(p => p.FoComplaintActionTaken)
                    .HasForeignKey(d => d.ERegTrackCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_action_taken_fo_complaint_tracker");
            });

            modelBuilder.Entity<FoComplaintActiontakenTracker>(entity =>
            {
                entity.HasKey(e => e.ActionId);

                entity.ToTable("fo_complaint_actiontaken_tracker");

                entity.Property(e => e.ActionId)
                    .HasColumnName("Action_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionDate)
                    .HasColumnName("Action_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionDescription)
                    .HasColumnName("Action_description")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FoComplaintActiontakenTracker)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .HasConstraintName("FK_fo_complaint_actiontaken_tracker_fo_complaint");
            });

            modelBuilder.Entity<FoComplaintAffectedSites>(entity =>
            {
                entity.HasKey(e => new { e.ERegComplaintCode, e.FacilityCode });

                entity.ToTable("fo_complaint_affected_sites");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FoComplaintAffectedSites)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_affected_sites_fo_complaint");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.FoComplaintAffectedSites)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_affected_sites_A_Facilities");
            });

            modelBuilder.Entity<FoComplaintInvestigation>(entity =>
            {
                entity.HasKey(e => new { e.ERegComplaintCode, e.InvestigationCode });

                entity.ToTable("fo_complaint_investigation");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.InvestigationCode)
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FoComplaintInvestigation)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_investigation_fo_complaint");

                entity.HasOne(d => d.InvestigationCodeNavigation)
                    .WithMany(p => p.FoComplaintInvestigation)
                    .HasForeignKey(d => d.InvestigationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_investigation_fo_a_investigation");

                entity.HasOne(d => d.YesNoNavigation)
                    .WithMany(p => p.FoComplaintInvestigation)
                    .HasForeignKey(d => d.YesNo)
                    .HasConstraintName("FK_fo_complaint_investigation_A_yes_no");
            });

            modelBuilder.Entity<FoComplaintInvestigationQualIssue>(entity =>
            {
                entity.ToTable("fo_complaint_investigation_Qual_Issue");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.InvestigationCodeNavigation)
                    .WithMany(p => p.FoComplaintInvestigationQualIssue)
                    .HasForeignKey(d => d.InvestigationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_investigation_Qual_Issue_fo_a_investigation");

                entity.HasOne(d => d.YesNoNavigation)
                    .WithMany(p => p.FoComplaintInvestigationQualIssue)
                    .HasForeignKey(d => d.YesNo)
                    .HasConstraintName("FK_fo_complaint_investigation_Qual_Issue_A_yes_no");
            });

            modelBuilder.Entity<FoComplaintQualityIssue>(entity =>
            {
                entity.ToTable("fo_complaint_quality_issue");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AttachedEmail).HasColumnName("attached_email");

                entity.Property(e => e.AttachedImageEmail)
                    .HasColumnName("attached_image_email")
                    .HasMaxLength(350);

                entity.Property(e => e.AttachedImageLetter)
                    .HasColumnName("attached_image_letter")
                    .HasMaxLength(350);

                entity.Property(e => e.AttachedImagePicture)
                    .HasColumnName("attached_image_picture")
                    .HasColumnType("image");

                entity.Property(e => e.AttachedNoteLetter).HasColumnName("attached_note_letter");

                entity.Property(e => e.AttachedOther)
                    .HasColumnName("attached_other")
                    .HasMaxLength(250);

                entity.Property(e => e.AttachedOtherDoc).HasColumnName("attached_otherDoc");

                entity.Property(e => e.AttachedPicture).HasColumnName("attached_picture");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ComplainantEmail)
                    .HasColumnName("complainant_email")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ComplainantName)
                    .HasColumnName("complainant_name")
                    .HasMaxLength(150);

                entity.Property(e => e.ComplainantPhone).HasColumnName("complainant_phone");

                entity.Property(e => e.ComplainantTitle).HasColumnName("complainant_title");

                entity.Property(e => e.DateQualityIssueIdentified)
                    .HasColumnName("date_quality_issue_identified")
                    .HasColumnType("datetime");

                entity.Property(e => e.DescriptionOfQualityIssue)
                    .HasColumnName("description_of_quality_issue")
                    .HasMaxLength(500);

                entity.Property(e => e.DosageForm)
                    .HasColumnName("dosage_form")
                    .HasMaxLength(5);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegFacilityActionTaken).HasColumnName("e_reg_Facility_action_taken");

                entity.Property(e => e.ERegTrackActionCategory).HasColumnName("e_reg_track_action_category");

                entity.Property(e => e.ERegTrackActionDetails)
                    .HasColumnName("e_reg_track_action_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegTrackActionTaken)
                    .HasColumnName("e_reg_track_action_taken")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ERegTrackDateOfAction)
                    .HasColumnName("e_reg_track_date_of_action")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackMaulStaff)
                    .HasColumnName("e_reg_track_maul_staff")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackStatus).HasColumnName("e_reg_track_status");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterventionTaken).HasColumnName("intervention_taken");

                entity.Property(e => e.InterventionTakenOther)
                    .HasColumnName("intervention_taken_other")
                    .HasMaxLength(250);

                entity.Property(e => e.ManufactureDate)
                    .HasColumnName("Manufacture_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(250);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductOther)
                    .HasColumnName("product_other")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductQuarantined).HasColumnName("Product_Quarantined");

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(50);

                entity.Property(e => e.QualityIssuedClosed).HasColumnName("Quality_Issued_Closed");

                entity.Property(e => e.RecipientName)
                    .HasColumnName("recipient_name")
                    .HasMaxLength(150);

                entity.Property(e => e.RecipientTitle).HasColumnName("recipient_title");

                entity.Property(e => e.SampleProvided).HasColumnName("sample_provided");

                entity.Property(e => e.Supplier).HasMaxLength(250);

                entity.HasOne(d => d.ERegFacilityActionTakenNavigation)
                    .WithMany(p => p.FoComplaintQualityIssue)
                    .HasForeignKey(d => d.ERegFacilityActionTaken)
                    .HasConstraintName("FK_fo_complaint_quality_issue_fo_a_action_taken");
            });

            modelBuilder.Entity<FoComplaintTracker>(entity =>
            {
                entity.HasKey(e => e.ERegTrackCode)
                    .HasName("PK_fo_complaint_tracker_1");

                entity.ToTable("fo_complaint_tracker");

                entity.Property(e => e.ERegTrackCode)
                    .HasColumnName("e_reg_track_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ERegTrackActionCategory).HasColumnName("e_reg_track_action_category");

                entity.Property(e => e.ERegTrackActionDetails)
                    .HasColumnName("e_reg_track_action_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegTrackActionTaken)
                    .HasColumnName("e_reg_track_action_taken")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackAddedBy)
                    .HasColumnName("e_reg_track_added_by")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackAddedDate)
                    .HasColumnName("e_reg_track_added_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackComplaintCode).HasColumnName("e_reg_track_complaint_code");

                entity.Property(e => e.ERegTrackDateOfAction)
                    .HasColumnName("e_reg_track_date_of_action")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackMaulStaff)
                    .HasColumnName("e_reg_track_maul_staff")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackRecordStatus).HasColumnName("e_reg_track_recordStatus");

                entity.Property(e => e.ERegTrackStatus).HasColumnName("e_reg_track_status");

                entity.HasOne(d => d.ERegTrackActionCategoryNavigation)
                    .WithMany(p => p.FoComplaintTracker)
                    .HasForeignKey(d => d.ERegTrackActionCategory)
                    .HasConstraintName("FK_fo_complaint_tracker_fo_a_action_taken");

                entity.HasOne(d => d.ERegTrackComplaintCodeNavigation)
                    .WithMany(p => p.FoComplaintTracker)
                    .HasForeignKey(d => d.ERegTrackComplaintCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_complaint_tracker_fo_complaint");

                entity.HasOne(d => d.ERegTrackStatusNavigation)
                    .WithMany(p => p.FoComplaintTracker)
                    .HasForeignKey(d => d.ERegTrackStatus)
                    .HasConstraintName("FK_fo_complaint_tracker_fo_a_status");
            });

            modelBuilder.Entity<FoContactCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("fo_contact_category");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoContactEmail>(entity =>
            {
                entity.HasKey(e => e.CpCode);

                entity.ToTable("fo_contact_email");

                entity.Property(e => e.CpCode)
                    .HasColumnName("cp_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CeEmail)
                    .IsRequired()
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.PersonalEmail)
                    .HasColumnName("Personal_email")
                    .HasMaxLength(250);

                entity.HasOne(d => d.CpCodeNavigation)
                    .WithOne(p => p.FoContactEmail)
                    .HasForeignKey<FoContactEmail>(d => d.CpCode)
                    .HasConstraintName("FK_fo_contact_email_fo_contact_person");
            });

            modelBuilder.Entity<FoContactPerson>(entity =>
            {
                entity.HasKey(e => e.CpCode);

                entity.ToTable("fo_contact_person");

                entity.Property(e => e.CpCode)
                    .HasColumnName("cp_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(128);

                entity.HasOne(d => d.CpCategoryNavigation)
                    .WithMany(p => p.FoContactPerson)
                    .HasForeignKey(d => d.CpCategory)
                    .HasConstraintName("FK_fo_contact_person_fo_contact_category");

                entity.HasOne(d => d.CpFacilityNavigation)
                    .WithMany(p => p.FoContactPerson)
                    .HasForeignKey(d => d.CpFacility)
                    .HasConstraintName("FK_fo_contact_person_A_Facilities");

                entity.HasOne(d => d.CpIpNavigation)
                    .WithMany(p => p.FoContactPerson)
                    .HasForeignKey(d => d.CpIp)
                    .HasConstraintName("FK_fo_contact_person_A_ImplimentingPartners");

                entity.HasOne(d => d.CpSupplierCodeNavigation)
                    .WithMany(p => p.FoContactPerson)
                    .HasForeignKey(d => d.CpSupplierCode)
                    .HasConstraintName("FK_fo_contact_person_A_Supplier");

                entity.HasOne(d => d.CpTitleNavigation)
                    .WithMany(p => p.FoContactPerson)
                    .HasForeignKey(d => d.CpTitle)
                    .HasConstraintName("FK_fo_contact_person_fo_contact_title");
            });

            modelBuilder.Entity<FoContactTelephone>(entity =>
            {
                entity.HasKey(e => e.CpCode)
                    .HasName("PK_fo_contact_telephone_1");

                entity.ToTable("fo_contact_telephone");

                entity.Property(e => e.CpCode)
                    .HasColumnName("cp_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CtTelephone).HasColumnName("ct_telephone");

                entity.Property(e => e.CtTelephone2).HasColumnName("ct_telephone_2");

                entity.Property(e => e.CtTelephone3).HasColumnName("ct_telephone_3");

                entity.HasOne(d => d.CpCodeNavigation)
                    .WithOne(p => p.FoContactTelephone)
                    .HasForeignKey<FoContactTelephone>(d => d.CpCode)
                    .HasConstraintName("FK_fo_contact_telephone_fo_contact_person");
            });

            modelBuilder.Entity<FoContactTitle>(entity =>
            {
                entity.HasKey(e => e.TitleCode);

                entity.ToTable("fo_contact_title");

                entity.Property(e => e.TitleCode)
                    .HasColumnName("title_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoEmailsSent>(entity =>
            {
                entity.HasKey(e => e.EmailId);

                entity.ToTable("fo_Emails_Sent");

                entity.Property(e => e.EmailId)
                    .HasColumnName("Email_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.LevelOne).HasColumnName("Level_One");

                entity.Property(e => e.LevelThree).HasColumnName("Level_Three");

                entity.Property(e => e.LevelTwo).HasColumnName("Level_Two");

                entity.Property(e => e.SentDate)
                    .HasColumnName("Sent_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FoEmailsSent)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .HasConstraintName("FK_fo_Emails_Sent_fo_complaint");
            });

            modelBuilder.Entity<FoQiCloseOutCertificate>(entity =>
            {
                entity.ToTable("fo_QI_CloseOut_Certificate");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AttachedOtherDoc).HasColumnName("attached_otherDoc");

                entity.Property(e => e.AwardReference)
                    .HasColumnName("Award_Reference")
                    .HasMaxLength(128);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Capa).HasColumnName("CAPA");

                entity.Property(e => e.CapaComment)
                    .HasColumnName("CAPA_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ComplaintReport).HasColumnName("Complaint_Report");

                entity.Property(e => e.ComplaintReportComment)
                    .HasColumnName("Complaint_Report_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.CreditNote).HasColumnName("Credit_Note");

                entity.Property(e => e.CreditNoteComment)
                    .HasColumnName("Credit_Note_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.DirectorTechnical).HasColumnName("Director_Technical");

                entity.Property(e => e.DirectorTechnicalDate)
                    .HasColumnName("Director_Technical_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentsAttached)
                    .HasColumnName("Documents_Attached")
                    .HasMaxLength(50);

                entity.Property(e => e.DosageForm)
                    .HasColumnName("dosage_form")
                    .HasMaxLength(5);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ExecutiveDirector).HasColumnName("Executive_Director");

                entity.Property(e => e.ExecutiveDirectorDate)
                    .HasColumnName("Executive_Director_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinanceDate)
                    .HasColumnName("Finance_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinanceManager).HasColumnName("Finance_Manager");

                entity.Property(e => e.ManufactureDate)
                    .HasColumnName("Manufacture_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(250);

                entity.Property(e => e.NdaNotification).HasColumnName("NDA_Notification");

                entity.Property(e => e.NdaNotificationComment)
                    .HasColumnName("NDA_Notification_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.NotificationPac).HasColumnName("Notification_PAC");

                entity.Property(e => e.NotificationPacComment)
                    .HasColumnName("Notification_PAC_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.NotificationVendor).HasColumnName("Notification_Vendor");

                entity.Property(e => e.NotificationVendorComment)
                    .HasColumnName("Notification_Vendor_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.OtherAttachment)
                    .HasColumnName("Other_attachment")
                    .HasMaxLength(512);

                entity.Property(e => e.ProductCoas).HasColumnName("Product_COAs");

                entity.Property(e => e.ProductCoasComment)
                    .HasColumnName("Product_COAs_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(50);

                entity.Property(e => e.QtyDelivered).HasColumnName("Qty_Delivered");

                entity.Property(e => e.QtyRejected).HasColumnName("Qty_Rejected");

                entity.Property(e => e.ReconciliationComment)
                    .HasColumnName("Reconciliation_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ReleaseInstruction).HasColumnName("Release_Instruction");

                entity.Property(e => e.ReturnedNote).HasColumnName("Returned_Note");

                entity.Property(e => e.ReturnedNoteComment)
                    .HasColumnName("Returned_Note_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.SummaryOfInvestigations)
                    .HasColumnName("Summary_of_Investigations")
                    .HasMaxLength(1060);

                entity.Property(e => e.Supplier).HasMaxLength(256);

                entity.Property(e => e.TotalValueCip).HasColumnName("Total_Value_CIP");

                entity.Property(e => e.TotalValueFob).HasColumnName("Total_Value_FOB");

                entity.Property(e => e.UnitPriceCipEbb).HasColumnName("Unit_Price_CIP_EBB");

                entity.Property(e => e.UnitPriceFob).HasColumnName("Unit_Price_FOB");

                entity.Property(e => e.WarehouseDate)
                    .HasColumnName("Warehouse_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarehouseOfficer).HasColumnName("Warehouse_Officer");

                entity.HasOne(d => d.ERegComplaintCodeNavigation)
                    .WithMany(p => p.FoQiCloseOutCertificate)
                    .HasForeignKey(d => d.ERegComplaintCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_QI_CloseOut_Certificate_fo_complaint_quality_issue");

                entity.HasOne(d => d.ReleaseInstructionNavigation)
                    .WithMany(p => p.FoQiCloseOutCertificate)
                    .HasForeignKey(d => d.ReleaseInstruction)
                    .HasConstraintName("FK_fo_QI_CloseOut_Certificate_fo_a_release_instruction");
            });

            modelBuilder.Entity<FoScto>(entity =>
            {
                entity.HasKey(e => e.SapCode)
                    .HasName("PK_fo_SCTO_1");

                entity.ToTable("fo_SCTO");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoSctoContactPerson>(entity =>
            {
                entity.HasKey(e => e.Scto);

                entity.ToTable("fo_SCTO_ContactPerson");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.SctoEmail)
                    .HasColumnName("SCTO_Email")
                    .HasMaxLength(255);

                entity.Property(e => e.SctoTelNo1)
                    .HasColumnName("SCTO_TelNo1")
                    .HasMaxLength(255);

                entity.Property(e => e.SctoTelNo2)
                    .HasColumnName("SCTO_TelNo2")
                    .HasMaxLength(255);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<FoSsmtArea>(entity =>
            {
                entity.HasKey(e => e.AreaCode);

                entity.ToTable("fo_ssmt_area");

                entity.Property(e => e.AreaCode)
                    .HasColumnName("area_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoSsmtAreaVisited>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.AreaCode });

                entity.ToTable("fo_ssmt_area_visited");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AreaCode).HasColumnName("area_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.WasVisited).HasColumnName("was_visited");

                entity.HasOne(d => d.AreaCodeNavigation)
                    .WithMany(p => p.FoSsmtAreaVisited)
                    .HasForeignKey(d => d.AreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_area_visited_fo_ssmt_area");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtAreaVisited)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_area_visited_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtArtReadiness>(entity =>
            {
                entity.HasKey(e => e.ArtReadinessCode);

                entity.ToTable("fo_ssmt_art_readiness");

                entity.Property(e => e.ArtReadinessCode)
                    .HasColumnName("art_readiness_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArtReadiness)
                    .HasColumnName("art_readiness")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<FoSsmtFacility>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("fo_ssmt_facility");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<FoSsmtIndicator>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode);

                entity.ToTable("fo_ssmt_indicator");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.StoragePracticeCode).HasColumnName("storage_practice_code");

                entity.HasOne(d => d.StoragePracticeCodeNavigation)
                    .WithMany(p => p.FoSsmtIndicator)
                    .HasForeignKey(d => d.StoragePracticeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_indicator_fo_ssmt_storage_practice");
            });

            modelBuilder.Entity<FoSsmtIndicatorTracker>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IndicatorCode, e.IndicatorGuidlineCode });

                entity.ToTable("fo_ssmt_indicator_tracker");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorGuidlineCode).HasColumnName("indicator_guidline_code");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.FoSsmtIndicatorTracker)
                    .HasForeignKey(d => d.IndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_indicator_tracker_fo_ssmt_indicator");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtIndicatorTracker)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_indicator_tracker_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtInidcatorGuideline>(entity =>
            {
                entity.HasKey(e => e.IndicatorGuidelineCode);

                entity.ToTable("fo_ssmt_inidcator_guideline");

                entity.Property(e => e.IndicatorGuidelineCode)
                    .HasColumnName("indicator_guideline_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorGuidelineDesc)
                    .HasColumnName("indicator_guideline_desc")
                    .HasMaxLength(500);

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.FoSsmtInidcatorGuideline)
                    .HasForeignKey(d => d.IndicatorCode)
                    .HasConstraintName("FK_fo_ssmt_inidcator_guideline_fo_ssmt_indicator");
            });

            modelBuilder.Entity<FoSsmtInterviewedPersonnel>(entity =>
            {
                entity.HasKey(e => e.PersonnelCode);

                entity.ToTable("fo_ssmt_interviewed_personnel");

                entity.Property(e => e.PersonnelCode)
                    .HasColumnName("personnel_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(250);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(450);

                entity.Property(e => e.Position).HasColumnName("position");

                entity.Property(e => e.TelephoneNumber).HasColumnName("telephone_number");

                entity.HasOne(d => d.GenderNavigation)
                    .WithMany(p => p.FoSsmtInterviewedPersonnel)
                    .HasForeignKey(d => d.Gender)
                    .HasConstraintName("FK_fo_ssmt_interviewed_personnel_A_Gender");

                entity.HasOne(d => d.PositionNavigation)
                    .WithMany(p => p.FoSsmtInterviewedPersonnel)
                    .HasForeignKey(d => d.Position)
                    .HasConstraintName("FK_fo_ssmt_interviewed_personnel_fo_contact_title");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtInterviewedPersonnel)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_interviewed_personnel_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtNote>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.StoragePracticeCode });

                entity.ToTable("fo_ssmt_note");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.StoragePracticeCode).HasColumnName("storage_practice_code");

                entity.Property(e => e.Note)
                    .HasColumnName("note")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<FoSsmtOrderingReporting>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("fo_ssmt_ordering_reporting");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ClosingStockDataAgrees).HasColumnName("closing_stock_data_agrees");

                entity.Property(e => e.ClosingStockFacilityReport).HasColumnName("closing_stock_facility_report");

                entity.Property(e => e.ClosingStockStockCard).HasColumnName("closing_stock_stock_card");

                entity.Property(e => e.ConsumptionDataAgrees).HasColumnName("consumption_data_agrees");

                entity.Property(e => e.ConsumptionFacilityReport).HasColumnName("consumption_facility_report");

                entity.Property(e => e.ConsumptionPreviousReportingCycle).HasColumnName("consumption_previous_reporting_cycle");

                entity.Property(e => e.DifferenceInPatientNos).HasColumnName("difference_in_patient_nos");

                entity.Property(e => e.PatientNoPerDrugActualSite).HasColumnName("patient_no_per_drug_actual_site");

                entity.Property(e => e.PatientNoPerDrugReport).HasColumnName("patient_no_per_drug_report");

                entity.Property(e => e.UnitPack).HasColumnName("unit_pack");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtOrderingReporting)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_ordering_reporting_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtOrderingReportingIndicator>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IndicatorCode, e.IndicatorGuidlineCode });

                entity.ToTable("fo_ssmt_ordering_reporting_indicator");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorGuidlineCode).HasColumnName("indicator_guidline_code");

                entity.Property(e => e.Exist).HasColumnName("exist");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MohHmisTool).HasColumnName("moh_hmis_tool");

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<FoSsmtSiteTracker>(entity =>
            {
                entity.HasKey(e => new { e.DateOfVisit, e.FacilityCode });

                entity.ToTable("fo_ssmt_site_tracker");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ArtReadiness).HasColumnName("ART_Readiness");

                entity.Property(e => e.PatientNo).HasColumnName("patient_no");

                entity.Property(e => e.Rfso).HasColumnName("RFSO");

                entity.Property(e => e.Ssmt).HasColumnName("ssmt");

                entity.Property(e => e.VisitPurpose).HasColumnName("visit_purpose");

                entity.Property(e => e.VisitPurposePrimary)
                    .HasColumnName("visit_purpose_primary")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.SsmtNavigation)
                    .WithMany(p => p.FoSsmtSiteTracker)
                    .HasForeignKey(d => d.Ssmt)
                    .HasConstraintName("FK_fo_ssmt_site_tracker_fo_a_ssmt");

                entity.HasOne(d => d.VisitPurposeNavigation)
                    .WithMany(p => p.FoSsmtSiteTracker)
                    .HasForeignKey(d => d.VisitPurpose)
                    .HasConstraintName("FK_fo_ssmt_site_tracker_fo_ssmt_visit_purpose");
            });

            modelBuilder.Entity<FoSsmtSiteTrackerSubmittedDocument>(entity =>
            {
                entity.HasKey(e => new { e.DateOfVisit, e.FacilityCode, e.SubmittedDocument });

                entity.ToTable("fo_ssmt_site_tracker_submitted_document");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.SubmittedDocument).HasColumnName("submitted_document");

                entity.HasOne(d => d.FoSsmtSiteTracker)
                    .WithMany(p => p.FoSsmtSiteTrackerSubmittedDocument)
                    .HasForeignKey(d => new { d.DateOfVisit, d.FacilityCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_site_tracker_submitted_document_fo_ssmt_site_tracker");
            });

            modelBuilder.Entity<FoSsmtStockManagement>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode });

                entity.ToTable("fo_ssmt_stock_management");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.BalanceStockCard).HasColumnName("balance_stock_card");

                entity.Property(e => e.BalanceStockCardEqualBalancePhysicalCount).HasColumnName("balance_stock_card_equal_balance_physical_count");

                entity.Property(e => e.CalculatedAmc).HasColumnName("calculated_AMC");

                entity.Property(e => e.CardFilledOutCorrectly).HasColumnName("card_filled_out_correctly");

                entity.Property(e => e.CountDrugsStockRecord).HasColumnName("count_drugs_stock_record");

                entity.Property(e => e.DaysOutOfStockLast3Months).HasColumnName("days_out_of_stock_last_3_months");

                entity.Property(e => e.HighestBalanceOnHandLast6Months).HasColumnName("highest_balance_on_hand_last_6_months");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.PhysicalCountDoneMonthly).HasColumnName("physical_count_done_monthly");

                entity.Property(e => e.RecordAmc).HasColumnName("record_AMC");

                entity.Property(e => e.StockCardAvialable).HasColumnName("stock_card_avialable");

                entity.Property(e => e.StockKeptOnShelves).HasColumnName("stock_kept_on_shelves");

                entity.Property(e => e.UnitPack).HasColumnName("unit_pack");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtStockManagement)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_stock_management_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtStockManagementScore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IndicatorCode })
                    .HasName("PK_fo_ssmt_stock_management_scores");

                entity.ToTable("fo_ssmt_stock_management_score");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.PercentageWeightedScore).HasColumnName("percentage_weighted_score");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Weight).HasColumnName("weight");

                entity.Property(e => e.WeightedScore).HasColumnName("weighted_score");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtStockManagementScore)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_stock_management_score_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtStoragePractice>(entity =>
            {
                entity.HasKey(e => e.StoragePracticeCode);

                entity.ToTable("fo_ssmt_storage_practice");

                entity.Property(e => e.StoragePracticeCode)
                    .HasColumnName("storage_practice_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.StoragePracticeDesc)
                    .HasColumnName("storage_practice_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<FoSsmtSubmittedDocument>(entity =>
            {
                entity.HasKey(e => e.DocumentCode);

                entity.ToTable("fo_ssmt_submitted_document");

                entity.Property(e => e.DocumentCode)
                    .HasColumnName("document_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.DocumentName)
                    .HasColumnName("document_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FoSsmtSupervisor>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.CpCdoe });

                entity.ToTable("fo_ssmt_supervisor");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.CpCdoe).HasColumnName("cp_cdoe");

                entity.HasOne(d => d.FoSsmtFacility)
                    .WithMany(p => p.FoSsmtSupervisor)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_fo_ssmt_supervisor_fo_ssmt_facility");
            });

            modelBuilder.Entity<FoSsmtVisitPurpose>(entity =>
            {
                entity.HasKey(e => e.VisitPurposeCode);

                entity.ToTable("fo_ssmt_visit_purpose");

                entity.Property(e => e.VisitPurposeCode)
                    .HasColumnName("visit_purpose_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.VisitPurpose)
                    .HasColumnName("visit_purpose")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaseline1>(entity =>
            {
                entity.HasKey(e => e.Baseline1Code);

                entity.ToTable("hss_baseline_1");

                entity.Property(e => e.Baseline1Code)
                    .HasColumnName("baseline_1_code")
                    .HasMaxLength(5);

                entity.Property(e => e.Baseline1Desc)
                    .IsRequired()
                    .HasColumnName("baseline_1_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaseline2>(entity =>
            {
                entity.HasKey(e => e.Baseline2Code);

                entity.ToTable("hss_baseline_2");

                entity.Property(e => e.Baseline2Code)
                    .HasColumnName("baseline_2_code")
                    .HasMaxLength(5);

                entity.Property(e => e.Baseline2Desc)
                    .IsRequired()
                    .HasColumnName("baseline_2_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineBulkStore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.SubIndicatorCode });

                entity.ToTable("hss_baseline_bulk_store");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(250);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.HssBaselineBulkStore)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_bulk_store_A_Facilities");

                entity.HasOne(d => d.SubIndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineBulkStore)
                    .HasForeignKey(d => d.SubIndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_bulk_store_hss_baseline_bulk_store_sub_indicator");
            });

            modelBuilder.Entity<HssBaselineBulkStoreIndicators>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode);

                entity.ToTable("hss_baseline_bulk_store_indicators");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HssBaselineBulkStoreMethod>(entity =>
            {
                entity.HasKey(e => e.MethodCode);

                entity.ToTable("hss_baseline_bulk_store_method");

                entity.Property(e => e.MethodCode)
                    .HasColumnName("method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineBulkStoreSubIndicator>(entity =>
            {
                entity.HasKey(e => e.SubIndicatorCode);

                entity.ToTable("hss_baseline_bulk_store_sub_indicator");

                entity.Property(e => e.SubIndicatorCode)
                    .HasColumnName("sub_indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.MethodCode).HasColumnName("method_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineBulkStoreSubIndicator)
                    .HasForeignKey(d => d.IndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_bulk_store_sub_indicator_hss_baseline_bulk_store_indicators");

                entity.HasOne(d => d.MethodCodeNavigation)
                    .WithMany(p => p.HssBaselineBulkStoreSubIndicator)
                    .HasForeignKey(d => d.MethodCode)
                    .HasConstraintName("FK_hss_baseline_bulk_store_sub_indicator_hss_baseline_bulk_store_method");
            });

            modelBuilder.Entity<HssBaselineFocusGroupDiscussion>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.SubIndicatorCode });

                entity.ToTable("hss_baseline_focus_group_discussion");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(250);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.HssBaselineFocusGroupDiscussion)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_focus_group_discussion_A_Facilities");

                entity.HasOne(d => d.SubIndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineFocusGroupDiscussion)
                    .HasForeignKey(d => d.SubIndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_focus_group_discussion_hss_baseline_focus_group_discussion_sub_indicator");
            });

            modelBuilder.Entity<HssBaselineFocusGroupDiscussionIndicators>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode)
                    .HasName("PK_hss_baseline_focus_group_discussion_indicator");

                entity.ToTable("hss_baseline_focus_group_discussion_indicators");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HssBaselineFocusGroupDiscussionMethod>(entity =>
            {
                entity.HasKey(e => e.MethodCode);

                entity.ToTable("hss_baseline_focus_group_discussion_method");

                entity.Property(e => e.MethodCode)
                    .HasColumnName("method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineFocusGroupDiscussionSubIndicator>(entity =>
            {
                entity.HasKey(e => e.SubIndicatorCode);

                entity.ToTable("hss_baseline_focus_group_discussion_sub_indicator");

                entity.Property(e => e.SubIndicatorCode)
                    .HasColumnName("sub_indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.MethodCode).HasColumnName("method_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineFocusGroupDiscussionSubIndicator)
                    .HasForeignKey(d => d.IndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_focus_group_discussion_sub_indicator_hss_baseline_focus_group_discussion_indicator");

                entity.HasOne(d => d.MethodCodeNavigation)
                    .WithMany(p => p.HssBaselineFocusGroupDiscussionSubIndicator)
                    .HasForeignKey(d => d.MethodCode)
                    .HasConstraintName("FK_hss_baseline_focus_group_discussion_sub_indicator_hss_baseline_focus_group_discussion_method");
            });

            modelBuilder.Entity<HssBaselineHfService>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.HfService2Code });

                entity.ToTable("hss_baseline_hf_service");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HfService2Code).HasColumnName("hf_service_2_code");

                entity.Property(e => e.HfServiceDateTime)
                    .HasColumnName("hf_service_date_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.HfServiceRemarks)
                    .HasColumnName("hf_service_remarks")
                    .HasMaxLength(250);

                entity.Property(e => e.HfServiceValue).HasColumnName("hf_service_value");

                entity.HasOne(d => d.HfService2CodeNavigation)
                    .WithMany(p => p.HssBaselineHfService)
                    .HasForeignKey(d => d.HfService2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_hf_service_hss_baseline_hf_service_2");

                entity.HasOne(d => d.HssBaselineMaster)
                    .WithMany(p => p.HssBaselineHfService)
                    .HasForeignKey(d => new { d.FacilityCode, d.InterviewDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_hf_service_hss_baseline_master");
            });

            modelBuilder.Entity<HssBaselineHfService1>(entity =>
            {
                entity.HasKey(e => e.HfService1Code);

                entity.ToTable("hss_baseline_hf_service_1");

                entity.Property(e => e.HfService1Code)
                    .HasColumnName("hf_service_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HfService1Desc)
                    .HasColumnName("hf_service_1_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<HssBaselineHfService2>(entity =>
            {
                entity.HasKey(e => e.HfService2Code);

                entity.ToTable("hss_baseline_hf_service_2");

                entity.Property(e => e.HfService2Code)
                    .HasColumnName("hf_service_2_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HfService1Code).HasColumnName("hf_service_1_code");

                entity.Property(e => e.HfService2Desc)
                    .HasColumnName("hf_service_2_desc")
                    .HasMaxLength(250);

                entity.HasOne(d => d.HfService1CodeNavigation)
                    .WithMany(p => p.HssBaselineHfService2)
                    .HasForeignKey(d => d.HfService1Code)
                    .HasConstraintName("FK_hss_baseline_hf_service_2_hss_baseline_hf_service_1");
            });

            modelBuilder.Entity<HssBaselineHfService3>(entity =>
            {
                entity.HasKey(e => e.HfService3Code);

                entity.ToTable("hss_baseline_hf_service_3");

                entity.Property(e => e.HfService3Code)
                    .HasColumnName("hf_service_3_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HfService3Desc)
                    .HasColumnName("hf_service_3_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HssBaselineHfServiceStaffResponsible>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.HfService2Code });

                entity.ToTable("hss_baseline_hf_service_staff_responsible");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HfService2Code).HasColumnName("hf_service_2_code");

                entity.Property(e => e.CoordinateDeliveryTransport).HasColumnName("coordinate_delivery_transport");

                entity.Property(e => e.ManageStock).HasColumnName("manage_stock");

                entity.Property(e => e.PlacesOrders).HasColumnName("places_orders");

                entity.Property(e => e.RecieveSupplies).HasColumnName("recieve_supplies");

                entity.Property(e => e.Supervises).HasColumnName("supervises");
            });

            modelBuilder.Entity<HssBaselineInterviewee>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IntervieweeName, e.Baseline2Code })
                    .HasName("PK_hss_baseline_interviewee_1");

                entity.ToTable("hss_baseline_interviewee");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IntervieweeName)
                    .HasColumnName("interviewee_name")
                    .HasMaxLength(150);

                entity.Property(e => e.Baseline2Code).HasColumnName("baseline_2_code");

                entity.Property(e => e.IntervieweeEmail)
                    .HasColumnName("interviewee_email")
                    .HasMaxLength(150);

                entity.Property(e => e.IntervieweePhone)
                    .HasColumnName("interviewee_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.IntervieweePosition).HasColumnName("interviewee_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<HssBaselineInterviewer>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.InterviewerName });

                entity.ToTable("hss_baseline_interviewer");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterviewerName)
                    .HasColumnName("interviewer_name")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerEmail)
                    .HasColumnName("interviewer_email")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerPhone)
                    .HasColumnName("interviewer_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewerPosition).HasColumnName("interviewer_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<HssBaselineLaboratory>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.LaboratoryAssessmentQnCode });

                entity.ToTable("hss_baseline_laboratory");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LaboratoryAssessmentQnCode).HasColumnName("laboratory_assessment_qn_code");

                entity.Property(e => e.LaboratoryRemarks)
                    .HasColumnName("laboratory_remarks")
                    .HasMaxLength(3500);

                entity.Property(e => e.LaboratoryYesNo).HasColumnName("laboratory_yes_no");

                entity.HasOne(d => d.LaboratoryAssessmentQnCodeNavigation)
                    .WithMany(p => p.HssBaselineLaboratory)
                    .HasForeignKey(d => d.LaboratoryAssessmentQnCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_laboratory_hss_baseline_laboratory_assessment_question");

                entity.HasOne(d => d.HssBaselineMaster)
                    .WithMany(p => p.HssBaselineLaboratory)
                    .HasForeignKey(d => new { d.FacilityCode, d.InterviewDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_laboratory_hss_baseline_master");
            });

            modelBuilder.Entity<HssBaselineLaboratoryAssessmentQuestion>(entity =>
            {
                entity.HasKey(e => e.LabAssessmentQnCode);

                entity.ToTable("hss_baseline_laboratory_assessment_question");

                entity.Property(e => e.LabAssessmentQnCode)
                    .HasColumnName("lab_assessment_qn_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LabAssessmentQnDesc)
                    .HasColumnName("lab_assessment_qn_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.LabIndicatorCode).HasColumnName("lab_indicator_code");

                entity.Property(e => e.LabMethodCode).HasColumnName("lab_method_code");

                entity.HasOne(d => d.LabIndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineLaboratoryAssessmentQuestion)
                    .HasForeignKey(d => d.LabIndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_laboratory_assessment_question_hss_baseline_laboratory_indicator");

                entity.HasOne(d => d.LabMethodCodeNavigation)
                    .WithMany(p => p.HssBaselineLaboratoryAssessmentQuestion)
                    .HasForeignKey(d => d.LabMethodCode)
                    .HasConstraintName("FK_hss_baseline_laboratory_assessment_question_hss_baseline_laboratory_method");
            });

            modelBuilder.Entity<HssBaselineLaboratoryChecklist>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.LabChecklist1Code });

                entity.ToTable("hss_baseline_laboratory_checklist");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LabChecklist1Code).HasColumnName("lab_checklist_1_code");

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<HssBaselineLaboratoryChecklist1>(entity =>
            {
                entity.HasKey(e => e.LabChecklist1Code);

                entity.ToTable("hss_baseline_laboratory_checklist_1");

                entity.Property(e => e.LabChecklist1Code)
                    .HasColumnName("lab_checklist_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LabChecklist1Desc)
                    .HasColumnName("lab_checklist_1_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HssBaselineLaboratoryIndicator>(entity =>
            {
                entity.HasKey(e => e.LaboratoryIndicatorCode);

                entity.ToTable("hss_baseline_laboratory_indicator");

                entity.Property(e => e.LaboratoryIndicatorCode)
                    .HasColumnName("laboratory_indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LaboratoryIndicatorDesc)
                    .HasColumnName("laboratory_indicator_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HssBaselineLaboratoryMachines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.ItemCode });

                entity.ToTable("hss_baseline_laboratory_machines");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.AvialabilityServiceContract)
                    .HasColumnName("avialability_service_contract")
                    .HasMaxLength(5);

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(1000);

                entity.Property(e => e.ServiceFrequency).HasColumnName("service_frequency");

                entity.Property(e => e.ServiceProvider).HasColumnName("service_provider");

                entity.HasOne(d => d.ServiceFrequencyNavigation)
                    .WithMany(p => p.HssBaselineLaboratoryMachines)
                    .HasForeignKey(d => d.ServiceFrequency)
                    .HasConstraintName("FK_hss_baseline_laboratory_machines_hss_baseline_laboratory_service_frequency");

                entity.HasOne(d => d.ServiceProviderNavigation)
                    .WithMany(p => p.HssBaselineLaboratoryMachines)
                    .HasForeignKey(d => d.ServiceProvider)
                    .HasConstraintName("FK_hss_baseline_laboratory_machines_hss_baseline_laboratory_service_provider");
            });

            modelBuilder.Entity<HssBaselineLaboratoryMethod>(entity =>
            {
                entity.HasKey(e => e.LaboratoryMethodCode);

                entity.ToTable("hss_baseline_laboratory_method");

                entity.Property(e => e.LaboratoryMethodCode)
                    .HasColumnName("laboratory_method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.LaboratoryMethodDesc)
                    .HasColumnName("laboratory_method_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineLaboratoryServiceFrequency>(entity =>
            {
                entity.HasKey(e => e.ServiceFrequencyCode);

                entity.ToTable("hss_baseline_laboratory_service_frequency");

                entity.Property(e => e.ServiceFrequencyCode)
                    .HasColumnName("service_frequency_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ServiceFrequencyDesc)
                    .HasColumnName("service_frequency_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<HssBaselineLaboratoryServiceProvider>(entity =>
            {
                entity.HasKey(e => e.ServiceProviderCode);

                entity.ToTable("hss_baseline_laboratory_service_provider");

                entity.Property(e => e.ServiceProviderCode)
                    .HasColumnName("service_provider_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ServiceProviderDesc)
                    .HasColumnName("service_provider_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<HssBaselineLmis>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.SubIndicatorCode })
                    .HasName("PK_hss_baseline_lmis_tool");

                entity.ToTable("hss_baseline_lmis");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(250);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.HssBaselineLmis)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_lmis_A_Facilities");

                entity.HasOne(d => d.SubIndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineLmis)
                    .HasForeignKey(d => d.SubIndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_lmis_hss_baseline_lmis_sub_indicator");
            });

            modelBuilder.Entity<HssBaselineLmisIndicators>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode)
                    .HasName("PK_hss_baseline_lmis_indicators_1");

                entity.ToTable("hss_baseline_lmis_indicators");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<HssBaselineLmisMethod>(entity =>
            {
                entity.HasKey(e => e.MethodCode)
                    .HasName("PK_hss_baseline_lmis_method_1");

                entity.ToTable("hss_baseline_lmis_method");

                entity.Property(e => e.MethodCode)
                    .HasColumnName("method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineLmisSubIndicator>(entity =>
            {
                entity.HasKey(e => e.SubIndicatorCode)
                    .HasName("PK_hss_baseline_lmis_sub_indicator_1");

                entity.ToTable("hss_baseline_lmis_sub_indicator");

                entity.Property(e => e.SubIndicatorCode)
                    .HasColumnName("sub_indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.MethodCode).HasColumnName("method_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselineLmisSubIndicator)
                    .HasForeignKey(d => d.IndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_lmis_sub_indicator_hss_baseline_lmis_indicators");

                entity.HasOne(d => d.MethodCodeNavigation)
                    .WithMany(p => p.HssBaselineLmisSubIndicator)
                    .HasForeignKey(d => d.MethodCode)
                    .HasConstraintName("FK_hss_baseline_lmis_sub_indicator_hss_baseline_lmis_method");
            });

            modelBuilder.Entity<HssBaselineMaster>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("hss_baseline_master");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HssBaselinePharmacy>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.AssessmentQnCode });

                entity.ToTable("hss_baseline_pharmacy");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AssessmentQnCode).HasColumnName("assessment_qn_code");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(3500);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.AssessmentQnCodeNavigation)
                    .WithMany(p => p.HssBaselinePharmacy)
                    .HasForeignKey(d => d.AssessmentQnCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_pharmacy_hss_baseline_pharmacy_assessment_question");

                entity.HasOne(d => d.HssBaselineMaster)
                    .WithMany(p => p.HssBaselinePharmacy)
                    .HasForeignKey(d => new { d.FacilityCode, d.InterviewDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_pharmacy_hss_baseline_master");
            });

            modelBuilder.Entity<HssBaselinePharmacyAssessmentQuestion>(entity =>
            {
                entity.HasKey(e => e.AssessmentQnCode);

                entity.ToTable("hss_baseline_pharmacy_assessment_question");

                entity.Property(e => e.AssessmentQnCode)
                    .HasColumnName("assessment_qn_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssessmentQnDesc)
                    .HasColumnName("assessment_qn_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.MethodCode).HasColumnName("method_code");

                entity.Property(e => e.PharmacyIndicatorCode).HasColumnName("pharmacy_indicator_code");

                entity.HasOne(d => d.MethodCodeNavigation)
                    .WithMany(p => p.HssBaselinePharmacyAssessmentQuestion)
                    .HasForeignKey(d => d.MethodCode)
                    .HasConstraintName("FK_hss_baseline_pharmacy_assessment_question_hss_baseline_pharmacy_method");

                entity.HasOne(d => d.PharmacyIndicatorCodeNavigation)
                    .WithMany(p => p.HssBaselinePharmacyAssessmentQuestion)
                    .HasForeignKey(d => d.PharmacyIndicatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_pharmacy_assessment_question_hss_baseline_pharmacy_indicator");
            });

            modelBuilder.Entity<HssBaselinePharmacyIndicator>(entity =>
            {
                entity.HasKey(e => e.PharmacyIndicatorCode);

                entity.ToTable("hss_baseline_pharmacy_indicator");

                entity.Property(e => e.PharmacyIndicatorCode)
                    .HasColumnName("pharmacy_indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PharmacyIndicatorDesc)
                    .HasColumnName("pharmacy_indicator_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HssBaselinePharmacyMethod>(entity =>
            {
                entity.HasKey(e => e.PharmacyMethodCode);

                entity.ToTable("hss_baseline_pharmacy_method");

                entity.Property(e => e.PharmacyMethodCode)
                    .HasColumnName("pharmacy_method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PharmacyMethodDesc)
                    .HasColumnName("pharmacy_method_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineToolsReview>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.InterviewDate, e.ToolsReview2Code });

                entity.ToTable("hss_baseline_tools_review");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ToolsReview2Code).HasColumnName("tools_review_2_code");

                entity.Property(e => e.Avialable).HasColumnName("avialable");

                entity.Property(e => e.Displayed).HasColumnName("displayed");

                entity.HasOne(d => d.ToolsReview2CodeNavigation)
                    .WithMany(p => p.HssBaselineToolsReview)
                    .HasForeignKey(d => d.ToolsReview2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_tools_review_hss_baseline_tools_review_2");

                entity.HasOne(d => d.HssBaselineMaster)
                    .WithMany(p => p.HssBaselineToolsReview)
                    .HasForeignKey(d => new { d.FacilityCode, d.InterviewDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_baseline_tools_review_hss_baseline_master");
            });

            modelBuilder.Entity<HssBaselineToolsReview1>(entity =>
            {
                entity.HasKey(e => e.ToolsReview1Code);

                entity.ToTable("hss_baseline_tools_review_1");

                entity.Property(e => e.ToolsReview1Code)
                    .HasColumnName("tools_review_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ToolsReview1Desc)
                    .HasColumnName("tools_review_1_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssBaselineToolsReview2>(entity =>
            {
                entity.HasKey(e => e.ToolsReview2Code);

                entity.ToTable("hss_baseline_tools_review_2");

                entity.Property(e => e.ToolsReview2Code)
                    .HasColumnName("tools_review_2_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ToolsReview1Code).HasColumnName("tools_review_1_code");

                entity.Property(e => e.ToolsReview2Desc)
                    .HasColumnName("tools_review_2_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.ToolsReview1CodeNavigation)
                    .WithMany(p => p.HssBaselineToolsReview2)
                    .HasForeignKey(d => d.ToolsReview1Code)
                    .HasConstraintName("FK_hss_baseline_tools_review_2_hss_baseline_tools_review_1");
            });

            modelBuilder.Entity<HssDnGrn>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.ProductCode, e.BatchNo })
                    .HasName("PK_hss_dn_grn_1");

                entity.ToTable("hss_dn_grn");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.DateRecorded)
                    .HasColumnName("date_recorded")
                    .HasColumnType("datetime");

                entity.Property(e => e.DnNumber)
                    .HasColumnName("dn_number")
                    .HasMaxLength(50);

                entity.Property(e => e.GrnNumber)
                    .HasColumnName("grn_number")
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantitiesAgree).HasColumnName("quantities_agree");

                entity.Property(e => e.QuantityGrn).HasColumnName("quantity_grn");

                entity.Property(e => e.QuantityMaulDn).HasColumnName("quantity_maul_dn");

                entity.Property(e => e.QuantityStockCard).HasColumnName("quantity_stock_card");
            });

            modelBuilder.Entity<HssDnGrnHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit })
                    .HasName("PK_hss_dn_grn");

                entity.ToTable("hss_dn_grn_header");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasColumnName("added_by")
                    .HasMaxLength(50);

                entity.Property(e => e.DateAdded)
                    .HasColumnName("date_added")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<HssNeedsAssessment>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssNeedsAssessment2Code, e.HssNeedsAssessment3Code });

                entity.ToTable("hss_needs_assessment");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment3Code).HasColumnName("hss_needs_assessment_3_code");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(2500);

                entity.Property(e => e.CurrentArvStore).HasColumnName("current_arv_store");

                entity.Property(e => e.Dispensary).HasColumnName("dispensary");

                entity.Property(e => e.GeneralMedicines).HasColumnName("general_medicines");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.ProposedArvStore).HasColumnName("proposed_arv_store");

                entity.Property(e => e.Room1).HasColumnName("room_1");

                entity.Property(e => e.Room2).HasColumnName("room_2");

                entity.Property(e => e.Room3).HasColumnName("room_3");

                entity.Property(e => e.Room4).HasColumnName("room_4");

                entity.Property(e => e.Stores).HasColumnName("stores");

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.HssNeedsAssessment2CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessment)
                    .HasForeignKey(d => d.HssNeedsAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_hss_needs_assessment_2");

                entity.HasOne(d => d.HssNeedsAssessment3CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessment)
                    .HasForeignKey(d => d.HssNeedsAssessment3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_hss_needs_assessment_3");
            });

            modelBuilder.Entity<HssNeedsAssessment1>(entity =>
            {
                entity.HasKey(e => e.HssNeedsAssessment1Code);

                entity.ToTable("hss_needs_assessment_1");

                entity.Property(e => e.HssNeedsAssessment1Code)
                    .HasColumnName("hss_needs_assessment_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HssNeedsAssessment1Desc)
                    .HasColumnName("hss_needs_assessment_1_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HssNeedsAssessment2>(entity =>
            {
                entity.HasKey(e => e.HssNeedsAssessment2Code);

                entity.ToTable("hss_needs_assessment_2");

                entity.Property(e => e.HssNeedsAssessment2Code)
                    .HasColumnName("hss_needs_assessment_2_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HssNeedsAssessment1Code).HasColumnName("hss_needs_assessment_1_code");

                entity.Property(e => e.HssNeedsAssessment2Desc)
                    .HasColumnName("hss_needs_assessment_2_desc")
                    .HasMaxLength(250);

                entity.HasOne(d => d.HssNeedsAssessment1CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessment2)
                    .HasForeignKey(d => d.HssNeedsAssessment1Code)
                    .HasConstraintName("FK_hss_needs_assessment_2_hss_needs_assessment_1");
            });

            modelBuilder.Entity<HssNeedsAssessment3>(entity =>
            {
                entity.HasKey(e => e.HssNeedsAssessment3Code);

                entity.ToTable("hss_needs_assessment_3");

                entity.Property(e => e.HssNeedsAssessment3Code)
                    .HasColumnName("hss_needs_assessment_3_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.HssNeedsAssessment3Desc)
                    .HasColumnName("hss_needs_assessment_3_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssNeedsAssessment4>(entity =>
            {
                entity.HasKey(e => new { e.HssNeedsAssessment2Code, e.HssNeedsAssessment3Code });

                entity.ToTable("hss_needs_assessment_4");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment3Code).HasColumnName("hss_needs_assessment_3_code");

                entity.HasOne(d => d.HssNeedsAssessment2CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessment4)
                    .HasForeignKey(d => d.HssNeedsAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_4_hss_needs_assessment_2");

                entity.HasOne(d => d.HssNeedsAssessment3CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessment4)
                    .HasForeignKey(d => d.HssNeedsAssessment3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_4_hss_needs_assessment_3");
            });

            modelBuilder.Entity<HssNeedsAssessment5>(entity =>
            {
                entity.HasKey(e => e.NeedsAssessment5Code);

                entity.ToTable("hss_needs_assessment_5");

                entity.Property(e => e.NeedsAssessment5Code)
                    .HasColumnName("needs_assessment_5_code")
                    .HasMaxLength(8);

                entity.Property(e => e.NeedsAssessment5Desc)
                    .IsRequired()
                    .HasColumnName("needs_assessment_5_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssNeedsAssessmentInterviewee>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IntervieweeName });

                entity.ToTable("hss_needs_assessment_interviewee");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IntervieweeName)
                    .HasColumnName("interviewee_name")
                    .HasMaxLength(150);

                entity.Property(e => e.IntervieweeEmail)
                    .HasColumnName("interviewee_email")
                    .HasMaxLength(150);

                entity.Property(e => e.IntervieweePhone)
                    .HasColumnName("interviewee_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.IntervieweePosition).HasColumnName("interviewee_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.HssNeedsAssessmentMaster)
                    .WithMany(p => p.HssNeedsAssessmentInterviewee)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_interviewee_hss_needs_assessment_master");
            });

            modelBuilder.Entity<HssNeedsAssessmentInterviewer>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.InterviewerName });

                entity.ToTable("hss_needs_assessment_interviewer");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterviewerName)
                    .HasColumnName("interviewer_name")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerEmail)
                    .HasColumnName("interviewer_email")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerPhone)
                    .HasColumnName("interviewer_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewerPosition).HasColumnName("interviewer_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.HssNeedsAssessmentMaster)
                    .WithMany(p => p.HssNeedsAssessmentInterviewer)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_interviewer_hss_needs_assessment_master");
            });

            modelBuilder.Entity<HssNeedsAssessmentItInfrastracture>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssNeedsAssessment2Code });

                entity.ToTable("hss_needs_assessment_IT_infrastracture");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(2500);

                entity.Property(e => e.Dispensary)
                    .HasColumnName("dispensary")
                    .HasMaxLength(8);

                entity.Property(e => e.Stores)
                    .HasColumnName("stores")
                    .HasMaxLength(8);

                entity.HasOne(d => d.DispensaryNavigation)
                    .WithMany(p => p.HssNeedsAssessmentItInfrastractureDispensaryNavigation)
                    .HasForeignKey(d => d.Dispensary)
                    .HasConstraintName("FK_hss_needs_assessment_IT_infrastracture_hss_needs_assessment_5");

                entity.HasOne(d => d.HssNeedsAssessment2CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessmentItInfrastracture)
                    .HasForeignKey(d => d.HssNeedsAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_IT_infrastracture_hss_needs_assessment_2");

                entity.HasOne(d => d.StoresNavigation)
                    .WithMany(p => p.HssNeedsAssessmentItInfrastractureStoresNavigation)
                    .HasForeignKey(d => d.Stores)
                    .HasConstraintName("FK_hss_needs_assessment_IT_infrastracture_hss_needs_assessment_51");

                entity.HasOne(d => d.HssNeedsAssessmentMaster)
                    .WithMany(p => p.HssNeedsAssessmentItInfrastracture)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_IT_infrastracture_hss_needs_assessment_master");
            });

            modelBuilder.Entity<HssNeedsAssessmentKeyInformantInterview>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssNeedsAssessment2Code });

                entity.ToTable("hss_needs_assessment_key_informant_interview");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessmentKiiValue)
                    .HasColumnName("hss_needs_assessment_kii_value")
                    .HasMaxLength(8);
            });

            modelBuilder.Entity<HssNeedsAssessmentMaster>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("hss_needs_assessment_master");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<HssNeedsAssessmentPhysicalInfrastructure>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssNeedsAssessment2Code });

                entity.ToTable("hss_needs_assessment_physical_infrastructure");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(2500);

                entity.Property(e => e.Room1)
                    .HasColumnName("room_1")
                    .HasMaxLength(8);

                entity.Property(e => e.Room2)
                    .HasColumnName("room_2")
                    .HasMaxLength(8);

                entity.Property(e => e.Room3)
                    .HasColumnName("room_3")
                    .HasMaxLength(8);

                entity.Property(e => e.Room4)
                    .HasColumnName("room_4")
                    .HasMaxLength(8);

                entity.HasOne(d => d.HssNeedsAssessment2CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructure)
                    .HasForeignKey(d => d.HssNeedsAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_2");

                entity.HasOne(d => d.Room1Navigation)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructureRoom1Navigation)
                    .HasForeignKey(d => d.Room1)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_5");

                entity.HasOne(d => d.Room2Navigation)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructureRoom2Navigation)
                    .HasForeignKey(d => d.Room2)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_51");

                entity.HasOne(d => d.Room3Navigation)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructureRoom3Navigation)
                    .HasForeignKey(d => d.Room3)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_52");

                entity.HasOne(d => d.Room4Navigation)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructureRoom4Navigation)
                    .HasForeignKey(d => d.Room4)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_53");

                entity.HasOne(d => d.HssNeedsAssessmentMaster)
                    .WithMany(p => p.HssNeedsAssessmentPhysicalInfrastructure)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_physical_infrastructure_hss_needs_assessment_master");
            });

            modelBuilder.Entity<HssNeedsAssessmentSpaceOptimization>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssNeedsAssessment2Code, e.HssNeedsAssessment3Code });

                entity.ToTable("hss_needs_assessment_space_optimization");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment3Code).HasColumnName("hss_needs_assessment_3_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(2500);

                entity.Property(e => e.CurrentStorageArv)
                    .HasColumnName("current_storage_arv")
                    .HasMaxLength(8);

                entity.Property(e => e.GeneralMedicines)
                    .HasColumnName("general_medicines")
                    .HasMaxLength(8);

                entity.Property(e => e.ProposedStorageArv)
                    .HasColumnName("proposed_storage_arv")
                    .HasMaxLength(8);

                entity.Property(e => e.Room4)
                    .HasColumnName("room_4")
                    .HasMaxLength(8);

                entity.HasOne(d => d.CurrentStorageArvNavigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimizationCurrentStorageArvNavigation)
                    .HasForeignKey(d => d.CurrentStorageArv)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_5");

                entity.HasOne(d => d.GeneralMedicinesNavigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimizationGeneralMedicinesNavigation)
                    .HasForeignKey(d => d.GeneralMedicines)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_51");

                entity.HasOne(d => d.HssNeedsAssessment2CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimization)
                    .HasForeignKey(d => d.HssNeedsAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_2");

                entity.HasOne(d => d.HssNeedsAssessment3CodeNavigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimization)
                    .HasForeignKey(d => d.HssNeedsAssessment3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_3");

                entity.HasOne(d => d.ProposedStorageArvNavigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimizationProposedStorageArvNavigation)
                    .HasForeignKey(d => d.ProposedStorageArv)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_52");

                entity.HasOne(d => d.Room4Navigation)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimizationRoom4Navigation)
                    .HasForeignKey(d => d.Room4)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_53");

                entity.HasOne(d => d.HssNeedsAssessmentMaster)
                    .WithMany(p => p.HssNeedsAssessmentSpaceOptimization)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_needs_assessment_space_optimization_hss_needs_assessment_master");
            });

            modelBuilder.Entity<HssSpaceAssessment>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.SpaceAssessment2Code, e.SpaceAssessment3Code });

                entity.ToTable("hss_space_assessment");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SpaceAssessment2Code).HasColumnName("space_assessment_2_code");

                entity.Property(e => e.SpaceAssessment3Code).HasColumnName("space_assessment_3_code");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500);

                entity.Property(e => e.Dispensary)
                    .HasColumnName("dispensary")
                    .HasMaxLength(8);

                entity.Property(e => e.MedicineStore1)
                    .HasColumnName("medicine_store_1")
                    .HasMaxLength(8);

                entity.Property(e => e.MedicineStore2)
                    .HasColumnName("medicine_store_2")
                    .HasMaxLength(8);

                entity.Property(e => e.SuppliesStore1)
                    .HasColumnName("supplies_store_1")
                    .HasMaxLength(8);

                entity.Property(e => e.SuppliesStore2)
                    .HasColumnName("supplies_store_2")
                    .HasMaxLength(8);

                entity.HasOne(d => d.MedicineStore1Navigation)
                    .WithMany(p => p.HssSpaceAssessmentMedicineStore1Navigation)
                    .HasForeignKey(d => d.MedicineStore1)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_5");

                entity.HasOne(d => d.MedicineStore2Navigation)
                    .WithMany(p => p.HssSpaceAssessmentMedicineStore2Navigation)
                    .HasForeignKey(d => d.MedicineStore2)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_51");

                entity.HasOne(d => d.SpaceAssessment2CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessment)
                    .HasForeignKey(d => d.SpaceAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_2");

                entity.HasOne(d => d.SpaceAssessment3CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessment)
                    .HasForeignKey(d => d.SpaceAssessment3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_3");

                entity.HasOne(d => d.SuppliesStore1Navigation)
                    .WithMany(p => p.HssSpaceAssessmentSuppliesStore1Navigation)
                    .HasForeignKey(d => d.SuppliesStore1)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_52");

                entity.HasOne(d => d.SuppliesStore2Navigation)
                    .WithMany(p => p.HssSpaceAssessmentSuppliesStore2Navigation)
                    .HasForeignKey(d => d.SuppliesStore2)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_53");

                entity.HasOne(d => d.HssSpaceAssessmentMaster)
                    .WithMany(p => p.HssSpaceAssessment)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_hss_space_assessment_master");
            });

            modelBuilder.Entity<HssSpaceAssessment1>(entity =>
            {
                entity.HasKey(e => e.SpaceAssessment1Code);

                entity.ToTable("hss_space_assessment_1");

                entity.Property(e => e.SpaceAssessment1Code)
                    .HasColumnName("space_assessment_1_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpaceAssessment1Desc)
                    .HasColumnName("space_assessment_1_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<HssSpaceAssessment2>(entity =>
            {
                entity.HasKey(e => e.SpaceAssessment2Code);

                entity.ToTable("hss_space_assessment_2");

                entity.Property(e => e.SpaceAssessment2Code)
                    .HasColumnName("space_assessment_2_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpaceAssessment1Code).HasColumnName("space_assessment_1_code");

                entity.Property(e => e.SpaceAssessment2Desc)
                    .HasColumnName("space_assessment_2_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.SpaceAssessment1CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessment2)
                    .HasForeignKey(d => d.SpaceAssessment1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_2_hss_space_assessment_1");
            });

            modelBuilder.Entity<HssSpaceAssessment3>(entity =>
            {
                entity.HasKey(e => e.SpaceAssessment3Code);

                entity.ToTable("hss_space_assessment_3");

                entity.Property(e => e.SpaceAssessment3Code)
                    .HasColumnName("space_assessment_3_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpaceAssessment3Desc)
                    .HasColumnName("space_assessment_3_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<HssSpaceAssessment4>(entity =>
            {
                entity.HasKey(e => new { e.SpaceAssessment2Code, e.SpaceAssessment3Code });

                entity.ToTable("hss_space_assessment_4");

                entity.Property(e => e.SpaceAssessment2Code).HasColumnName("space_assessment_2_code");

                entity.Property(e => e.SpaceAssessment3Code).HasColumnName("space_assessment_3_code");

                entity.HasOne(d => d.SpaceAssessment2CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessment4)
                    .HasForeignKey(d => d.SpaceAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_4_hss_space_assessment_2");

                entity.HasOne(d => d.SpaceAssessment3CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessment4)
                    .HasForeignKey(d => d.SpaceAssessment3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_4_hss_space_assessment_3");
            });

            modelBuilder.Entity<HssSpaceAssessment5>(entity =>
            {
                entity.HasKey(e => e.SpaceAssessment5Code);

                entity.ToTable("hss_space_assessment_5");

                entity.Property(e => e.SpaceAssessment5Code)
                    .HasColumnName("space_assessment_5_code")
                    .HasMaxLength(8);

                entity.Property(e => e.SpaceAssessment5Desc)
                    .IsRequired()
                    .HasColumnName("space_assessment_5_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HssSpaceAssessmentInterviewee>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.IntervieweeName });

                entity.ToTable("hss_space_assessment_interviewee");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IntervieweeName)
                    .HasColumnName("interviewee_name")
                    .HasMaxLength(150);

                entity.Property(e => e.IntervieweeEmail)
                    .HasColumnName("interviewee_email")
                    .HasMaxLength(150);

                entity.Property(e => e.IntervieweePhone)
                    .HasColumnName("interviewee_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.IntervieweePosition).HasColumnName("interviewee_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.HssSpaceAssessmentMaster)
                    .WithMany(p => p.HssSpaceAssessmentInterviewee)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_interviewee_hss_space_assessment_master");
            });

            modelBuilder.Entity<HssSpaceAssessmentInterviewer>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.InterviewerName });

                entity.ToTable("hss_space_assessment_interviewer");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.InterviewerName)
                    .HasColumnName("interviewer_name")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerEmail)
                    .HasColumnName("interviewer_email")
                    .HasMaxLength(150);

                entity.Property(e => e.InterviewerPhone)
                    .HasColumnName("interviewer_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.InterviewerPosition).HasColumnName("interviewer_position");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.HssSpaceAssessmentMaster)
                    .WithMany(p => p.HssSpaceAssessmentInterviewer)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_interviewer_hss_space_assessment_master");
            });

            modelBuilder.Entity<HssSpaceAssessmentKeyInformantInterview>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit, e.HssSpaceAssessment2Code });

                entity.ToTable("hss_space_assessment_key_informant_interview");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.HssSpaceAssessment2Code).HasColumnName("hss_space_assessment_2_code");

                entity.Property(e => e.HssSpaceAssessmentKiiRemark)
                    .HasColumnName("hss_space_assessment_kii_remark")
                    .HasMaxLength(500);

                entity.Property(e => e.HssSpaceAssessmentKiiValue)
                    .HasColumnName("hss_space_assessment_kii_value")
                    .HasMaxLength(8);

                entity.HasOne(d => d.HssSpaceAssessment2CodeNavigation)
                    .WithMany(p => p.HssSpaceAssessmentKeyInformantInterview)
                    .HasForeignKey(d => d.HssSpaceAssessment2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_key_informant_interview_hss_space_assessment_2");

                entity.HasOne(d => d.HssSpaceAssessmentKiiValueNavigation)
                    .WithMany(p => p.HssSpaceAssessmentKeyInformantInterview)
                    .HasForeignKey(d => d.HssSpaceAssessmentKiiValue)
                    .HasConstraintName("FK_hss_space_assessment_key_informant_interview_hss_space_assessment_5");

                entity.HasOne(d => d.HssSpaceAssessmentMaster)
                    .WithMany(p => p.HssSpaceAssessmentKeyInformantInterview)
                    .HasForeignKey(d => new { d.FacilityCode, d.DateOfVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_hss_space_assessment_key_informant_interview_hss_space_assessment_master");
            });

            modelBuilder.Entity<HssSpaceAssessmentMaster>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfVisit });

                entity.ToTable("hss_space_assessment_master");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Inventory>(entity =>
            {
                entity.HasKey(e => new { e.ItemCode, e.SupplierCode, e.ManufacturerCode, e.DateSupplied });

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.ManufacturerCode).HasColumnName("manufacturer_code");

                entity.Property(e => e.DateSupplied)
                    .HasColumnName("date_supplied")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentBalance).HasColumnName("current_balance");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.InStock).HasColumnName("in_stock");

                entity.Property(e => e.QuantitySupplied).HasColumnName("quantity_supplied");
            });

            modelBuilder.Entity<LmisExpectedReport>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ProductCategory })
                    .HasName("PK_A_ExpectedReport");

                entity.ToTable("LMIS_ExpectedReport");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.LmisExpectedReport)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_ExpectedReport_A_Facilities");

                entity.HasOne(d => d.ProductCategoryNavigation)
                    .WithMany(p => p.LmisExpectedReport)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_A_ExpectedReport_A_product_category");
            });

            modelBuilder.Entity<LmisSummaryCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryCode);

                entity.ToTable("lmis_summary_category");

                entity.Property(e => e.CategoryCode)
                    .HasColumnName("category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LmisSummaryIndicator>(entity =>
            {
                entity.HasKey(e => e.IndicatorCode);

                entity.ToTable("lmis_summary_indicator");

                entity.Property(e => e.IndicatorCode)
                    .HasColumnName("indicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.CategoryCodeNavigation)
                    .WithMany(p => p.LmisSummaryIndicator)
                    .HasForeignKey(d => d.CategoryCode)
                    .HasConstraintName("FK_lmis_summary_indicator_lmis_summary_category");
            });

            modelBuilder.Entity<LmisSummarySubIndicator>(entity =>
            {
                entity.HasKey(e => e.SubIndicatorCode);

                entity.ToTable("lmis_summary_subIndicator");

                entity.Property(e => e.SubIndicatorCode)
                    .HasColumnName("subIndicator_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("subIndicator_desc")
                    .HasMaxLength(150);

                entity.HasOne(d => d.IndicatorCodeNavigation)
                    .WithMany(p => p.LmisSummarySubIndicator)
                    .HasForeignKey(d => d.IndicatorCode)
                    .HasConstraintName("FK_lmis_summary_subIndicator_lmis_summary_indicator");
            });

            modelBuilder.Entity<Memberships>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Membersh__1788CC4C96F0D3DF");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.Comment).HasMaxLength(256);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowsStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Memberships)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MembershipApplication");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.Memberships)
                    .HasForeignKey<Memberships>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MembershipUser");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                    .HasName("PK_dbo.__MigrationHistory");

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<MileageForm>(entity =>
            {
                entity.HasKey(e => new { e.DriverVehicleCode, e.DepartureDate, e.Location });

                entity.Property(e => e.DepartureDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.ArrivalTimeDestination)
                    .HasColumnName("ArrivalTime_Destination")
                    .HasMaxLength(10);

                entity.Property(e => e.DepartureTime).HasMaxLength(10);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.OdometerArrival).HasColumnName("Odometer_Arrival");

                entity.Property(e => e.OdometerDepature).HasColumnName("Odometer_Depature");

                entity.Property(e => e.TotalDistance).HasColumnName("Total_Distance");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.MileageFormAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MileageForm_User_Account");

                entity.HasOne(d => d.DestinationNavigation)
                    .WithMany(p => p.MileageFormDestinationNavigation)
                    .HasForeignKey(d => d.Destination)
                    .HasConstraintName("FK_MileageForm_A_Facilities1");

                entity.HasOne(d => d.DriverVehicleCodeNavigation)
                    .WithMany(p => p.MileageForm)
                    .HasForeignKey(d => d.DriverVehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MileageForm_VehicleDriverAllocation");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.MileageFormEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_MileageForm_User_Account1");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.MileageFormLocationNavigation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MileageForm_A_Facilities");
            });

            modelBuilder.Entity<NotificationServer>(entity =>
            {
                entity.HasKey(e => e.HostId);

                entity.Property(e => e.HostId)
                    .HasColumnName("HostID")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultHost).HasColumnName("Default_Host");

                entity.Property(e => e.EnableSsl).HasColumnName("EnableSSL");

                entity.Property(e => e.NoReminders).HasColumnName("No_Reminders");

                entity.Property(e => e.Remindees).HasMaxLength(150);

                entity.Property(e => e.ReminderInterval).HasColumnName("Reminder_Interval");

                entity.Property(e => e.SenderEmail).HasMaxLength(50);

                entity.Property(e => e.SenderPassword).HasMaxLength(50);

                entity.Property(e => e.SmtpHost)
                    .HasColumnName("SMTP_Host")
                    .HasMaxLength(50);

                entity.Property(e => e.SmtpPort)
                    .HasColumnName("SMTP_Port")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<OrderDrugDetails>(entity =>
            {
                entity.HasKey(e => new { e.DrugCode, e.OrderNumber })
                    .HasName("PK_Order_DrugDetails_1");

                entity.ToTable("Order_DrugDetails");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.HasOne(d => d.DrugCodeNavigation)
                    .WithMany(p => p.OrderDrugDetails)
                    .HasForeignKey(d => d.DrugCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_A_Product");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderDrugDetails)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_Order_Header");
            });

            modelBuilder.Entity<OrderDrugDetailsAmc>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfAmc, e.ProductCode });

                entity.ToTable("Order_DrugDetails_AMC");

                entity.Property(e => e.DateOfAmc)
                    .HasColumnName("DateOfAMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsAmc)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_AMC_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsAmc)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_AMC_A_Product");
            });

            modelBuilder.Entity<OrderDrugDetailsEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.DrugCode, e.DatePrepared })
                    .HasName("PK_Order_DrugDetails_Emergency_1");

                entity.ToTable("Order_DrugDetails_Emergency");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.HasOne(d => d.DrugCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsEmergency)
                    .HasForeignKey(d => d.DrugCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_Emergency_A_Product");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_Emergency_A_Facilities");
            });

            modelBuilder.Entity<OrderDrugDetailsPhysicalCount>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfPhysicalCount, e.ProductCode, e.BatchNo });

                entity.ToTable("Order_DrugDetails_PhysicalCount");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsPhysicalCount)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_PhysicalCount_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderDrugDetailsPhysicalCount)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_DrugDetails_PhysicalCount_A_Product");
            });

            modelBuilder.Entity<OrderHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber)
                    .HasName("PK_Order_Header_1");

                entity.ToTable("Order_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderHivRapidTestKit>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ItemCode });

                entity.ToTable("order_hiv_rapid_test_kit");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKit)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_A_Product");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderHivRapidTestKit)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_order_hiv_rapid_test_kit_header");
            });

            modelBuilder.Entity<OrderHivRapidTestKitAmc>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfAmc, e.ProductCode });

                entity.ToTable("order_hiv_rapid_test_kit_AMC");

                entity.Property(e => e.DateOfAmc)
                    .HasColumnName("DateOfAMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitAmc)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_AMC_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitAmc)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_AMC_A_Product");
            });

            modelBuilder.Entity<OrderHivRapidTestKitEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ItemCode, e.DatePrepared });

                entity.ToTable("order_hiv_rapid_test_kit_Emergency");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_Emergency_A_Facilities");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitEmergency)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_Emergency_A_Product");
            });

            modelBuilder.Entity<OrderHivRapidTestKitHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("order_hiv_rapid_test_kit_header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderHivRapidTestKitHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderHivRapidTestKitHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_header_A_OrderType");
            });

            modelBuilder.Entity<OrderHivRapidTestKitHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("order_hiv_rapid_test_kit_header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderHivRapidTestKitPhysicalCount>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfPhysicalCount, e.ProductCode, e.BatchNo });

                entity.ToTable("order_hiv_rapid_test_kit_PhysicalCount");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitPhysicalCount)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_PhysicalCount_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitPhysicalCount)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_PhysicalCount_A_Product");
            });

            modelBuilder.Entity<OrderHivRapidTestKitSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ItemCode });

                entity.ToTable("order_hiv_rapid_test_kit_summary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");

                entity.Property(e => e.Smc).HasColumnName("SMC");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitSummary)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_summary_A_Product");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderHivRapidTestKitSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_hiv_rapid_test_kit_summary_order_hiv_rapid_test_kit_header");
            });

            modelBuilder.Entity<OrderLab>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ItemCode });

                entity.ToTable("Order_Lab");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderLab)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_A_Product");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderLab)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Order_Lab_Header");
            });

            modelBuilder.Entity<OrderLabAmc>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfAmc, e.ItemCode });

                entity.ToTable("Order_Lab_AMC");

                entity.Property(e => e.DateOfAmc)
                    .HasColumnName("DateOfAMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderLabAmc)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_AMC_A_Facilities");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderLabAmc)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_AMC_A_Product_Lab_Category");
            });

            modelBuilder.Entity<OrderLabCustom>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode });

                entity.ToTable("Order_Lab_Custom");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderLabCustom)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Custom_Order_Lab_Custom_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderLabCustom)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Custom_A_Product");
            });

            modelBuilder.Entity<OrderLabCustomHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_Lab_Custom_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderLabCustomHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Custom_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderLabCustomHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_Lab_Custom_Header_A_OrderStatus");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.OrderLabCustomHeader)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("FK_Order_Lab_Custom_Header_A_product_category");
            });

            modelBuilder.Entity<OrderLabCustomHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_Lab_Custom_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderLabEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ItemCode, e.DatePrepared });

                entity.ToTable("Order_Lab_Emergency");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderLabEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Emergency_A_Facilities");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderLabEmergency)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Emergency_A_Product_Lab_Category");
            });

            modelBuilder.Entity<OrderLabHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_Lab_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.CompletedBy)
                    .HasColumnName("completed_by")
                    .HasMaxLength(150);

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Hsd)
                    .HasColumnName("HSD")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderLabHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderLabHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_Lab_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderLabHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_Lab_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderLabHeaderLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Order_Lab_Header_Log");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderLabPhysicalCount>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfPhysicalCount, e.ProductCode, e.BatchNo });

                entity.ToTable("Order_Lab_PhysicalCount");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderLabPhysicalCount)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_PhysicalCount_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderLabPhysicalCount)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Lab_PhysicalCount_A_Product_Lab_Category");
            });

            modelBuilder.Entity<OrderMault>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode });

                entity.ToTable("Order_MAULT");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderMault)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_MAULT_Order_MAULT_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderMault)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_MAULT_A_Product");
            });

            modelBuilder.Entity<OrderMaultHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_MAULT_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderMaultHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_MAULT_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderMaultHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_MAULT_Header_A_OrderStatus");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.OrderMaultHeader)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .HasConstraintName("FK_Order_MAULT_Header_A_product_category");
            });

            modelBuilder.Entity<OrderMaultHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_MAULT_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderOiStiDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode });

                entity.ToTable("Order_OI_STI_Detail");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderOiStiDetail)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Detail_Order_OI_STI_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderOiStiDetail)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Detail_A_Product");
            });

            modelBuilder.Entity<OrderOiStiDetailPhysicalCount>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfPhysicalCount, e.ProductCode, e.BatchNo });

                entity.ToTable("Order_OI_STI_Detail_Physical_Count");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderOiStiDetailPhysicalCount)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Detail_Physical_Count_Order_OI_STI_Detail_Physical_Count");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderOiStiDetailPhysicalCount)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Detail_Physical_Count_A_Product");
            });

            modelBuilder.Entity<OrderOiStiEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ProductCode, e.DatePrepared });

                entity.ToTable("Order_OI_STI_Emergency");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderOiStiEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Emergency_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderOiStiEmergency)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_OI_STI_Emergency_A_Product");
            });

            modelBuilder.Entity<OrderOiStiHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_OI_STI_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderOiStiHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .HasConstraintName("FK_Order_OI_STI_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderOiStiHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_OI_STI_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderOiStiHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_OI_STI_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderOiStiHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_OI_STI_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderPrepHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber)
                    .HasName("PK_Order_PREP_Header_1");

                entity.ToTable("Order_PREP_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderPrepHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_PREP_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderPrepHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_PREP_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderPrepHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_PREP_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderPrepHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_PREP_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderPrepdetails>(entity =>
            {
                entity.HasKey(e => new { e.DrugCode, e.OrderNumber })
                    .HasName("PK_Order_PREPDetails_1");

                entity.ToTable("Order_PREPDetails");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.HasOne(d => d.DrugCodeNavigation)
                    .WithMany(p => p.OrderPrepdetails)
                    .HasForeignKey(d => d.DrugCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_PREPDetails_A_Product");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderPrepdetails)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_PREPDetails_Order_PREP_Header");
            });

            modelBuilder.Entity<OrderRutfDetails>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode })
                    .HasName("PK_Order_RUTF");

                entity.ToTable("Order_RUTF_Details");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderRutfDetails)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_RUTF_Details_Order_RUTF_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderRutfDetails)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_RUTF_Details_A_Product");
            });

            modelBuilder.Entity<OrderRutfHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_RUTF_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderRutfHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_RUTF_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderRutfHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_RUTF_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderRutfHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_RUTF_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderRutfHeaderSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.Id });

                entity.ToTable("Order_RUTF_Header_Summary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedNew).HasColumnName("Expected_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OrderRutfHeaderSummary)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_RUTF_Header_Summary_WebTemplate_Summary_Guides");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderRutfHeaderSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_RUTF_Header_Summary_Order_RUTF_Header");
            });

            modelBuilder.Entity<OrderSmc>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ItemCode });

                entity.ToTable("order_smc");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.LossAdjustment).HasColumnName("loss_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.HasOne(d => d.ItemCodeNavigation)
                    .WithMany(p => p.OrderSmc)
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_smc_A_Product");

                entity.HasOne(d => d.OrderSmcHeader)
                    .WithMany(p => p.OrderSmc)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_smc_order_smc_header");
            });

            modelBuilder.Entity<OrderSmcHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate });

                entity.ToTable("order_smc_header");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualNumber).HasColumnName("actual_number");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedBy)
                    .HasColumnName("Approved_By")
                    .HasMaxLength(50);

                entity.Property(e => e.ApprovedDate)
                    .HasColumnName("Approved_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.TargetNumber).HasColumnName("target_number");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.OrderSmcHeaderAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_smc_header_Users_UserInformation");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.OrderSmcHeaderEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_order_smc_header_Users_UserInformation1");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderSmcHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_order_smc_header_A_Facilities");
            });

            modelBuilder.Entity<OrderSmcSlm>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode });

                entity.ToTable("Order_SMC_SLM");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderSmcSlm)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Order_SMC_SLM_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderSmcSlm)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_A_Product");
            });

            modelBuilder.Entity<OrderSmcSlmEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.DatePrepared, e.ProductCode });

                entity.ToTable("Order_SMC_SLM_Emergency");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Rfsonotes1)
                    .HasColumnName("RFSONotes1")
                    .HasMaxLength(500);

                entity.Property(e => e.UoM).HasMaxLength(10);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderSmcSlmEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Emergency_A_Facilities");
            });

            modelBuilder.Entity<OrderSmcSlmHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_SMC_SLM_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.NoCircumcised).HasColumnName("No_Circumcised");

                entity.Property(e => e.NoTargeted).HasColumnName("No_Targeted");

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderSmcSlmHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderSmcSlmHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_SMC_SLM_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderSmcSlmHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_SMC_SLM_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderSmcSlmHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_SMC_SLM_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderSmcSlmPhysicalCount>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateOfPhysicalCount, e.ProductCode, e.BatchNo });

                entity.ToTable("Order_SMC_SLM_Physical_Count");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderSmcSlmPhysicalCount)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Physical_Count_A_Facilities");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderSmcSlmPhysicalCount)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Physical_Count_A_Product");
            });

            modelBuilder.Entity<OrderSmcSlmSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.Id });

                entity.ToTable("Order_SMC_SLM_Summary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderSmcSlmSummary)
                    .HasForeignKey(d => d.FacilityCode)
                    .HasConstraintName("FK_Order_SMC_SLM_Summary_A_Facilities");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OrderSmcSlmSummary)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Summary_WebTemplate_Summary_Guides");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderSmcSlmSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SMC_SLM_Summary_Order_SMC_SLM_Header");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.ToTable("order_status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConfirmedDate)
                    .HasColumnName("confirmed_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliveredDate)
                    .HasColumnName("delivered_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DispatchedDate)
                    .HasColumnName("dispatched_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .HasColumnName("order_number")
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessedDate)
                    .HasColumnName("processed_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReadByMascis).HasColumnName("read_by_mascis");

                entity.Property(e => e.StatusId).HasColumnName("status_id");
            });

            modelBuilder.Entity<OrderTb>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode });

                entity.ToTable("Order_TB");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderTb)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_TB_Order_TB_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderTb)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_TB_A_Product");
            });

            modelBuilder.Entity<OrderTbHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_TB_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderTbHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_TB_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderTbHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_TB_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderTbHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_TB_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderTbSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.Id });

                entity.ToTable("Order_TB_Summary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OrderTbSummary)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_TB_Summary_WebTemplate_Summary_Guides");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderTbSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_TB_Summary_Order_TB_Header");
            });

            modelBuilder.Entity<OrderViralLoadReagentsDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ProductCode })
                    .HasName("PK_Order_ViralLoadReagents");

                entity.ToTable("Order_ViralLoadReagents_Detail");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsDetail)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Detail_Order_ViralLoadReagents_Header");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsDetail)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Detail_A_Product");
            });

            modelBuilder.Entity<OrderViralLoadReagentsEmergency>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.ProductCode, e.DatePrepared });

                entity.ToTable("Order_ViralLoadReagents_Emergency");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsEmergency)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Emergency_A_Facilities");
            });

            modelBuilder.Entity<OrderViralLoadReagentsHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("Order_ViralLoadReagents_Header");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Header_A_Facilities");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.OrderViralLoadReagentsHeader)
                    .HasForeignKey(d => d.OrderStatusId)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Header_A_OrderStatus");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.OrderViralLoadReagentsHeader)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Header_A_OrderType");
            });

            modelBuilder.Entity<OrderViralLoadReagentsHeaderLog>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.FacilityCode, e.OrderStatusId, e.OrderStatusChangedBy, e.OrderStatusDateChanged });

                entity.ToTable("Order_ViralLoadReagents_Header_Log");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderViralLoadReagentsSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.Id });

                entity.ToTable("Order_ViralLoadReagents_Summary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsSummary)
                    .HasForeignKey(d => d.FacilityCode)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Summary_A_Facilities");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsSummary)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Summary_WebTemplate_Summary_Guides");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.OrderViralLoadReagentsSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_ViralLoadReagents_Summary_Order_ViralLoadReagents_Header");
            });

            modelBuilder.Entity<PackingList>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.PostingDate, e.DrugCode, e.BatchNo });

                entity.Property(e => e.FacilityCode).HasMaxLength(50);

                entity.Property(e => e.PostingDate)
                    .HasColumnName("Posting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("Batch_No")
                    .HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LineTotal).HasColumnName("Line_Total");

                entity.Property(e => e.LsatPurchasePrice).HasColumnName("Lsat_Purchase_Price");
            });

            modelBuilder.Entity<PhysicalCountDetails>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.DateRecorded, e.DrugCode, e.ExpiryDate })
                    .HasName("PK_Drugs_PhysicalCount");

                entity.ToTable("PhysicalCount_Details");

                entity.Property(e => e.DateRecorded).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LotNumber)
                    .HasColumnName("Lot_Number")
                    .HasMaxLength(50);

                entity.Property(e => e.UnitPacksDispensary).HasColumnName("UnitPacks_Dispensary");

                entity.Property(e => e.UnitPacksStore).HasColumnName("UnitPacks_Store");

                entity.HasOne(d => d.DrugCodeNavigation)
                    .WithMany(p => p.PhysicalCountDetails)
                    .HasForeignKey(d => d.DrugCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Drugs_PhysicalCount_A_DrugFormulation");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.PhysicalCountDetails)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Drugs_PhysicalCount_A_Facilities");

                entity.HasOne(d => d.PhysicalCountHeader)
                    .WithMany(p => p.PhysicalCountDetails)
                    .HasForeignKey(d => new { d.DateRecorded, d.FacilityCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhysicalCount_Details_PhysicalCount_Header");
            });

            modelBuilder.Entity<PhysicalCountHeader>(entity =>
            {
                entity.HasKey(e => new { e.DateRecorded, e.FacilityCode })
                    .HasName("PK_PhysicalCount_Header_1");

                entity.ToTable("PhysicalCount_Header");

                entity.Property(e => e.DateRecorded).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.PhysicalCountHeaderAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhysicalCount_Header_User_Account");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.PhysicalCountHeaderEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_PhysicalCount_Header_User_Account1");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.PhysicalCountHeader)
                    .HasForeignKey(d => d.FacilityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhysicalCount_Header_A_Facilities");
            });

            modelBuilder.Entity<Pmp1a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_1A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nda)
                    .HasColumnName("NDA")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.NdaWaiver)
                    .HasColumnName("NDA_Waiver")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Ntg)
                    .HasColumnName("NTG")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Pmp1b>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_1B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.FdaApprovedList)
                    .HasColumnName("FDA_approved_list")
                    .HasMaxLength(50);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Pmp1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_1C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ValueBrandedProducts).HasColumnName("value_branded_products");

                entity.Property(e => e.ValueTotalProducts).HasColumnName("value_total_products");
            });

            modelBuilder.Entity<Pmp1d>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_1D");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ValueGenericProducts).HasColumnName("value_generic_products");

                entity.Property(e => e.ValueTotalProducts).HasColumnName("value_total_products");
            });

            modelBuilder.Entity<Pmp2a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_2A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductForecastedPast12Months)
                    .HasColumnName("product_forecasted_past_12_months")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductSelectedForProcurement)
                    .HasColumnName("product_selected_for_procurement")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pmp2b>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_2B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MaulFob).HasColumnName("MAUL_FOB");

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.TotalConsumption).HasColumnName("total_consumption");

                entity.Property(e => e.ValueConsumption).HasColumnName("value_consumption");
            });

            modelBuilder.Entity<Pmp2bX>(entity =>
            {
                entity.HasKey(e => e.CopYear);

                entity.ToTable("PMP_2B_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.CommoditiesConsumed).HasColumnName("commodities_consumed");

                entity.Property(e => e.CommoditiesForecasted).HasColumnName("commodities_forecasted");
            });

            modelBuilder.Entity<Pmp2c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_2C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MaulFob).HasColumnName("MAUL_FOB");

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.TotalConsumption).HasColumnName("total_consumption");

                entity.Property(e => e.ValueDistributedCommodities).HasColumnName("value_distributed_commodities");
            });

            modelBuilder.Entity<Pmp2cX>(entity =>
            {
                entity.HasKey(e => e.CopYear);

                entity.ToTable("PMP_2C_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.CommoditiesConsumed).HasColumnName("commodities_consumed");

                entity.Property(e => e.CommoditiesForecasted).HasColumnName("commodities_forecasted");
            });

            modelBuilder.Entity<Pmp3a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnProcurementPlan)
                    .HasColumnName("On_procurement_plan")
                    .HasMaxLength(10);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Procured)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<Pmp3b>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3B");

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(200);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_maul_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateReceiptAtTheAirport)
                    .HasColumnName("Date_receipt_at_the_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilledCorrectly)
                    .HasColumnName("purchase_orders_filled_correctly")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.QtyOrderedVsQtyReceived).HasColumnName("qty_ordered_vs_qty_received");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("Shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(10);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("shipment_status_per_PP_date#")
                    .HasMaxLength(20);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(20);

                entity.Property(e => e.VarianceFromMaulSupplierAgreedDate).HasColumnName("Variance_from_maul_Supplier_agreed_date");

                entity.Property(e => e.VarianceFromPpDueDate).HasColumnName("variance_from_PP_due_date");

                entity.Property(e => e.VarianceMaulSupplierAgreedDate).HasColumnName("variance_Maul_Supplier_agreed_date");
            });

            modelBuilder.Entity<Pmp3c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.OrderDate)
                    .HasColumnName("order_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskOrder)
                    .HasColumnName("task_order")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalCostFobMaulPriceUsd)
                    .HasColumnName("total_cost_FOB_MAUL_price_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalOrderCostScmsUsd)
                    .HasColumnName("total_order_cost_SCMS_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalSavingBasedOnFob)
                    .HasColumnName("total_saving_based_on_FOB")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<Pmp3c3g>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.ProductId, e.Period });

                entity.ToTable("PMP_3C_3G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.OrderDate)
                    .HasColumnName("order_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaskOrder)
                    .HasColumnName("task_order")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalCostFobMaulPriceUsd).HasColumnName("total_cost_FOB_MAUL_price_USD");

                entity.Property(e => e.TotalOrderCostScmsUsd).HasColumnName("total_order_cost_SCMS_USD");

                entity.Property(e => e.TotalSavingBasedOnFob).HasColumnName("total_saving_based_on_FOB");
            });

            modelBuilder.Entity<Pmp3d>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3D");

                entity.Property(e => e.Airport).HasColumnName("airport");

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(200);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptAtAirport)
                    .HasColumnName("date_goods_receipt_at_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_MAUL_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_Quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilled)
                    .HasColumnName("purchase_orders_filled ")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(25);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(10);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("Shipment_status_per_PP_date")
                    .HasMaxLength(15);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(20);

                entity.Property(e => e.VarianceMaulSupplierDueDate).HasColumnName("Variance_Maul_Supplier_due_date");

                entity.Property(e => e.VariancePpDate).HasColumnName("variance_PP_date");
            });

            modelBuilder.Entity<Pmp3e>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3E");

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(255);

                entity.Property(e => e.CompletedProcurements)
                    .HasColumnName("completed_procurements")
                    .HasMaxLength(3);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_maul_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateReceiptAtTheAirport)
                    .HasColumnName("Date_receipt_at_the_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilledCorrectly)
                    .HasColumnName("purchase_orders_filled_correctly")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.QtyOrderedVsQtyReceived).HasColumnName("qty_ordered_vs_qty_received");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(55);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("Shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(15);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("shipment_status_per_PP_date#")
                    .HasMaxLength(25);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(15);

                entity.Property(e => e.VarianceFromMaulSupplierAgreedDate).HasColumnName("Variance_from_maul_Supplier_agreed_date");

                entity.Property(e => e.VarianceFromPpDueDate).HasColumnName("variance_from_PP_due_date");

                entity.Property(e => e.VarianceMaulSupplierAgreedDate).HasColumnName("variance_Maul_Supplier_agreed_date");
            });

            modelBuilder.Entity<Pmp3f>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3F");

                entity.Property(e => e.Airport).HasColumnName("airport");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptAtAirport)
                    .HasColumnName("date_goods_receipt_at_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_MAUL_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_Quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(55);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilled)
                    .HasColumnName("purchase_orders_filled ")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(25);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(15);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("Shipment_status_per_PP_date")
                    .HasMaxLength(15);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(15);

                entity.Property(e => e.VarianceMaulSupplierDueDate).HasColumnName("Variance_Maul_Supplier_due_date");

                entity.Property(e => e.VariancePpDate).HasColumnName("variance_PP_date");
            });

            modelBuilder.Entity<Pmp3g>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_3G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.OrderDate)
                    .HasColumnName("order_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskOrder)
                    .HasColumnName("task_order")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalCostFobMaulPriceUsd)
                    .HasColumnName("total_cost_FOB_MAUL_price_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalOrderCostScmsUsd)
                    .HasColumnName("total_order_cost_SCMS_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalSavingBasedOnFob)
                    .HasColumnName("total_saving_based_on_FOB")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<Pmp4a>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.WarehouseId })
                    .HasName("PK_PMP_4A_4B");

                entity.ToTable("PMP_4A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

                entity.Property(e => e.MeetsGlobalStandards)
                    .HasColumnName("meets_global_standards")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pmp4b>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.WarehouseId });

                entity.ToTable("PMP_4B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

                entity.Property(e => e.MeetsNationalStandards)
                    .HasColumnName("meets_national_standards")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pmp4c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_4C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedStockCard)
                    .HasColumnName("updated_stock_card")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Pmp4d>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_4D");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoSitesThatReported).HasColumnName("no_sites_that_reported");

                entity.Property(e => e.NoSitesWithMinMax).HasColumnName("no_sites_with_MinMax");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<Pmp4e>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_4E");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.PcBalance)
                    .HasColumnName("pc_balance")
                    .HasMaxLength(255);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.PhysicalCountEqualStockCardBalance)
                    .HasColumnName("physical_count_equal_stock_card_balance")
                    .HasMaxLength(255);

                entity.Property(e => e.StockCardBalance)
                    .HasColumnName("stock_card_balance")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Pmp4f>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_4F");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.ValueExpiredProducts).HasColumnName("value_expired_products");

                entity.Property(e => e.ValueStockOnHand).HasColumnName("value_stock_on_hand");
            });

            modelBuilder.Entity<Pmp4g>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_4G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoSitesWithStockOuts).HasColumnName("no_sites_with_stock_outs");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.TotalNumberSites).HasColumnName("total_number_sites");
            });

            modelBuilder.Entity<Pmp5a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5A");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<Pmp5b>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoOfCycles).HasColumnName("no_of_cycles");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.TotalDeliveriesInHours).HasColumnName("total_deliveries_in_hours");
            });

            modelBuilder.Entity<Pmp5c>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.MonthId });

                entity.ToTable("PMP_5C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.AStatus).HasColumnName("a_status");

                entity.Property(e => e.LastActualDeliveryDate)
                    .HasColumnName("last_actual_delivery_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduledDeliveryDate)
                    .HasColumnName("scheduled_delivery_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Pmp5e>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5E");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ReportingRates).HasColumnName("reporting_rates");

                entity.Property(e => e.SitesExpectedToReport).HasColumnName("sites_expected_to_report");

                entity.Property(e => e.SitesThatReported).HasColumnName("sites_that_reported");

                entity.Property(e => e.SitesThatReportedOntime).HasColumnName("sites_that_reported_ontime");

                entity.Property(e => e.TimelinessOfReporting).HasColumnName("timeliness_of_reporting");
            });

            modelBuilder.Entity<Pmp5f>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5F");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<Pmp5g>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.CostOfDistribution).HasColumnName("cost_of_distribution");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ValueOfCommodities).HasColumnName("value_of_commodities");
            });

            modelBuilder.Entity<Pmp5h>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5H");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.StockOut).HasColumnName("stock_out");

                entity.Property(e => e.StockOutRate).HasColumnName("stock_out_rate");
            });

            modelBuilder.Entity<Pmp5hX>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_5H_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.StockOutRate).HasColumnName("stock_out_rate");
            });

            modelBuilder.Entity<Pmp6a>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_6A");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.SitesThatReported).HasColumnName("sites_that_reported");

                entity.Property(e => e.SitesThatReportedUsingApprovedLmisTools).HasColumnName("sites_that_reported_using_approved_LMIS_tools");
            });

            modelBuilder.Entity<Pmp6b>(entity =>
            {
                entity.HasKey(e => e.CopYear)
                    .HasName("PK_PMP_6B_1");

                entity.ToTable("PMP_6B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.SitesWithNoVarianceInOpeningClosingBalance).HasColumnName("sites_with_no_variance_in_opening_closing_balance");

                entity.Property(e => e.TotalNoOfFacilities).HasColumnName("total_no_of_facilities");
            });

            modelBuilder.Entity<Pmp6c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PMP_6C");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ReportingRates).HasColumnName("reporting_rates");

                entity.Property(e => e.SitesExpectedToReport).HasColumnName("sites_expected_to_report");

                entity.Property(e => e.SitesThatReported).HasColumnName("sites_that_reported");

                entity.Property(e => e.SitesThatReportedOnTime).HasColumnName("sites_that_reported_on_time");

                entity.Property(e => e.TimelinessOfReporting).HasColumnName("timeliness_of_reporting");
            });

            modelBuilder.Entity<Pmp7a>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.Months })
                    .HasName("PK_PMP_7A_7B_7C");

                entity.ToTable("PMP_7A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoTrainedLmis).HasColumnName("no_trained_LMIS");
            });

            modelBuilder.Entity<Pmp7b>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.Months });

                entity.ToTable("PMP_7B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoTrainedScm).HasColumnName("no_trained_SCM");
            });

            modelBuilder.Entity<Pmp7c>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.Period, e.Months });

                entity.ToTable("PMP_7C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoSupportSupervisionVisits).HasColumnName("no_support_supervision_visits");
            });

            modelBuilder.Entity<PmpDataCollectionFrequency>(entity =>
            {
                entity.HasKey(e => e.PmpDataCollectionFrequencyCode);

                entity.ToTable("pmp_data_collection_frequency");

                entity.Property(e => e.PmpDataCollectionFrequencyCode)
                    .HasColumnName("pmp_data_collection_frequency_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PmpDataCollectionFrequencyDesc)
                    .HasColumnName("pmp_data_collection_frequency_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PmpMetrix>(entity =>
            {
                entity.HasKey(e => new { e.PmpIndicatorCode, e.CopYear });

                entity.ToTable("PMP_METRIX");

                entity.Property(e => e.PmpIndicatorCode)
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Q1)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q2)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q3)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q4)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PmpObjective>(entity =>
            {
                entity.HasKey(e => e.PmpObjectiveCode);

                entity.ToTable("pmp_objective");

                entity.Property(e => e.PmpObjectiveCode)
                    .HasColumnName("pmp_objective_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.PmpObjectiveDesc)
                    .HasColumnName("pmp_objective_desc")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<PmpPerformanceIndicator>(entity =>
            {
                entity.HasKey(e => e.PmpIndicatorCode);

                entity.ToTable("pmp_performance_indicator");

                entity.Property(e => e.PmpIndicatorCode)
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.PmpDataCollectionFrequencyCode).HasColumnName("pmp_data_collection_frequency_code");

                entity.Property(e => e.PmpIndicatorDesc)
                    .HasColumnName("pmp_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpObjectiveCode).HasColumnName("pmp_objective_code");

                entity.Property(e => e.PmpTarget)
                    .HasColumnName("pmp_target")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Rationale)
                    .HasColumnName("rationale")
                    .HasMaxLength(450);

                entity.HasOne(d => d.PmpDataCollectionFrequencyCodeNavigation)
                    .WithMany(p => p.PmpPerformanceIndicator)
                    .HasForeignKey(d => d.PmpDataCollectionFrequencyCode)
                    .HasConstraintName("FK_pmp_performance_indicator_pmp_data_collection_frequency");

                entity.HasOne(d => d.PmpObjectiveCodeNavigation)
                    .WithMany(p => p.PmpPerformanceIndicator)
                    .HasForeignKey(d => d.PmpObjectiveCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pmp_performance_indicator_pmp_objective");
            });

            modelBuilder.Entity<PmpPerformanceIndicatorCopYear>(entity =>
            {
                entity.HasKey(e => new { e.CopYear, e.PmpIndicatorCode, e.NumeratorDenominatorCode });

                entity.ToTable("pmp_performance_indicator_cop_year");

                entity.Property(e => e.CopYear).HasColumnName("cop_year");

                entity.Property(e => e.PmpIndicatorCode)
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.NumeratorDenominatorCode)
                    .HasColumnName("numerator_denominator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.Q1).HasColumnName("q1");

                entity.Property(e => e.Q2).HasColumnName("q2");

                entity.Property(e => e.Q3).HasColumnName("q3");

                entity.Property(e => e.Q4).HasColumnName("q4");

                entity.HasOne(d => d.NumeratorDenominatorCodeNavigation)
                    .WithMany(p => p.PmpPerformanceIndicatorCopYear)
                    .HasForeignKey(d => d.NumeratorDenominatorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_pmp_performance_indicator_cop_year_pmp_performance_indicator_numerator_denominator");
            });

            modelBuilder.Entity<PmpPerformanceIndicatorNumeratorDenominator>(entity =>
            {
                entity.HasKey(e => e.NumeratorDenominatorCode)
                    .HasName("PK_pmp_performance_indicator_numerator_denominator_1");

                entity.ToTable("pmp_performance_indicator_numerator_denominator");

                entity.Property(e => e.NumeratorDenominatorCode)
                    .HasColumnName("numerator_denominator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.NumeratorDenominatorDesc)
                    .HasColumnName("numerator_denominator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpIndicatorCode)
                    .IsRequired()
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<ProcBidStatusAction>(entity =>
            {
                entity.HasKey(e => e.ActionCode)
                    .HasName("PK_proc_budget_status_action");

                entity.ToTable("proc_bid_status_action");

                entity.Property(e => e.ActionCode)
                    .HasColumnName("action_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionDetail)
                    .HasColumnName("action_detail")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcBidStatusAwardedProviders>(entity =>
            {
                entity.HasKey(e => new { e.AwardedProvider, e.ProcurementReferenceNumber });

                entity.ToTable("proc_bid_status_awarded_providers");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ProcBidStatusBidManager>(entity =>
            {
                entity.HasKey(e => new { e.StaffCode, e.ProcurementReferenceNumber });

                entity.ToTable("proc_bid_status_bid_manager");

                entity.Property(e => e.StaffCode).HasColumnName("staff_code");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ProcBidStatusCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryTypeId);

                entity.ToTable("proc_bid_status_category");

                entity.Property(e => e.CategoryTypeId)
                    .HasColumnName("category_type_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryTypeDesc)
                    .HasColumnName("category_type_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcBidStatusCdcResponse>(entity =>
            {
                entity.HasKey(e => e.ReponseCode)
                    .HasName("PK_proc_budget_status_cdc_response");

                entity.ToTable("proc_bid_status_cdc_response");

                entity.Property(e => e.ReponseCode)
                    .HasColumnName("reponse_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ResponseDesc)
                    .HasColumnName("response_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcBidStatusContractManagement>(entity =>
            {
                entity.HasKey(e => e.ContractManagementId);

                entity.ToTable("proc_bid_status_contract_management");

                entity.Property(e => e.ContractManagementId)
                    .HasColumnName("contract_management_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContractManagementDesc)
                    .HasColumnName("contract_management_desc")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ProcBidStatusCurrentStatus>(entity =>
            {
                entity.HasKey(e => e.StatusCode);

                entity.ToTable("proc_bid_status_current_status");

                entity.Property(e => e.StatusCode)
                    .HasColumnName("status_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcBidStatusEvaluationCommittee>(entity =>
            {
                entity.HasKey(e => new { e.StaffCode, e.ProcurementReferenceNumber });

                entity.ToTable("proc_bid_status_evaluation_committee");

                entity.Property(e => e.StaffCode).HasColumnName("staff_code");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ProcBidStatusProcurementReferenceNumber>(entity =>
            {
                entity.HasKey(e => e.ProcurementReferenceNumber)
                    .HasName("PK_proc_budget_status_Procurement_Reference_Number");

                entity.ToTable("proc_bid_status_Procurement_Reference_Number");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("order_no")
                    .HasMaxLength(10);

                entity.Property(e => e.OrderOrgan).HasColumnName("order_organ");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.TaskOrderNo).HasColumnName("task_order_no");
            });

            modelBuilder.Entity<ProcBidStatusProviders>(entity =>
            {
                entity.HasKey(e => new { e.AwardedProvider, e.BidStatusId });

                entity.ToTable("proc_bid_status_providers");

                entity.Property(e => e.BidStatusId).HasColumnName("BidStatus_Id");
            });

            modelBuilder.Entity<ProcBidStatusReport>(entity =>
            {
                entity.HasKey(e => e.ProcurementReferenceNumber)
                    .HasName("PK_proc_bid_status_report_1");

                entity.ToTable("proc_bid_status_report");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);

                entity.Property(e => e.ActionDescription).HasMaxLength(500);

                entity.Property(e => e.BidOpeningDate).HasColumnType("datetime");

                entity.Property(e => e.BudgetUsd).HasColumnName("BudgetUSD");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.ContractAmountUsd).HasColumnName("ContractAmountUSD");

                entity.Property(e => e.ContractBalanceUsd).HasColumnName("ContractBalanceUSD");

                entity.Property(e => e.CotractManagementReportDescription).HasMaxLength(500);

                entity.Property(e => e.CotractManagementReportId).HasColumnName("CotractManagementReport_id");

                entity.Property(e => e.CurrentStatusDescription).HasMaxLength(500);

                entity.Property(e => e.DateConfirmationByUserDepartment).HasColumnType("datetime");

                entity.Property(e => e.DateNegotiationPresentationReportAwardedToPac)
                    .HasColumnName("DateNegotiationPresentationReportAwardedToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfDueDeligencePostQualification).HasColumnType("datetime");

                entity.Property(e => e.DateOfInvitation).HasColumnType("datetime");

                entity.Property(e => e.DateOfIssueOfAward).HasColumnType("datetime");

                entity.Property(e => e.DateOfNegotiations).HasColumnType("datetime");

                entity.Property(e => e.DateOfPacapprovalOfEvaluationReportAward)
                    .HasColumnName("DateOfPACApprovalOfEvaluationReportAward")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatePreparationOfSpecificationsTorSowRfq)
                    .HasColumnName("DatePreparationOfSpecifications_TOR_SOW_RFQ")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatePresentationRfqRfpToPac)
                    .HasColumnName("DatePresentation_RFQ_RFP_ToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRequestClarificationByMaul)
                    .HasColumnName("DateRequestClarificationByMAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateResponseFromCdc)
                    .HasColumnName("DateResponseFromCDC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateResponseToClarificationBySuppliers).HasColumnType("datetime");

                entity.Property(e => e.DateSubmissionOfEvaluationReportToCdc)
                    .HasColumnName("DateSubmissionOfEvaluationReportToCDC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSubmissionOfEvaluationReportToPac)
                    .HasColumnName("DateSubmissionOfEvaluationReportToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDateRequestClarificationFromSuppliers).HasColumnType("datetime");

                entity.Property(e => e.EndDateResponseToClarificationFromMaul)
                    .HasColumnName("EndDateResponseToClarificationFromMAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.EvaluationCommencementDate).HasColumnType("datetime");

                entity.Property(e => e.ProcurementSubject).HasMaxLength(150);

                entity.Property(e => e.ResponseFromCdcd).HasColumnName("ResponseFromCDCD");

                entity.Property(e => e.ResponseFromCdcdescription)
                    .HasColumnName("ResponseFromCDCDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDateRequestClarificationFromSuppliers).HasColumnType("datetime");

                entity.Property(e => e.StartDateResponseToClarificationFromMaul)
                    .HasColumnName("StartDateResponseToClarificationFromMAUL")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CurrentStatusNavigation)
                    .WithMany(p => p.ProcBidStatusReport)
                    .HasForeignKey(d => d.CurrentStatus)
                    .HasConstraintName("FK_proc_bid_status_report_proc_bid_status_current_status");

                entity.HasOne(d => d.NextActionNavigation)
                    .WithMany(p => p.ProcBidStatusReport)
                    .HasForeignKey(d => d.NextAction)
                    .HasConstraintName("FK_proc_bid_status_report_proc_bid_status_action1");

                entity.HasOne(d => d.ProcurementMethodNavigation)
                    .WithMany(p => p.ProcBidStatusReport)
                    .HasForeignKey(d => d.ProcurementMethod)
                    .HasConstraintName("FK_proc_bid_status_report_proc_bid_status_report_procurement_method");

                entity.HasOne(d => d.ProcurementReferenceNumberNavigation)
                    .WithOne(p => p.ProcBidStatusReport)
                    .HasForeignKey<ProcBidStatusReport>(d => d.ProcurementReferenceNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_bid_status_report_proc_bid_status_Procurement_Reference_Number");

                entity.HasOne(d => d.ResponseFromCdcdNavigation)
                    .WithMany(p => p.ProcBidStatusReport)
                    .HasForeignKey(d => d.ResponseFromCdcd)
                    .HasConstraintName("FK_proc_bid_status_report_proc_bid_status_cdc_response");
            });

            modelBuilder.Entity<ProcBidStatusReportActionTaken>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.ProcurementReferenceNumber });

                entity.ToTable("proc_bid_status_report_action_taken");

                entity.Property(e => e.ActionId).HasColumnName("action_id");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ProcBidStatusReportActionTaken)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_bid_status_report_action_taken_proc_bid_status_action");
            });

            modelBuilder.Entity<ProcBidStatusReportProcurementMethod>(entity =>
            {
                entity.HasKey(e => e.ProcMethodCode);

                entity.ToTable("proc_bid_status_report_procurement_method");

                entity.Property(e => e.ProcMethodCode)
                    .HasColumnName("proc_method_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProcMethodDesc)
                    .HasColumnName("proc_method_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ProcBidStatusReportStaff>(entity =>
            {
                entity.HasKey(e => new { e.StaffCode, e.BidStatusId, e.RecordFlag })
                    .HasName("PK_proc_bid_status_report_evaluation_committee");

                entity.ToTable("proc_bid_status_report_staff");

                entity.Property(e => e.StaffCode).HasColumnName("staff_code");

                entity.Property(e => e.BidStatusId).HasColumnName("BidStatus_Id");
            });

            modelBuilder.Entity<ProcBidStatusStaffResponsibility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("proc_bid_status_staff_responsibility");

                entity.Property(e => e.StaffResponsibilityDesc)
                    .HasColumnName("StaffResponsibility_Desc")
                    .HasMaxLength(50);

                entity.Property(e => e.StaffResponsibilityId).HasColumnName("StaffResponsibility_ID");
            });

            modelBuilder.Entity<ProcBidStatusSupplierQuotation>(entity =>
            {
                entity.HasKey(e => new { e.SupplierId, e.ProcurementReferenceNumber });

                entity.ToTable("proc_bid_status_supplier_quotation");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_id");

                entity.Property(e => e.ProcurementReferenceNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ProcBudget>(entity =>
            {
                entity.HasKey(e => new { e.StartDate, e.EndDate, e.CategoryCode });

                entity.ToTable("proc_budget");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Fob).HasColumnName("FOB");

                entity.Property(e => e.Psm).HasColumnName("PSM");

                entity.HasOne(d => d.CategoryCodeNavigation)
                    .WithMany(p => p.ProcBudget)
                    .HasForeignKey(d => d.CategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_budget_A_product_category");
            });

            modelBuilder.Entity<ProcBudgetUnitMeasure>(entity =>
            {
                entity.HasKey(e => e.BudgetUnitMeasureCode);

                entity.ToTable("proc_budget_unit_measure");

                entity.Property(e => e.BudgetUnitMeasureCode)
                    .HasColumnName("budget_unit_measure_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.BudgetUnitMeasureDesc)
                    .HasColumnName("budget_unit_measure_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcOrderStatus>(entity =>
            {
                entity.HasKey(e => e.OrderStatusCode);

                entity.ToTable("proc_order_status");

                entity.Property(e => e.OrderStatusCode)
                    .HasColumnName("order_status_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.OrderStatusDesc)
                    .HasColumnName("order_status_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcPrequalifiedSupplier>(entity =>
            {
                entity.HasKey(e => new { e.SupplierCode, e.StartOfPeriod, e.EndOfPeriod, e.ProductCategory });

                entity.ToTable("proc_prequalified_supplier");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.StartOfPeriod)
                    .HasColumnName("start_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndOfPeriod)
                    .HasColumnName("end_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.HasOne(d => d.ProductCategoryNavigation)
                    .WithMany(p => p.ProcPrequalifiedSupplier)
                    .HasForeignKey(d => d.ProductCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_prequalified_supplier_A_product_category");

                entity.HasOne(d => d.SupplierCodeNavigation)
                    .WithMany(p => p.ProcPrequalifiedSupplier)
                    .HasForeignKey(d => d.SupplierCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_prequalified_supplier_A_Supplier");
            });

            modelBuilder.Entity<ProcPriceSupplier>(entity =>
            {
                entity.HasKey(e => new { e.PriceDate, e.ProductCode, e.SupplierCode });

                entity.ToTable("proc_price_supplier");

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.ProcPriceSupplier)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_price_supplier_A_Product");
            });

            modelBuilder.Entity<ProcProcurementType>(entity =>
            {
                entity.HasKey(e => e.ProcTypeCode);

                entity.ToTable("proc_procurement_type");

                entity.Property(e => e.ProcTypeCode)
                    .HasColumnName("proc_type_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProcTypeDesc)
                    .HasColumnName("proc_type_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeCode);

                entity.ToTable("proc_product_type");

                entity.Property(e => e.ProductTypeCode)
                    .HasColumnName("product_type_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.ProductTypeDesc)
                    .HasColumnName("product_type_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTask>(entity =>
            {
                entity.HasKey(e => new { e.RfqNo, e.SupplierCode })
                    .HasName("PK_proc_task_1");

                entity.ToTable("proc_task");

                entity.Property(e => e.RfqNo)
                    .HasColumnName("RFQ_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.AddedBy)
                    .HasColumnName("Added_By")
                    .HasMaxLength(50);

                entity.Property(e => e.DateAdded)
                    .HasColumnName("Date_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateEdited)
                    .HasColumnName("Date_Edited")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateForwardedToNda)
                    .HasColumnName("Date_forwarded_to_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedFromNda)
                    .HasColumnName("Date_recieved_from_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.EditedBy)
                    .HasColumnName("Edited_By")
                    .HasMaxLength(50);

                entity.Property(e => e.IsOrderApproved).HasColumnName("Is_Order_Approved");

                entity.Property(e => e.OrderConfirmationDate)
                    .HasColumnName("Order_confirmation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus).HasColumnName("Order_Status");

                entity.Property(e => e.PflNo)
                    .HasColumnName("PFL_no")
                    .HasMaxLength(50);

                entity.Property(e => e.TaskNo)
                    .IsRequired()
                    .HasColumnName("task_no")
                    .HasMaxLength(50);

                entity.HasOne(d => d.OrderStatusNavigation)
                    .WithMany(p => p.ProcTask)
                    .HasForeignKey(d => d.OrderStatus)
                    .HasConstraintName("FK_proc_task_proc_order_status");

                entity.HasOne(d => d.SupplierCodeNavigation)
                    .WithMany(p => p.ProcTask)
                    .HasForeignKey(d => d.SupplierCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_task_A_Supplier");

                entity.HasOne(d => d.TaskNoNavigation)
                    .WithMany(p => p.ProcTask)
                    .HasForeignKey(d => d.TaskNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_task_proc_task_header");
            });

            modelBuilder.Entity<ProcTaskDetail>(entity =>
            {
                entity.HasKey(e => new { e.RfqNo, e.SupplierCode, e.ProductCode })
                    .HasName("PK_proc_task_detail_1");

                entity.ToTable("proc_task_detail");

                entity.Property(e => e.RfqNo)
                    .HasColumnName("RFQ_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.CifPrice).HasColumnName("CIF_Price");

                entity.Property(e => e.Commments).HasMaxLength(500);

                entity.Property(e => e.FobPrice).HasColumnName("FOB_Price");

                entity.Property(e => e.OrderQuanity).HasColumnName("Order_quanity");

                entity.Property(e => e.PfiAddToOrder).HasColumnName("PFI_add_to_order");

                entity.Property(e => e.PfiPrice).HasColumnName("PFI_price");

                entity.Property(e => e.PfiQuantity).HasColumnName("PFI_quantity");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity_Outstanding");

                entity.Property(e => e.QuantityRecieved).HasColumnName("Quantity_Recieved");

                entity.Property(e => e.RfqQuantity).HasColumnName("RFQ_quantity");

                entity.HasOne(d => d.ProductTypeCodeNavigation)
                    .WithMany(p => p.ProcTaskDetail)
                    .HasForeignKey(d => d.ProductTypeCode)
                    .HasConstraintName("FK_proc_task_detail_proc_product_type");

                entity.HasOne(d => d.ProcTask)
                    .WithMany(p => p.ProcTaskDetail)
                    .HasForeignKey(d => new { d.RfqNo, d.SupplierCode })
                    .HasConstraintName("FK_proc_task_detail_proc_task");
            });

            modelBuilder.Entity<ProcTaskHeader>(entity =>
            {
                entity.HasKey(e => e.TaskNo);

                entity.ToTable("proc_task_header");

                entity.Property(e => e.TaskNo)
                    .HasColumnName("task_no")
                    .HasMaxLength(50);

                entity.Property(e => e.EndOfPeriod)
                    .HasColumnName("end_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartOfPeriod)
                    .HasColumnName("start_of_period")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ProcTaskOrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.RfqNo, e.SupplierCode, e.ProductCode, e.OrderDueDate })
                    .HasName("PK_proc_task_order_due_date");

                entity.ToTable("proc_task_order_detail");

                entity.Property(e => e.RfqNo)
                    .HasColumnName("RFQ_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("Order_Due_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Commments).HasMaxLength(500);

                entity.Property(e => e.DateOfOrderArrival)
                    .HasColumnName("Date_of_order_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOrderClearanceCustoms)
                    .HasColumnName("Date_order_clearance_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity_Outstanding");

                entity.Property(e => e.QuantityRecieved).HasColumnName("Quantity_Recieved");

                entity.HasOne(d => d.ProcTaskDetail)
                    .WithMany(p => p.ProcTaskOrderDetail)
                    .HasForeignKey(d => new { d.RfqNo, d.SupplierCode, d.ProductCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_task_order_detail_proc_task_detail");
            });

            modelBuilder.Entity<ProcTracker>(entity =>
            {
                entity.HasKey(e => e.ReferenceNo);

                entity.ToTable("proc_tracker");

                entity.Property(e => e.ReferenceNo)
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);

                entity.Property(e => e.NormalEmergencyProcurement).HasColumnName("normal_emergency_procurement");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.TaskOrderNo)
                    .HasColumnName("task_order_no")
                    .HasMaxLength(50);

                entity.HasOne(d => d.TaskOrderNoNavigation)
                    .WithMany(p => p.ProcTracker)
                    .HasForeignKey(d => d.TaskOrderNo)
                    .HasConstraintName("FK_proc_tracker_proc_tracker_task_no");
            });

            modelBuilder.Entity<ProcTrackerAwardPfi>(entity =>
            {
                entity.HasKey(e => e.AwardId)
                    .HasName("PK_proc_tracker_award");

                entity.ToTable("proc_tracker_award_pfi");

                entity.Property(e => e.AwardId)
                    .HasColumnName("award_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AwardCifCipDdpPrice).HasColumnName("award_cif_cip_ddp_price");

                entity.Property(e => e.AwardDateAcceptanceAward)
                    .HasColumnName("award_date_acceptance_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardDateIssueAward)
                    .HasColumnName("award_date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardExpectedDateDelivery)
                    .HasColumnName("award_expected_date_delivery")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardFobPrice).HasColumnName("award_fob_price");

                entity.Property(e => e.AwardNewDueDate)
                    .HasColumnName("award_new_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardQuantityOrdered).HasColumnName("award_quantity_ordered");

                entity.Property(e => e.AwardScmsPrice).HasColumnName("award_scms_price");

                entity.Property(e => e.AwardTotalCifCipDdpPrice).HasColumnName("award_total_cif_cip_ddp_price");

                entity.Property(e => e.AwardTotalFobPrice).HasColumnName("award_total_fob_price");

                entity.Property(e => e.AwardUnitFobScmsPrice).HasColumnName("award_unit_fob_scms_price");

                entity.Property(e => e.ConsistentNationalProcurementPlan).HasColumnName("consistent_NationalProcurementPlan");

                entity.Property(e => e.PfiCifVariance).HasColumnName("pfi_cif_variance");

                entity.Property(e => e.PfiDate)
                    .HasColumnName("pfi_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiDateSubmission)
                    .HasColumnName("pfi_date_submission")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiDateToNda)
                    .HasColumnName("pfi_date_to_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiFobVariance).HasColumnName("pfi_fob_variance");

                entity.Property(e => e.PfiInsuranceFrieght).HasColumnName("pfi_insurance_frieght");

                entity.Property(e => e.PfiNo)
                    .HasColumnName("pfi_no")
                    .HasMaxLength(50);

                entity.Property(e => e.PfiTotalCif).HasColumnName("pfi_total_cif");

                entity.Property(e => e.PfiTotalFob).HasColumnName("pfi_total_fob");

                entity.Property(e => e.PfiVerifiedNda)
                    .HasColumnName("pfi_verified_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiVerifiedSupplier)
                    .HasColumnName("pfi_verified_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcurementQuantity).HasColumnName("procurement_quantity");

                entity.Property(e => e.Product).HasColumnName("product");

                entity.Property(e => e.ProductBasicUnit).HasColumnName("product_basic_unit");

                entity.Property(e => e.ProductNtgApproved).HasColumnName("product_NTG_approved");

                entity.Property(e => e.ProductPackSize).HasColumnName("product_pack_size");

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProductType).HasColumnName("product_type");

                entity.Property(e => e.ProductWhoFdaApproved).HasColumnName("product_WHO_FDA_approved");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplier).HasColumnName("supplier");

                entity.HasOne(d => d.ProductTypeNavigation)
                    .WithMany(p => p.ProcTrackerAwardPfi)
                    .HasForeignKey(d => d.ProductType)
                    .HasConstraintName("FK_proc_tracker_award_pfi_proc_product_type");

                entity.HasOne(d => d.ReferenceNoNavigation)
                    .WithMany(p => p.ProcTrackerAwardPfi)
                    .HasForeignKey(d => d.ReferenceNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_award_pfi_proc_tracker");
            });

            modelBuilder.Entity<ProcTrackerCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryCode);

                entity.ToTable("proc_tracker_category");

                entity.Property(e => e.CategoryCode)
                    .HasColumnName("category_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderTypeId).HasColumnName("order_type_id");

                entity.HasOne(d => d.OrderType)
                    .WithMany(p => p.ProcTrackerCategory)
                    .HasForeignKey(d => d.OrderTypeId)
                    .HasConstraintName("FK_proc_tracker_category_proc_tracker_order_type");
            });

            modelBuilder.Entity<ProcTrackerCi>(entity =>
            {
                entity.HasKey(e => e.CommercialInvoiceId)
                    .HasName("PK_proc_tracker_commercial_invoice");

                entity.ToTable("proc_tracker_ci");

                entity.Property(e => e.CommercialInvoiceId)
                    .HasColumnName("commercial_invoice_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AwardId).HasColumnName("award_id");

                entity.Property(e => e.DateShippingDocumentsSentMaul)
                    .HasColumnName("date_shipping_documents_sent_maul")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("invoice_no")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceValue).HasColumnName("invoice_value");

                entity.HasOne(d => d.Award)
                    .WithMany(p => p.ProcTrackerCi)
                    .HasForeignKey(d => d.AwardId)
                    .HasConstraintName("FK_proc_tracker_ci_dg_proc_tracker_award_pfi");
            });

            modelBuilder.Entity<ProcTrackerCompletion>(entity =>
            {
                entity.HasKey(e => e.CompletionCode);

                entity.ToTable("proc_tracker_completion");

                entity.Property(e => e.CompletionCode)
                    .HasColumnName("completion_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompletionDesc)
                    .HasColumnName("completion_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcTrackerCountry>(entity =>
            {
                entity.HasKey(e => e.CountryCode);

                entity.ToTable("proc_tracker_country");

                entity.Property(e => e.CountryCode)
                    .HasColumnName("country_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcTrackerDg>(entity =>
            {
                entity.ToTable("proc_tracker_dg");

                entity.Property(e => e.ProcTrackerDgId)
                    .HasColumnName("proc_tracker_dg_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CommercialInvoiceId).HasColumnName("commercial_invoice_id");

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.DateArrivalEntryPort)
                    .HasColumnName("date_arrival_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedEntryPort)
                    .HasColumnName("date_cleared_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.FitForPurpose).HasColumnName("fit_for_purpose");

                entity.Property(e => e.GrnDate)
                    .HasColumnName("grn_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnDateReceiptWarehouse)
                    .HasColumnName("grn_date_receipt_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnNo)
                    .HasColumnName("grn_no")
                    .HasMaxLength(50);

                entity.Property(e => e.GrnQuantity).HasColumnName("grn_quantity");

                entity.Property(e => e.Manufacturer).HasColumnName("manufacturer");

                entity.Property(e => e.OrderStatus).HasColumnName("order_status");

                entity.Property(e => e.QualityIssue).HasColumnName("quality_issue");

                entity.Property(e => e.QualityIssueDesc)
                    .HasColumnName("quality_issue_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.QuantityOutstanding).HasColumnName("quantity_outstanding");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_maul");

                entity.Property(e => e.Vendor).HasColumnName("vendor");

                entity.HasOne(d => d.CommercialInvoice)
                    .WithMany(p => p.ProcTrackerDg)
                    .HasForeignKey(d => d.CommercialInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_dg_proc_tracker_ci");
            });

            modelBuilder.Entity<ProcTrackerFitForPurpose>(entity =>
            {
                entity.HasKey(e => e.FitPurposeCode);

                entity.ToTable("proc_tracker_fit_for_purpose");

                entity.Property(e => e.FitPurposeCode)
                    .HasColumnName("fit_purpose_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.FitPurposeDesc)
                    .HasColumnName("fit_purpose_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcTrackerGrn>(entity =>
            {
                entity.HasKey(e => new { e.GrnNo, e.SupplierCode, e.PurchaseOrderNo });

                entity.ToTable("proc_tracker_grn");

                entity.Property(e => e.GrnNo)
                    .HasColumnName("grn_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.DateRecieptWarehouse)
                    .HasColumnName("date_reciept_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnDate)
                    .HasColumnName("grn_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnQuantity).HasColumnName("grn_quantity");

                entity.HasOne(d => d.ProcTrackerOrder)
                    .WithMany(p => p.ProcTrackerGrn)
                    .HasForeignKey(d => new { d.PurchaseOrderNo, d.SupplierCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_grn_proc_tracker_order");
            });

            modelBuilder.Entity<ProcTrackerInvoice>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceNo, e.SupplierCode, e.PurchaseOrderNo });

                entity.ToTable("proc_tracker_invoice");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("invoice_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceValue).HasColumnName("invoice_value");

                entity.HasOne(d => d.ProcTrackerOrder)
                    .WithMany(p => p.ProcTrackerInvoice)
                    .HasForeignKey(d => new { d.PurchaseOrderNo, d.SupplierCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_invoice_proc_tracker_order");
            });

            modelBuilder.Entity<ProcTrackerManufacturer>(entity =>
            {
                entity.HasKey(e => e.ManufacturerCode);

                entity.ToTable("proc_tracker_manufacturer");

                entity.Property(e => e.ManufacturerCode)
                    .HasColumnName("manufacturer_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcTrackerOrder>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseOrderNo, e.SupplierId });

                entity.ToTable("proc_tracker_order");

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.OrderClassificationCode).HasColumnName("order_classification_code");

                entity.Property(e => e.OrderConfirmationDate)
                    .HasColumnName("order_confirmation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaskOrderNo)
                    .HasColumnName("task_order_no")
                    .HasMaxLength(50);

                entity.HasOne(d => d.OrderClassificationCodeNavigation)
                    .WithMany(p => p.ProcTrackerOrder)
                    .HasForeignKey(d => d.OrderClassificationCode)
                    .HasConstraintName("FK_proc_tracker_order_proc_tracker_order_classification");
            });

            modelBuilder.Entity<ProcTrackerOrderClassification>(entity =>
            {
                entity.HasKey(e => e.OrderClassificationCode);

                entity.ToTable("proc_tracker_order_classification");

                entity.Property(e => e.OrderClassificationCode)
                    .HasColumnName("order_classification_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.OrderClassificationDesc)
                    .HasColumnName("order_classification_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTrackerOrderStatus>(entity =>
            {
                entity.HasKey(e => e.OrderStatusId);

                entity.ToTable("proc_tracker_order_status");

                entity.Property(e => e.OrderStatusId)
                    .HasColumnName("order_status_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.OrderStatusDesc)
                    .HasColumnName("order_status_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTrackerOrderType>(entity =>
            {
                entity.HasKey(e => e.OrderTypeId);

                entity.ToTable("proc_tracker_order_type");

                entity.Property(e => e.OrderTypeId)
                    .HasColumnName("order_type_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.OrderTypeDesc)
                    .HasColumnName("order_type_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTrackerOrgan>(entity =>
            {
                entity.HasKey(e => e.OrganCode);

                entity.ToTable("proc_tracker_organ");

                entity.Property(e => e.OrganCode)
                    .HasColumnName("organ_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.OrganDesc)
                    .HasColumnName("organ_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTrackerPfi>(entity =>
            {
                entity.HasKey(e => new { e.PfiNo, e.PurchaseOrderNo, e.SupplierId });

                entity.ToTable("proc_tracker_pfi");

                entity.Property(e => e.PfiNo)
                    .HasColumnName("pfi_no")
                    .HasMaxLength(50);

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.DateForwardedNda)
                    .HasColumnName("date_forwarded_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedNda)
                    .HasColumnName("date_recieved_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedPfi)
                    .HasColumnName("date_recieved_pfi")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiTotalCif).HasColumnName("pfi_total_cif");

                entity.Property(e => e.PfiTotalFob).HasColumnName("pfi_total_fob");

                entity.Property(e => e.PfiValue).HasColumnName("pfi_value");

                entity.HasOne(d => d.ProcTrackerOrder)
                    .WithMany(p => p.ProcTrackerPfi)
                    .HasForeignKey(d => new { d.PurchaseOrderNo, d.SupplierId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_pfi_proc_tracker_order");
            });

            modelBuilder.Entity<ProcTrackerPrice>(entity =>
            {
                entity.HasKey(e => new { e.PriceDate, e.ProductCode })
                    .HasName("PK_proc_tracker_price_1");

                entity.ToTable("proc_tracker_price");

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Gf).HasColumnName("GF");

                entity.Property(e => e.Maul).HasColumnName("MAUL");

                entity.Property(e => e.Scms).HasColumnName("SCMS");
            });

            modelBuilder.Entity<ProcTrackerProductDetail>(entity =>
            {
                entity.HasKey(e => new { e.PurchaseOrderNo, e.SupplierId, e.ProductCode, e.OrderDueDate })
                    .HasName("PK_proc_tarcker_product_detail");

                entity.ToTable("proc_tracker_product_detail");

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.BudgetedValue).HasColumnName("budgeted_value");

                entity.Property(e => e.CifAwardDifferenceCifPfi).HasColumnName("CIF_award_difference_CIF_PFI");

                entity.Property(e => e.CifPrice).HasColumnName("cif_price");

                entity.Property(e => e.CifPriceTotal).HasColumnName("cif_price_total");

                entity.Property(e => e.Completion).HasColumnName("completion");

                entity.Property(e => e.CountryOfOrigin).HasColumnName("country_of_origin");

                entity.Property(e => e.DateAcceptanceAwardSupplier)
                    .HasColumnName("date_acceptance_award_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateArrivalEntebbe)
                    .HasColumnName("date_arrival_entebbe")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueAward)
                    .HasColumnName("date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecieptClearingAgent)
                    .HasColumnName("date_reciept_clearing_agent")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierSentShippingDocumentsToMaul)
                    .HasColumnName("date_supplier_sent_shipping_documents_to_MAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedShipment).HasColumnName("expected_shipment");

                entity.Property(e => e.FitForPurpose).HasColumnName("fit_for_purpose");

                entity.Property(e => e.FobPrice).HasColumnName("fob_price");

                entity.Property(e => e.FobPriceTotal).HasColumnName("fob_price_total");

                entity.Property(e => e.InsuranceFreight).HasColumnName("insurance_freight");

                entity.Property(e => e.Manufacturer).HasColumnName("manufacturer");

                entity.Property(e => e.NewProposalDueDate)
                    .HasColumnName("new_proposal_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NormalOrEmergencyProcurement).HasColumnName("normal_or_emergency_procurement");

                entity.Property(e => e.OnTimePerformanceOfInboundCommodityShipments).HasColumnName("on_time_performance_of_inbound_commodity_shipments");

                entity.Property(e => e.OrderStatus).HasColumnName("order_status");

                entity.Property(e => e.OutstandingQuantity).HasColumnName("outstanding_quantity");

                entity.Property(e => e.PercentageScheduledShipmentsThatMatchProcurementPlanBudget).HasColumnName("percentage_scheduled_shipments_that_match_procurement_plan_budget");

                entity.Property(e => e.PriceVariance).HasColumnName("price_variance");

                entity.Property(e => e.ProcurementPlanQuantity).HasColumnName("procurement_plan_quantity");

                entity.Property(e => e.ProductBasicUnit).HasColumnName("product_basic_unit");

                entity.Property(e => e.ProductCostComparedToInternationalCostAnalysis).HasColumnName("product_cost_compared_to_international_cost_analysis");

                entity.Property(e => e.ProductPackSize).HasColumnName("product_pack_size");

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_MAUL");

                entity.Property(e => e.ScmsPrice).HasColumnName("scms_price");

                entity.Property(e => e.TotalOrderValue).HasColumnName("total_order_value");

                entity.Property(e => e.Vendor).HasColumnName("vendor");

                entity.HasOne(d => d.OrderStatusNavigation)
                    .WithMany(p => p.ProcTrackerProductDetail)
                    .HasForeignKey(d => d.OrderStatus)
                    .HasConstraintName("FK_proc_tracker_product_detail_proc_tracker_order_status");

                entity.HasOne(d => d.ProductBasicUnitNavigation)
                    .WithMany(p => p.ProcTrackerProductDetail)
                    .HasForeignKey(d => d.ProductBasicUnit)
                    .HasConstraintName("FK_proc_tracker_product_detail_A_DrugBasicUnit");

                entity.HasOne(d => d.ProcTrackerOrder)
                    .WithMany(p => p.ProcTrackerProductDetail)
                    .HasForeignKey(d => new { d.PurchaseOrderNo, d.SupplierId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proc_tracker_product_detail_proc_tracker_order");
            });

            modelBuilder.Entity<ProcTrackerPurchaseOrderNo>(entity =>
            {
                entity.HasKey(e => e.PurchaseOrderNo);

                entity.ToTable("proc_tracker_purchase_order_no");

                entity.Property(e => e.PurchaseOrderNo)
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Addendum).HasColumnName("addendum");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("order_no")
                    .HasMaxLength(10);

                entity.Property(e => e.OrderOrgan).HasColumnName("order_organ");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.TaskOrderNo).HasColumnName("task_order_no");

                entity.HasOne(d => d.OrderCategoryNavigation)
                    .WithMany(p => p.ProcTrackerPurchaseOrderNo)
                    .HasForeignKey(d => d.OrderCategory)
                    .HasConstraintName("FK_proc_tracker_purchase_order_no_proc_tracker_category");

                entity.HasOne(d => d.OrderOrganNavigation)
                    .WithMany(p => p.ProcTrackerPurchaseOrderNo)
                    .HasForeignKey(d => d.OrderOrgan)
                    .HasConstraintName("FK_proc_tracker_purchase_order_no_proc_tracker_organ");

                entity.HasOne(d => d.OrderQuaterNavigation)
                    .WithMany(p => p.ProcTrackerPurchaseOrderNo)
                    .HasForeignKey(d => d.OrderQuater)
                    .HasConstraintName("FK_proc_tracker_purchase_order_no_proc_tracker_quarter");

                entity.HasOne(d => d.OrderTypeNavigation)
                    .WithMany(p => p.ProcTrackerPurchaseOrderNo)
                    .HasForeignKey(d => d.OrderType)
                    .HasConstraintName("FK_proc_tracker_purchase_order_no_proc_tracker_order_type");
            });

            modelBuilder.Entity<ProcTrackerQualityIssue>(entity =>
            {
                entity.HasKey(e => e.IssueCode);

                entity.ToTable("proc_tracker_quality_issue");

                entity.Property(e => e.IssueCode)
                    .HasColumnName("issue_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.IssueDesc)
                    .HasColumnName("issue_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProcTrackerQuarter>(entity =>
            {
                entity.HasKey(e => e.QuarterCode);

                entity.ToTable("proc_tracker_quarter");

                entity.Property(e => e.QuarterCode)
                    .HasColumnName("quarter_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuarterDesc)
                    .HasColumnName("quarter_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProcTrackerTaskNo>(entity =>
            {
                entity.HasKey(e => e.TaskOrderNo);

                entity.ToTable("proc_tracker_task_no");

                entity.Property(e => e.TaskOrderNo)
                    .HasColumnName("task_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.TaskOrderCode).HasColumnName("task_order_code");
            });

            modelBuilder.Entity<ProcTrackerVendor>(entity =>
            {
                entity.HasKey(e => e.VendorCode);

                entity.ToTable("proc_tracker_vendor");

                entity.Property(e => e.VendorCode)
                    .HasColumnName("vendor_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.Vendor)
                    .HasColumnName("vendor")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ProductCodeSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("product code search");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Profiles>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Profiles__1788CC4CC8F7284B");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyNames)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.PropertyValueBinary)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.PropertyValueStrings)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.Profiles)
                    .HasForeignKey<Profiles>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserProfile");
            });

            modelBuilder.Entity<Query>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Packsize).HasColumnName("packsize");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription).HasColumnName("product_description");

                entity.Property(e => e.SapCode).HasColumnName("SAP_code");

                entity.Property(e => e.Strength).HasColumnName("strength");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__Roles__8AFACE1AB6DFF01B");

                entity.Property(e => e.RoleId).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RoleApplication");
            });

            modelBuilder.Entity<SapArvSiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_ARV_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapArvSiteOrderHeader)
                    .WithMany(p => p.SapArvSiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_ARV_SiteOrder_DocumetLines_SAP_ARV_SiteOrderHeader");
            });

            modelBuilder.Entity<SapArvSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate })
                    .HasName("PK_SAP_ARV_SiteOrderHeader_1");

                entity.ToTable("SAP_ARV_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapEmailReceipient>(entity =>
            {
                entity.ToTable("SAP_EmailReceipient");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SapEmergencySiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.DatePrepared, e.OrderCategory, e.ItemCode, e.AddedDate })
                    .HasName("PK_SAP_Emergency_DocumetLines_1");

                entity.ToTable("SAP_Emergency_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapEmergencySiteOrderHeader)
                    .WithMany(p => p.SapEmergencySiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate, d.DatePrepared, d.OrderCategory })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_Emergency_DocumetLines_SAP_Emergency_Hearder");
            });

            modelBuilder.Entity<SapEmergencySiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.DatePrepared, e.OrderCategory })
                    .HasName("PK_SAP_Emergency_Hearder");

                entity.ToTable("SAP_Emergency_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.OrderCategoryNavigation)
                    .WithMany(p => p.SapEmergencySiteOrderHeader)
                    .HasForeignKey(d => d.OrderCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_Emergency_Hearder_A_product_category");
            });

            modelBuilder.Entity<SapExportDocumentLines>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ItemCode })
                    .HasName("PK_SAP_Export_DocumentLines");

                entity.ToTable("SAP_ExportDocumentLines");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.SapExportDocumentLines)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_ExportDocumentLines_SAP_ExportHeader");
            });

            modelBuilder.Entity<SapExportHeader>(entity =>
            {
                entity.HasKey(e => e.OrderNumber);

                entity.ToTable("SAP_ExportHeader");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapHivTestKitsSiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_HIV_TestKits_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapHivTestKitsSiteOrderHeader)
                    .WithMany(p => p.SapHivTestKitsSiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_HIV_TestKits_SiteOrder_DocumetLines_SAP_HIV_TestKits_SiteOrderHeader");
            });

            modelBuilder.Entity<SapHivTestKitsSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate })
                    .HasName("PK_SAP_HIV_TestKits_SiteOrderHeader_1");

                entity.ToTable("SAP_HIV_TestKits_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapLaboratorySiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_Laboratory_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapLaboratorySiteOrderHeader)
                    .WithMany(p => p.SapLaboratorySiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_Laboratory_SiteOrder_DocumetLines_SAP_Laboratory_SiteOrderHeader");
            });

            modelBuilder.Entity<SapLaboratorySiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate })
                    .HasName("PK_SAP_Laboratory_SiteOrderHeader_1");

                entity.ToTable("SAP_Laboratory_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapOiStiSiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_OI_STI_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapOiStiSiteOrderHeader)
                    .WithMany(p => p.SapOiStiSiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_OI_STI_SiteOrder_DocumetLines_SAP_OI_STI_SiteOrderHeader");
            });

            modelBuilder.Entity<SapOiStiSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate });

                entity.ToTable("SAP_OI_STI_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapSalesorderLog>(entity =>
            {
                entity.ToTable("SAP_SALESORDER_LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnum)
                    .HasColumnName("DOCNUM")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SapSmcSiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_SMC_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapSmcSiteOrderHeader)
                    .WithMany(p => p.SapSmcSiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_SMC_SiteOrder_DocumetLines_SAP_SMC_SiteOrderHeader");
            });

            modelBuilder.Entity<SapSmcSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate })
                    .HasName("PK_SAP_SMC_SiteOrderHeader_1");

                entity.ToTable("SAP_SMC_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.OrderSmcHeader)
                    .WithOne(p => p.SapSmcSiteOrderHeader)
                    .HasForeignKey<SapSmcSiteOrderHeader>(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_SMC_SiteOrderHeader_order_smc_header");
            });

            modelBuilder.Entity<SapSmcSlmSiteOrderDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_SMC_SLM_SiteOrder_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");

                entity.HasOne(d => d.SapSmcSlmSiteOrderHeader)
                    .WithMany(p => p.SapSmcSlmSiteOrderDocumetLines)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDate, d.EndDate })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAP_SMC_SLM_SiteOrder_DocumetLines_SAP_SMC_SLM_SiteOrderHeader");
            });

            modelBuilder.Entity<SapSmcSlmSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate });

                entity.ToTable("SAP_SMC_SLM_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapViralLoadReagentsDocumetLines>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate, e.AddedDate, e.ItemCode });

                entity.ToTable("SAP_ViralLoadReagents_DocumetLines");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CurrentRecordOnSap).HasColumnName("CurrentRecordOnSAP");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapViralLoadReagentsSiteOrderHeader>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate });

                entity.ToTable("SAP_ViralLoadReagents_SiteOrderHeader");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CardCode).HasMaxLength(50);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.DocDueDate).HasColumnType("datetime");

                entity.Property(e => e.DocNum).HasMaxLength(200);

                entity.Property(e => e.RecordReadBySap).HasColumnName("RecordReadBySAP");
            });

            modelBuilder.Entity<SapsyncTablenames>(entity =>
            {
                entity.ToTable("SAPSYNC_TABLENAMES");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HeaderTable)
                    .IsRequired()
                    .HasColumnName("header_table")
                    .HasMaxLength(50);

                entity.Property(e => e.LineTable)
                    .IsRequired()
                    .HasColumnName("line_table")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType)
                    .HasColumnName("order_type")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<ScheduleEvent>(entity =>
            {
                entity.HasKey(e => e.SheduleId)
                    .HasName("PK_ScheduleAppointments");

                entity.Property(e => e.SheduleId)
                    .HasColumnName("SheduleID")
                    .HasMaxLength(50);

                entity.Property(e => e.AddedBy)
                    .HasColumnName("Added_By")
                    .HasMaxLength(256);

                entity.Property(e => e.ApprovedBy)
                    .HasColumnName("Approved_By")
                    .HasMaxLength(256);

                entity.Property(e => e.Categorize).HasMaxLength(100);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CustomStyle).HasMaxLength(1000);

                entity.Property(e => e.DateAdded)
                    .HasColumnName("Date_Added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateApproved)
                    .HasColumnName("Date_Approved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ExpectedOutput).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(100);

                entity.Property(e => e.NoEventOccuredComment).HasMaxLength(4000);

                entity.Property(e => e.Objective).HasMaxLength(500);

                entity.Property(e => e.ParticipationAttendee).HasMaxLength(1024);

                entity.Property(e => e.ParticipationInvitee).HasMaxLength(1024);

                entity.Property(e => e.RecurrenceEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrenceStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrenceType).HasMaxLength(10);

                entity.Property(e => e.RemiderEndDate).HasColumnType("datetime");

                entity.Property(e => e.RemiderRule).HasMaxLength(2000);

                entity.Property(e => e.RemiderStartDate).HasColumnType("datetime");

                entity.Property(e => e.RemiderType).HasMaxLength(10);

                entity.Property(e => e.SourceOfFundingId).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.VenueCode).HasMaxLength(50);

                entity.Property(e => e.VenueList).HasMaxLength(2000);
            });

            modelBuilder.Entity<ScheduleEventFileCollection>(entity =>
            {
                entity.ToTable("ScheduleEvent_FileCollection");

                entity.Property(e => e.Id).HasMaxLength(100);

                entity.Property(e => e.Details).HasMaxLength(256);

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.SheduleAppId)
                    .HasColumnName("SheduleAppID")
                    .HasMaxLength(50);

                entity.HasOne(d => d.SheduleApp)
                    .WithMany(p => p.ScheduleEventFileCollection)
                    .HasForeignKey(d => d.SheduleAppId)
                    .HasConstraintName("FK_ScheduleEvent_FileCollection_ScheduleEvent");
            });

            modelBuilder.Entity<Sheet4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet4$");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(255);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(255);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SsmtAAreaVisited>(entity =>
            {
                entity.HasKey(e => e.AreaId)
                    .HasName("PK_ssmt_area_visited");

                entity.ToTable("ssmt_a_area_visited");

                entity.Property(e => e.AreaId)
                    .HasColumnName("area_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SsmtACategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("ssmt_a_category");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SsmtAIndicator>(entity =>
            {
                entity.HasKey(e => e.IndicatorId);

                entity.ToTable("ssmt_a_indicator");

                entity.Property(e => e.IndicatorId)
                    .HasColumnName("indicator_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SsmtAIndicator)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_ssmt_a_indicator_ssmt_a_category");
            });

            modelBuilder.Entity<SsmtAIndicatorSubindicator>(entity =>
            {
                entity.HasKey(e => new { e.IndicatorId, e.SubindicatorId });

                entity.ToTable("ssmt_a_indicator_subindicator");

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.HasOne(d => d.Indicator)
                    .WithMany(p => p.SsmtAIndicatorSubindicator)
                    .HasForeignKey(d => d.IndicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_a_indicator_subindicator_ssmt_a_indicator");

                entity.HasOne(d => d.Subindicator)
                    .WithMany(p => p.SsmtAIndicatorSubindicator)
                    .HasForeignKey(d => d.SubindicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_a_indicator_subindicator_ssmt_a_subindicator");
            });

            modelBuilder.Entity<SsmtAJointVisit>(entity =>
            {
                entity.HasKey(e => e.JointVisitCode);

                entity.ToTable("ssmt_a_joint_visit");

                entity.Property(e => e.JointVisitCode)
                    .HasColumnName("joint_visit_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.JointVisitDesc)
                    .HasColumnName("joint_visit_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SsmtALocation>(entity =>
            {
                entity.HasKey(e => e.LocationId);

                entity.ToTable("ssmt_a_location");

                entity.Property(e => e.LocationId)
                    .HasColumnName("location_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.LocationDesc)
                    .HasColumnName("location_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SsmtAPersonnel>(entity =>
            {
                entity.HasKey(e => e.PersonnelId);

                entity.ToTable("ssmt_a_personnel");

                entity.Property(e => e.PersonnelId)
                    .HasColumnName("personnel_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.PersonnelDesc)
                    .HasColumnName("personnel_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SsmtARptCategory>(entity =>
            {
                entity.HasKey(e => e.RptCategoryId);

                entity.ToTable("ssmt_a_rpt_category");

                entity.Property(e => e.RptCategoryId)
                    .HasColumnName("rpt_category_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.RptCategoryDesc)
                    .HasColumnName("rpt_category_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SsmtARptIndicator>(entity =>
            {
                entity.HasKey(e => e.RptIndicatorId);

                entity.ToTable("ssmt_a_rpt_indicator");

                entity.Property(e => e.RptIndicatorId)
                    .HasColumnName("rpt_indicator_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.RptIndicatorDesc)
                    .HasColumnName("rpt_indicator_desc")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<SsmtASiteVolume>(entity =>
            {
                entity.HasKey(e => e.SiteVolumeCode);

                entity.ToTable("ssmt_a_site_volume");

                entity.Property(e => e.SiteVolumeCode)
                    .HasColumnName("site_volume_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SiteVolumeDesc)
                    .HasColumnName("site_volume_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SsmtASsmts>(entity =>
            {
                entity.HasKey(e => e.SsmtsCode);

                entity.ToTable("ssmt_a_ssmts");

                entity.Property(e => e.SsmtsCode)
                    .HasColumnName("ssmts_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SsmtsDesc)
                    .HasColumnName("ssmts_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SsmtASubindicator>(entity =>
            {
                entity.HasKey(e => e.SubindicatorId);

                entity.ToTable("ssmt_a_subindicator");

                entity.Property(e => e.SubindicatorId)
                    .HasColumnName("subindicator_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<SsmtASubmittedDoc>(entity =>
            {
                entity.HasKey(e => e.SubmittedDocCode);

                entity.ToTable("ssmt_a_submitted_doc");

                entity.Property(e => e.SubmittedDocCode)
                    .HasColumnName("submitted_doc_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.SubmittedDoc)
                    .HasColumnName("submitted_doc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<SsmtATitle>(entity =>
            {
                entity.HasKey(e => e.TitleId);

                entity.ToTable("ssmt_a_title");

                entity.Property(e => e.TitleId)
                    .HasColumnName("title_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SsmtAVisitPurpose>(entity =>
            {
                entity.HasKey(e => e.VisitPurposeCode);

                entity.ToTable("ssmt_a_visit_purpose");

                entity.Property(e => e.VisitPurposeCode)
                    .HasColumnName("visit_purpose_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.VisitPurposeDesc)
                    .HasColumnName("visit_purpose_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<SsmtAreaVisited>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisited, e.AreaId })
                    .HasName("PK_ssmt_area_visited_1");

                entity.ToTable("ssmt_area_visited");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.AreaId).HasColumnName("area_id");

                entity.Property(e => e.Visited).HasColumnName("visited");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.SsmtAreaVisited)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_area_visited_ssmt_a_area_visited");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtAreaVisited)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisited })
                    .HasConstraintName("FK_ssmt_area_visited_ssmt_facility");
            });

            modelBuilder.Entity<SsmtComment>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.CategoryId });

                entity.ToTable("ssmt_comment");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(4000);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SsmtComment)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_comment_ssmt_a_category");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtComment)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_comment_ssmt_facility");
            });

            modelBuilder.Entity<SsmtFacility>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit });

                entity.ToTable("ssmt_facility");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.AccreditedArt).HasColumnName("accredited_ART");

                entity.Property(e => e.AddedBy)
                    .HasColumnName("added_by")
                    .HasMaxLength(50);

                entity.Property(e => e.DateAdded)
                    .HasColumnName("date_added")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateEdited)
                    .HasColumnName("date_edited")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateNextVisit)
                    .HasColumnName("date_next_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.EditedBy)
                    .HasColumnName("edited_by")
                    .HasMaxLength(50);

                entity.Property(e => e.ReadinessArt).HasColumnName("readiness_ART");

                entity.Property(e => e.SiteVolume).HasColumnName("site_volume");

                entity.Property(e => e.Ssmts).HasColumnName("SSMTs");

                entity.Property(e => e.VisitMajorIssue)
                    .HasColumnName("visit_major_issue")
                    .HasMaxLength(4000);

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.SsmtFacility)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_facility_A_Facilities");

                entity.HasOne(d => d.SiteVolumeNavigation)
                    .WithMany(p => p.SsmtFacility)
                    .HasForeignKey(d => d.SiteVolume)
                    .HasConstraintName("FK_ssmt_facility_ssmt_a_site_volume");

                entity.HasOne(d => d.SsmtsNavigation)
                    .WithMany(p => p.SsmtFacility)
                    .HasForeignKey(d => d.Ssmts)
                    .HasConstraintName("FK_ssmt_facility_ssmt_a_ssmts");
            });

            modelBuilder.Entity<SsmtFacilitySummaryScore>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.CategoryId });

                entity.ToTable("ssmt_facility_summary_score");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SsmtFacilitySummaryScore)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_facility_summary_score_ssmt_a_category");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtFacilitySummaryScore)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_facility_summary_score_ssmt_facility");
            });

            modelBuilder.Entity<SsmtIndicator>(entity =>
            {
                entity.HasKey(e => new { e.SubindicatorId, e.IndicatorId, e.FacilityId, e.DateVisited });

                entity.ToTable("ssmt_indicator");

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exist).HasColumnName("exist");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MoHHmis).HasColumnName("MoH_HMIS");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StaffTrained).HasColumnName("staff_trained");

                entity.Property(e => e.YesNo).HasColumnName("yes_no");

                entity.HasOne(d => d.Indicator)
                    .WithMany(p => p.SsmtIndicator)
                    .HasForeignKey(d => d.IndicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_indicator_ssmt_a_indicator");

                entity.HasOne(d => d.Subindicator)
                    .WithMany(p => p.SsmtIndicator)
                    .HasForeignKey(d => d.SubindicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_indicator_ssmt_a_subindicator");

                entity.HasOne(d => d.YesNoNavigation)
                    .WithMany(p => p.SsmtIndicator)
                    .HasForeignKey(d => d.YesNo)
                    .HasConstraintName("FK_ssmt_indicator_A_yes_no");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtIndicator)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisited })
                    .HasConstraintName("FK_ssmt_indicator_ssmt_facility");
            });

            modelBuilder.Entity<SsmtIssuesOnVisit>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.IssueCode });

                entity.ToTable("ssmt_issues_on_visit");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.IssueCode).HasColumnName("issue_code");

                entity.Property(e => e.DateOfFollowUp)
                    .HasColumnName("date_of_follow_up")
                    .HasColumnType("datetime");

                entity.Property(e => e.FindingCurrentVisit)
                    .HasColumnName("finding_current_visit")
                    .HasMaxLength(4000);

                entity.Property(e => e.FollowUpFutureVisit)
                    .HasColumnName("follow_up_future_visit")
                    .HasMaxLength(4000);

                entity.Property(e => e.PlanOfAction)
                    .HasColumnName("plan_of_action")
                    .HasMaxLength(4000);

                entity.Property(e => e.RecommendationCurrentVisit)
                    .HasColumnName("recommendation_current_visit")
                    .HasMaxLength(4000);

                entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");

                entity.Property(e => e.TimelineEnd)
                    .HasColumnName("timeline_end")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimelineStart)
                    .HasColumnName("timeline_start")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<SsmtJointVisit>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.JointVisitCode });

                entity.ToTable("ssmt_joint_visit");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.JointVisitCode).HasColumnName("joint_visit_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.Visited).HasColumnName("visited");

                entity.HasOne(d => d.JointVisitCodeNavigation)
                    .WithMany(p => p.SsmtJointVisit)
                    .HasForeignKey(d => d.JointVisitCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_joint_visit_ssmt_a_joint_visit");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtJointVisit)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_joint_visit_ssmt_facility");
            });

            modelBuilder.Entity<SsmtPersonnel>(entity =>
            {
                entity.ToTable("ssmt_personnel");

                entity.Property(e => e.SsmtPersonnelId)
                    .HasColumnName("ssmt_personnel_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(500);

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.GenderId).HasColumnName("gender_id");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.PersonnelId).HasColumnName("personnel_id");

                entity.Property(e => e.PersonnelName)
                    .HasColumnName("personnel_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Telephone).HasColumnName("telephone");

                entity.Property(e => e.TitleId).HasColumnName("title_id");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.SsmtPersonnel)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_ssmt_personnel_ssmt_a_location");

                entity.HasOne(d => d.Personnel)
                    .WithMany(p => p.SsmtPersonnel)
                    .HasForeignKey(d => d.PersonnelId)
                    .HasConstraintName("FK_ssmt_personnel_ssmt_a_personnel");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtPersonnel)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ssmt_personnel_ssmt_facility");
            });

            modelBuilder.Entity<SsmtRptIndicator>(entity =>
            {
                entity.HasKey(e => new { e.RptIndicatorId, e.RptCategoryId, e.FacilityId, e.DateVisit });

                entity.ToTable("ssmt_rpt_indicator");

                entity.Property(e => e.RptIndicatorId).HasColumnName("rpt_indicator_id");

                entity.Property(e => e.RptCategoryId).HasColumnName("rpt_category_id");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RptCategory)
                    .WithMany(p => p.SsmtRptIndicator)
                    .HasForeignKey(d => d.RptCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_rpt_indicator_ssmt_a_rpt_category");

                entity.HasOne(d => d.RptIndicator)
                    .WithMany(p => p.SsmtRptIndicator)
                    .HasForeignKey(d => d.RptIndicatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_rpt_indicator_ssmt_a_rpt_indicator");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtRptIndicator)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_rpt_indicator_ssmt_facility");
            });

            modelBuilder.Entity<SsmtStockManagementPractices>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCode });

                entity.ToTable("ssmt_stock_management_practices");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcOnStockCard).HasColumnName("AMC_on_stock_card");

                entity.Property(e => e.AmcsEqual).HasColumnName("AMCs_equal");

                entity.Property(e => e.BalancePhysicalCount).HasColumnName("balance_physical_count");

                entity.Property(e => e.BalanceScEqualPc).HasColumnName("balance_SC_equal_PC");

                entity.Property(e => e.BalanceStockCard).HasColumnName("balance_stock_card");

                entity.Property(e => e.CalculatedAmc).HasColumnName("calculated_AMC");

                entity.Property(e => e.CardFilledCorrectly).HasColumnName("card_filled_correctly");

                entity.Property(e => e.HighestBalanceLast6Months).HasColumnName("highest_balance_last_6_months");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MonthlyPhysicalCount).HasColumnName("monthly_physical_count");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StockCardAvialable).HasColumnName("stock_card_avialable");

                entity.Property(e => e.StockCardWithShelfItems).HasColumnName("stock_card_with_shelf_items");

                entity.Property(e => e.StockOutLast3Months).HasColumnName("stock_out_last_3_months");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.SsmtStockManagementPractices)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_stock_management_practices_A_Product");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtStockManagementPractices)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_stock_management_practices_ssmt_facility");
            });

            modelBuilder.Entity<SsmtStockManagementPracticesLab>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCategoryCode });

                entity.ToTable("ssmt_stock_management_practices_lab");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcOnStockCard).HasColumnName("AMC_on_stock_card");

                entity.Property(e => e.AmcsEqual).HasColumnName("AMCs_equal");

                entity.Property(e => e.BalancePhysicalCount).HasColumnName("balance_physical_count");

                entity.Property(e => e.BalanceScEqualPc).HasColumnName("balance_SC_equal_PC");

                entity.Property(e => e.BalanceStockCard).HasColumnName("balance_stock_card");

                entity.Property(e => e.CalculatedAmc).HasColumnName("calculated_AMC");

                entity.Property(e => e.CardFilledCorrectly).HasColumnName("card_filled_correctly");

                entity.Property(e => e.HighestBalanceLast6Months).HasColumnName("highest_balance_last_6_months");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MonthlyPhysicalCount).HasColumnName("monthly_physical_count");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StockCardAvialable).HasColumnName("stock_card_avialable");

                entity.Property(e => e.StockCardWithShelfItems).HasColumnName("stock_card_with_shelf_items");

                entity.Property(e => e.StockOutLast3Months).HasColumnName("stock_out_last_3_months");

                entity.HasOne(d => d.ProductCategoryCodeNavigation)
                    .WithMany(p => p.SsmtStockManagementPracticesLab)
                    .HasForeignKey(d => d.ProductCategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_stock_management_practices_lab_A_Product_Lab_Category");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtStockManagementPracticesLab)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_stock_management_practices_lab_ssmt_facility");
            });

            modelBuilder.Entity<SsmtStockManagementTools>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCode });

                entity.ToTable("ssmt_stock_management_tools");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.DateIssueStockCard)
                    .HasColumnName("date_issue_stock_card")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueVourcher)
                    .HasColumnName("date_issue_vourcher")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTally).HasColumnName("date_tally");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.QuantitiesTally).HasColumnName("quantities_tally");

                entity.Property(e => e.QuantityIssueStockCard).HasColumnName("quantity_issue_stock_card");

                entity.Property(e => e.QuantityIssuedVourcher).HasColumnName("quantity_issued_vourcher");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.SsmtStockManagementTools)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_stock_management_tools_A_Product");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtStockManagementTools)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_stock_management_tools_ssmt_facility");
            });

            modelBuilder.Entity<SsmtStockManagementToolsLab>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCategoryCode });

                entity.ToTable("ssmt_stock_management_tools_lab");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.DateIssueStockCard)
                    .HasColumnName("date_issue_stock_card")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueVourcher)
                    .HasColumnName("date_issue_vourcher")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTally).HasColumnName("date_tally");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.QuantitiesTally).HasColumnName("quantities_tally");

                entity.Property(e => e.QuantityIssueStockCard).HasColumnName("quantity_issue_stock_card");

                entity.Property(e => e.QuantityIssuedVourcher).HasColumnName("quantity_issued_vourcher");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.ProductCategoryCodeNavigation)
                    .WithMany(p => p.SsmtStockManagementToolsLab)
                    .HasForeignKey(d => d.ProductCategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_stock_management_tools_lab_A_Product_Lab_Category");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtStockManagementToolsLab)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_stock_management_tools_lab_ssmt_facility");
            });

            modelBuilder.Entity<SsmtSubmittedDocuments>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.SubmittedDocCode });

                entity.ToTable("ssmt_submitted_documents");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubmittedDocCode).HasColumnName("submitted_doc_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DocumentSubmitted).HasColumnName("document_submitted");

                entity.HasOne(d => d.SubmittedDocCodeNavigation)
                    .WithMany(p => p.SsmtSubmittedDocuments)
                    .HasForeignKey(d => d.SubmittedDocCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_submitted_documents_ssmt_a_submitted_doc");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtSubmittedDocuments)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_submitted_documents_ssmt_facility");
            });

            modelBuilder.Entity<SsmtVerificationLmisData>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCode });

                entity.ToTable("ssmt_verification_lmis_data");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ClosingStockDataAgrees).HasColumnName("closing_stock_data_agrees");

                entity.Property(e => e.ClosingStockFacilityReport).HasColumnName("closing_stock_facility_report");

                entity.Property(e => e.ClosingStockStockCard).HasColumnName("closing_stock_stock_card");

                entity.Property(e => e.ConsumptionDataAgrees).HasColumnName("consumption_data_agrees");

                entity.Property(e => e.ConsumptionFacilityReport).HasColumnName("consumption_facility_report");

                entity.Property(e => e.ConsumptionSiteRecords).HasColumnName("consumption_site_records");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.ProductCodeNavigation)
                    .WithMany(p => p.SsmtVerificationLmisData)
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_verification_lmis_data_A_Product");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtVerificationLmisData)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_verification_lmis_data_ssmt_facility");
            });

            modelBuilder.Entity<SsmtVerificationLmisDataLab>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.ProductCategoryCode });

                entity.ToTable("ssmt_verification_lmis_data_lab");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ClosingStockDataAgrees).HasColumnName("closing_stock_data_agrees");

                entity.Property(e => e.ClosingStockFacilityReport).HasColumnName("closing_stock_facility_report");

                entity.Property(e => e.ClosingStockStockCard).HasColumnName("closing_stock_stock_card");

                entity.Property(e => e.ConsumptionDataAgrees).HasColumnName("consumption_data_agrees");

                entity.Property(e => e.ConsumptionFacilityReport).HasColumnName("consumption_facility_report");

                entity.Property(e => e.ConsumptionSiteRecords).HasColumnName("consumption_site_records");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.ProductCategoryCodeNavigation)
                    .WithMany(p => p.SsmtVerificationLmisDataLab)
                    .HasForeignKey(d => d.ProductCategoryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_verification_lmis_data_lab_A_Product_Lab_Category");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtVerificationLmisDataLab)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_verification_lmis_data_lab_ssmt_facility");
            });

            modelBuilder.Entity<SsmtVerificationPatientData>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.RegimenCode });

                entity.ToTable("ssmt_verification_patient_data");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.ExistingArtRegister).HasColumnName("existing_ART_register");

                entity.Property(e => e.ExistingLmisReport).HasColumnName("existing_LMIS_report");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.NewArtRegister).HasColumnName("new_ART_register");

                entity.Property(e => e.NewLmisReport).HasColumnName("new_LMIS_report");

                entity.Property(e => e.PatientDataTally).HasColumnName("patient_data_tally");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.HasOne(d => d.RegimenCodeNavigation)
                    .WithMany(p => p.SsmtVerificationPatientData)
                    .HasForeignKey(d => d.RegimenCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_verification_patient_data_A_DrugRegimen");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtVerificationPatientData)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .HasConstraintName("FK_ssmt_verification_patient_data_ssmt_facility");
            });

            modelBuilder.Entity<SsmtVisitPurpose>(entity =>
            {
                entity.HasKey(e => new { e.FacilityId, e.DateVisit, e.VisitPurposeCode });

                entity.ToTable("ssmt_visit_purpose");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisitPurposeCode).HasColumnName("visit_purpose_code");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.Visited).HasColumnName("visited");

                entity.HasOne(d => d.VisitPurposeCodeNavigation)
                    .WithMany(p => p.SsmtVisitPurpose)
                    .HasForeignKey(d => d.VisitPurposeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_visit_purpose_ssmt_a_visit_purpose");

                entity.HasOne(d => d.SsmtFacility)
                    .WithMany(p => p.SsmtVisitPurpose)
                    .HasForeignKey(d => new { d.FacilityId, d.DateVisit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ssmt_visit_purpose_ssmt_facility");
            });

            modelBuilder.Entity<StockOnHand>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IsCommited).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OnHand).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OnOrder).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasColumnName("Product Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblErrorLog>(entity =>
            {
                entity.ToTable("tblErrorLog");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpMosAllproducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_MOS_ALLPRODUCTS");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.MoS).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OnOrder)
                    .HasColumnName("On Order")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product Category")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductCode)
                    .HasColumnName("Product Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(100);

                entity.Property(e => e.QuantityOnOrder)
                    .HasColumnName("Quantity OnOrder")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ReportingPeriod)
                    .HasColumnName("Reporting Period")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockOnHand)
                    .HasColumnName("Stock OnHand")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<TmpMosTracer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_MOS_TRACER");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.MoSOrder)
                    .HasColumnName("MoS_Order")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MoSSoH)
                    .HasColumnName("MoS_SoH")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OnOrder)
                    .HasColumnName("On Order")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product Category")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductCode)
                    .HasColumnName("Product Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(100);

                entity.Property(e => e.ReportingPeriod)
                    .HasColumnName("Reporting Period")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockOnHand)
                    .HasColumnName("Stock On Hand")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TracerCommodities)
                    .HasColumnName("Tracer Commodities")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TreatmentEstimatedRecuits>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDate, e.EndDate });

                entity.ToTable("Treatment_EstimatedRecuits");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.TreatmentEstimatedRecuitsAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Treatment_EstimatedRecuits_User_Account");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.TreatmentEstimatedRecuitsEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_Treatment_EstimatedRecuits_User_Account1");
            });

            modelBuilder.Entity<TreatmentFluconazole>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.ConditionCode });

                entity.ToTable("Treatment_Fluconazole");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ConditionCodeNavigation)
                    .WithMany(p => p.TreatmentFluconazole)
                    .HasForeignKey(d => d.ConditionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Treatment_Fluconazole_A_Treatment_Fluconazole");

                entity.HasOne(d => d.FacilityCodeNavigation)
                    .WithMany(p => p.TreatmentFluconazole)
                    .HasForeignKey(d => d.FacilityCode)
                    .HasConstraintName("FK_Treatment_Fluconazole_A_Facilities");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.TreatmentFluconazole)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Treatment_Fluconazole_Order_Header");
            });

            modelBuilder.Entity<TreatmentPatientSummary>(entity =>
            {
                entity.HasKey(e => new { e.OrderNumber, e.RegimenCode })
                    .HasName("PK_Order_PatientSummary");

                entity.ToTable("Treatment_PatientSummary");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Existing03yrs).HasColumnName("Existing_0_3Yrs");

                entity.Property(e => e.Existing1015yrsGreater35Kg).HasColumnName("Existing_10_15Yrs_Greater35Kg");

                entity.Property(e => e.Existing1015yrsLess35Kg).HasColumnName("Existing_10_15Yrs_Less35Kg");

                entity.Property(e => e.Existing310yrs).HasColumnName("Existing_3_10Yrs");

                entity.Property(e => e.New03yrs).HasColumnName("New_0_3Yrs");

                entity.Property(e => e.New1015yrsGreater35Kg).HasColumnName("New_10_15Yrs_Greater35Kg");

                entity.Property(e => e.New1015yrsLess35Kg).HasColumnName("New_10_15Yrs_Less35Kg");

                entity.Property(e => e.New310yrs).HasColumnName("New_3_10Yrs");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.OrderNumberNavigation)
                    .WithMany(p => p.TreatmentPatientSummary)
                    .HasForeignKey(d => d.OrderNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Treatment_PatientSummary_Order_Header");

                entity.HasOne(d => d.RegimenCodeNavigation)
                    .WithMany(p => p.TreatmentPatientSummary)
                    .HasForeignKey(d => d.RegimenCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Treatment_PatientSummary_A_DrugRegimen");
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.HasKey(e => e.UserName);

                entity.ToTable("User_Account");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("Email_Address")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.FacilitorCode).HasColumnName("Facilitor_Code");

                entity.Property(e => e.Password).HasMaxLength(50);
            });

            modelBuilder.Entity<UserMenuOption>(entity =>
            {
                entity.HasKey(e => new { e.UserName, e.MenuItemKey, e.MenuItemType });

                entity.ToTable("User_Menu_Option");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.MenuItemKey)
                    .HasColumnName("MenuItem_Key")
                    .HasMaxLength(35);

                entity.Property(e => e.MenuItemType)
                    .HasColumnName("MenuItem_Type")
                    .HasMaxLength(35)
                    .IsFixedLength();

                entity.Property(e => e.MenuItemEnabled).HasColumnName("MenuItem_Enabled");

                entity.Property(e => e.MenuItemVisible).HasColumnName("MenuItem_Visible");

                entity.HasOne(d => d.UserNameNavigation)
                    .WithMany(p => p.UserMenuOption)
                    .HasForeignKey(d => d.UserName)
                    .HasConstraintName("FK_User_Menu_Option_Users_UserInformation1");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Users__1788CC4CAB4B6D5D");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserApplication");
            });

            modelBuilder.Entity<UsersInRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK__UsersInR__AF2760ADC30CCF36");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UsersInRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UsersInRoleRole");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersInRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UsersInRoleUser");
            });

            modelBuilder.Entity<UsersRoles>(entity =>
            {
                entity.HasKey(e => e.UserRoleCode)
                    .HasName("PK_UserRoles");

                entity.ToTable("Users_Roles");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<UsersUserInformation>(entity =>
            {
                entity.HasKey(e => e.UserName)
                    .HasName("PK_Users");

                entity.ToTable("Users_UserInformation");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.ExpiryDate).HasColumnType("date");

                entity.Property(e => e.GranteeId).HasColumnName("GranteeID");

                entity.Property(e => e.Password).HasMaxLength(50);
            });

            modelBuilder.Entity<UsersUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.ToTable("Users_UserRoles");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(50);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UsersUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_UserRoles_Users_Roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UsersUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Users_UserRoles_Users_UserInformation");
            });

            modelBuilder.Entity<VehicleDriverAllocation>(entity =>
            {
                entity.HasKey(e => e.DriverVehicleCode);

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.DriverPermit)
                    .HasColumnName("Driver_Permit")
                    .HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.VehicleNumber)
                    .HasColumnName("Vehicle_Number")
                    .HasMaxLength(50);

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.VehicleDriverAllocationAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleDriverAllocation_User_Account");

                entity.HasOne(d => d.DeliveryZoneNavigation)
                    .WithMany(p => p.VehicleDriverAllocation)
                    .HasForeignKey(d => d.DeliveryZone)
                    .HasConstraintName("FK_VehicleDriverAllocation_A_DeliveryZone");

                entity.HasOne(d => d.DriverPermitNavigation)
                    .WithMany(p => p.VehicleDriverAllocation)
                    .HasForeignKey(d => d.DriverPermit)
                    .HasConstraintName("FK_VehicleDriverAllocation_A_Driver");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.VehicleDriverAllocationEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_VehicleDriverAllocation_User_Account1");

                entity.HasOne(d => d.VehicleNumberNavigation)
                    .WithMany(p => p.VehicleDriverAllocation)
                    .HasForeignKey(d => d.VehicleNumber)
                    .HasConstraintName("FK_VehicleDriverAllocation_A_Vehicle");
            });

            modelBuilder.Entity<VehiclePackingListAllocation>(entity =>
            {
                entity.HasKey(e => new { e.FacilityCode, e.StartDateOrderForm, e.EndDateOrderForm, e.DriverVehicleCode })
                    .HasName("PK_VehiclePackingListAllocation_1");

                entity.Property(e => e.StartDateOrderForm)
                    .HasColumnName("StartDate_OrderForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDateOrderForm)
                    .HasColumnName("EndDate_OrderForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.VehiclePackingListAllocationAddedByNavigation)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehiclePackingListAllocation_User_Account");

                entity.HasOne(d => d.DriverVehicleCodeNavigation)
                    .WithMany(p => p.VehiclePackingListAllocation)
                    .HasForeignKey(d => d.DriverVehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehiclePackingListAllocation_VehicleDriverAllocation");

                entity.HasOne(d => d.EditedByNavigation)
                    .WithMany(p => p.VehiclePackingListAllocationEditedByNavigation)
                    .HasForeignKey(d => d.EditedBy)
                    .HasConstraintName("FK_VehiclePackingListAllocation_User_Account1");

                entity.HasOne(d => d.ApprovedFacilityOrders)
                    .WithMany(p => p.VehiclePackingListAllocation)
                    .HasForeignKey(d => new { d.FacilityCode, d.StartDateOrderForm, d.EndDateOrderForm })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehiclePackingListAllocation_ApprovedFacilityOrders");
            });

            modelBuilder.Entity<View2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_2");

                entity.Property(e => e.DaysInUse).HasColumnName("days_in_use");

                entity.Property(e => e.DaysIsAvialable).HasColumnName("days_is_avialable");

                entity.Property(e => e.MonthRecorded).HasColumnName("month_recorded");

                entity.Property(e => e.Registration)
                    .IsRequired()
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.Utilization).HasColumnName("utilization");

                entity.Property(e => e.YearRecorded).HasColumnName("year_recorded");
            });

            modelBuilder.Entity<ViewAExpectedReports>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_A_ExpectedReports");

                entity.Property(e => e.Arv).HasColumnName("ARV");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Laboratory).HasColumnName("LABORATORY");

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Smc).HasColumnName("SMC");

                entity.Property(e => e.Testkits).HasColumnName("TESTKITS");
            });

            modelBuilder.Entity<ViewAFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_A_Facility");

                entity.Property(e => e.ActiveArt).HasColumnName("Active_ART");

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.Dsdm)
                    .HasColumnName("DSDM")
                    .HasMaxLength(250);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NearestPublicHfDistance).HasColumnName("Nearest_Public_HF_Distance");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.VillageId)
                    .HasColumnName("Village_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewAProductLabCat2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_A_Product_Lab_Cat_2");

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewAProductLabCat23>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_A_Product_Lab_Cat_2_3");

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewAllocationArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_arv");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");
            });

            modelBuilder.Entity<ViewAllocationArvBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_arv_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewAllocationHivRtk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_hiv_rtk");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");
            });

            modelBuilder.Entity<ViewAllocationHivRtkBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_hiv_rtk_base");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewAllocationSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_smc");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");
            });

            modelBuilder.Entity<ViewAllocationSmcBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_allocation_smc_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewApprovedOrdersSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_approved_orders_smc");

                entity.Property(e => e.ActualNumber).HasColumnName("actual_number");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedBy)
                    .HasColumnName("Approved_By")
                    .HasMaxLength(50);

                entity.Property(e => e.ApprovedDate)
                    .HasColumnName("Approved_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ApprovedOrder).HasColumnName("approved_order");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TargetNumber).HasColumnName("target_number");
            });

            modelBuilder.Entity<ViewArvMonthYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_arv_monthYear");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewAspNetRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AspNetRoles");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewBatchDel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_batch_del");

                entity.Property(e => e.CheckMe).HasColumnName("check_me");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.JMonth).HasColumnName("J_MONTH");

                entity.Property(e => e.JYear).HasColumnName("J_YEAR");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCArvPnIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_arv_pn_ip");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);
            });

            modelBuilder.Entity<ViewCArvPnLoC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_arv_pn_LoC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");
            });

            modelBuilder.Entity<ViewCCcuComplaintAccuteness>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_ccu_complaint_accuteness");

                entity.Property(e => e.AccutenessDesc)
                    .HasColumnName("accuteness_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ERegComplaintAccuteness).HasColumnName("e_reg_complaint_accuteness");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MYearMonth)
                    .HasColumnName("mYearMonth")
                    .HasMaxLength(15);

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCCcuComplaintAvgDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_ccu_complaint_AvgDays");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MMonthYear)
                    .HasColumnName("mMonthYear")
                    .HasMaxLength(15);

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCCcuComplaintCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_ccu_complaint_category");

                entity.Property(e => e.ComplaintCategoryDesc)
                    .HasColumnName("complaint_category_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegComplaintCategory).HasColumnName("e_reg_complaint_category");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MYearMonth)
                    .HasColumnName("mYearMonth")
                    .HasMaxLength(15);

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCCcuComplaintStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_ccu_complaint_status");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(128);

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MYearMonth)
                    .HasColumnName("mYearMonth")
                    .HasMaxLength(15);

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCConAmcSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_amc_smc");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XYear).HasColumnName("xYear");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(15);

                entity.Property(e => e.YearMonth).HasColumnName("yearMonth");
            });

            modelBuilder.Entity<ViewCConAmcSmcX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_amc_smc_x");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCConFArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_f_arv");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCConFSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_f_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCConFTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_f_tk");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCConPArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_p_arv");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XbYearMonth).HasColumnName("xbYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ViewCConPSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_p_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ViewCConPTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_con_p_tk");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(30);

                entity.Property(e => e.Product).HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear)
                    .HasColumnName("xYear")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<ViewCPnArvC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_c");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnArvDiflucan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_diflucan");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(128);

                entity.Property(e => e.Condtion).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnArvDiflucanX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_diflucan_x");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(128);

                entity.Property(e => e.Condtion).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCPnArvFluconazole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_fluconazole");

                entity.Property(e => e.Condition).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCPnArvFluconazoleA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_fluconazole_a");

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewCPnArvFluconazoleB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_fluconazole_b");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCPnArvT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_t");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(128);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewCPnArvTX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_arv_t_x");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(128);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");

                entity.Property(e => e.XYearMonth)
                    .HasColumnName("xYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnSmcT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_smc_t");

                entity.Property(e => e.Classification)
                    .HasColumnName("classification")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnTkIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_tk_ip");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnTkLoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_tk_loc");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnTkT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_tk_t");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");

                entity.Property(e => e.XmYearMonth)
                    .HasColumnName("xmYearMonth")
                    .HasMaxLength(17);
            });

            modelBuilder.Entity<ViewCPnTkTX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_c_pn_tk_t_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");

                entity.Property(e => e.XYearMonth).HasColumnName("xYearMonth");
            });

            modelBuilder.Entity<ViewChssAnnualAccurateStockCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_annual_Accurate_StockCard");

                entity.Property(e => e.AccurateStock).HasColumnName("Accurate_Stock");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssAnnualConnectedToSap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_annual_ConnectedToSap");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssAnnualLmisTrained>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_annual_LMIS_Trained");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssAnnualSupervisionVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_annual_Supervision visits");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SpursVisits).HasColumnName("Spurs_visits");
            });

            modelBuilder.Entity<ViewChssMobileFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CHSS_Mobile_Facility");

                entity.Property(e => e.ArtInchargeContact)
                    .HasColumnName("ART_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.ArtInchargeName)
                    .HasColumnName("ART_Incharge_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityInchargeContact)
                    .HasColumnName("Facility_Incharge_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.FacilityInchargeName)
                    .HasColumnName("Facility_Incharge_Name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MmsContact)
                    .HasColumnName("MMS_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.MmsName)
                    .HasColumnName("MMS_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.PharmaconvigilenceContact)
                    .HasColumnName("Pharmaconvigilence_Contact")
                    .HasMaxLength(20);

                entity.Property(e => e.PharmaconvigilenceName)
                    .HasColumnName("Pharmaconvigilence_Name")
                    .HasMaxLength(100);

                entity.Property(e => e.SupervisionNo).HasColumnName("Supervision_No");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewChssMonthAccurateStockCards>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Month_Accurate_Stock_Cards");

                entity.Property(e => e.AccurateStock).HasColumnName("Accurate_Stock");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssMonthConnectedToSap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Month_ConnectedToSap");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssMonthLmisTrained>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Month_LMIS_Trained");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssMonthSupervisionVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Month_Supervision visits");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SpursVisits).HasColumnName("Spurs_visits");
            });

            modelBuilder.Entity<ViewChssQuarterAccurateStockCards>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Quarter_Accurate_StockCards");

                entity.Property(e => e.AccurateStock).HasColumnName("Accurate_Stock");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssQuarterLmisTrained>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Quarter_LMIS_Trained");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssQuarterSupervisionVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Quarter_Supervision visits");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.SpursVisits).HasColumnName("Spurs_visits");
            });

            modelBuilder.Entity<ViewChssQuaterConnectedToSap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_Quater_ConnectedToSap");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewChssStockDammy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Chss_stock_Dammy");

                entity.Property(e => e.AccurateStock).HasColumnName("Accurate_Stock");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewConsumptionArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_arv");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");
            });

            modelBuilder.Entity<ViewConsumptionArvPmtct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_arv_pmtct");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewConsumptionHivRtk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_hiv_RTK");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");
            });

            modelBuilder.Entity<ViewConsumptionHivRtkBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_hiv_RTK_base");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewConsumptionPatient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_patient");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientNo).HasColumnName("patient_no");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewConsumptionSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_smc");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");
            });

            modelBuilder.Entity<ViewConsumptionSmcBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_consumption_smc_base");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrystalAloocationTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_aloocation_tk");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrystalCcu>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalCcuAverageDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_average_days");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");
            });

            modelBuilder.Entity<ViewCrystalCcuAverageDaysX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_average_days_x");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalCcuComplaintAccuteness>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_complaint_accuteness");

                entity.Property(e => e.Critical).HasColumnName("CRITICAL");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.Major).HasColumnName("MAJOR");

                entity.Property(e => e.Minor).HasColumnName("MINOR");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalCcuComplaintCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_complaint_category");

                entity.Property(e => e.CommunicationGap).HasColumnName("COMMUNICATION_GAP");

                entity.Property(e => e.CustomerCare).HasColumnName("CUSTOMER_CARE");

                entity.Property(e => e.EmergencyOrder).HasColumnName("EMERGENCY_ORDER");

                entity.Property(e => e.Finance).HasColumnName("FINANCE");

                entity.Property(e => e.InappropriateWrongSupply).HasColumnName("INAPPROPRIATE_WRONG_SUPPLY");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Other).HasColumnName("OTHER");

                entity.Property(e => e.OverStocks).HasColumnName("OVER_STOCKS");

                entity.Property(e => e.ProductQuality).HasColumnName("PRODUCT_QUALITY");

                entity.Property(e => e.StockOut).HasColumnName("STOCK_OUT");
            });

            modelBuilder.Entity<ViewCrystalCcuComplaintNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_complaint_no");

                entity.Property(e => e.ComplaintNo).HasColumnName("complaint_no");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalCcuResolutionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_resolution_status");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalCcuResolved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_ccu_resolved");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalFacilitySector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_facility_sector");

                entity.Property(e => e.NoOfFacilities).HasColumnName("no_of_facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalFacilitySectorBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_facility_sector_base");

                entity.Property(e => e.FacilityInSector).HasColumnName("facility_in_sector");

                entity.Property(e => e.Sector)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalFoActionTaken>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_ActionTaken");

                entity.Property(e => e.ActionDate)
                    .HasColumnName("Action_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ActionDescription)
                    .HasColumnName("Action_description")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ActionId).HasColumnName("Action_id");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalFoComplaint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_complaint");

                entity.Property(e => e.AccutenessDesc)
                    .HasColumnName("accuteness_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CommModeDesc)
                    .HasColumnName("comm_mode_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.CommunicatedByLev1)
                    .IsRequired()
                    .HasColumnName("Communicated_By_Lev1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CommunicatedByLev1Date)
                    .HasColumnName("Communicated_By_Lev1Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev2)
                    .IsRequired()
                    .HasColumnName("Communicated_By_Lev2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CommunicatedByLev2Date)
                    .HasColumnName("Communicated_By_Lev2Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev3)
                    .IsRequired()
                    .HasColumnName("Communicated_By_Lev3")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintDetails)
                    .HasColumnName("e_reg_complaint_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateResolved)
                    .HasColumnName("e_reg_date_resolved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegExpectedDateResolution)
                    .HasColumnName("e_reg_expected_date_resolution")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FeedbackDate)
                    .HasColumnName("Feedback_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelofCare).HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalFoDetailedInvestigation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_Detailed_Investigation");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewCrystalFoDetailedInvestigationReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_Detailed_Investigation_Report");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CancelShipment)
                    .IsRequired()
                    .HasColumnName("Cancel_Shipment")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.CommonProblem)
                    .IsRequired()
                    .HasColumnName("Common_Problem")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ConductGmp)
                    .IsRequired()
                    .HasColumnName("Conduct_GMP")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DiferShipment)
                    .IsRequired()
                    .HasColumnName("Difer_Shipment")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityQuarantine)
                    .IsRequired()
                    .HasColumnName("Facility_Quarantine")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.InvolveNda)
                    .IsRequired()
                    .HasColumnName("Involve_NDA")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ObtainReplacement)
                    .IsRequired()
                    .HasColumnName("Obtain_Replacement")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OtherAction)
                    .IsRequired()
                    .HasColumnName("Other_Action")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductProperlyTransported)
                    .IsRequired()
                    .HasColumnName("Product_Properly_Transported")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductProperlyUsed)
                    .IsRequired()
                    .HasColumnName("Product_Properly_Used")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductWellHandled)
                    .IsRequired()
                    .HasColumnName("Product_Well_Handled")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RecallProduct)
                    .IsRequired()
                    .HasColumnName("Recall_Product")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ReferSample)
                    .IsRequired()
                    .HasColumnName("Refer_Sample")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.SwitchProduct)
                    .IsRequired()
                    .HasColumnName("Switch_Product")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseQuarantine)
                    .IsRequired()
                    .HasColumnName("Warehouse_Quarantine")
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalFoPreliminaryInvestigation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_Preliminary_Investigation");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewCrystalFoPreliminaryInvestigationReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_fo_Preliminary_Investigation_Report");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CancelShipment)
                    .IsRequired()
                    .HasColumnName("Cancel_Shipment")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DiferShipment)
                    .IsRequired()
                    .HasColumnName("Difer_Shipment")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityQuarantine)
                    .IsRequired()
                    .HasColumnName("Facility_Quarantine")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MaulPipline)
                    .IsRequired()
                    .HasColumnName("Maul_Pipline")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ObtainReplacement)
                    .IsRequired()
                    .HasColumnName("Obtain_Replacement")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OrdersAboutDispatched)
                    .IsRequired()
                    .HasColumnName("Orders_about_Dispatched")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OrganolepicProperty)
                    .IsRequired()
                    .HasColumnName("Organolepic_Property")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OtherActions)
                    .IsRequired()
                    .HasColumnName("Other_Actions")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSampleSent)
                    .IsRequired()
                    .HasColumnName("Product_Sample_Sent")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSuppliedByMaul)
                    .IsRequired()
                    .HasColumnName("Product_Supplied_By_Maul")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSuppliedOtherFacilities)
                    .IsRequired()
                    .HasColumnName("Product_Supplied_Other_Facilities")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SameComplaintRegistered)
                    .IsRequired()
                    .HasColumnName("Same_Complaint_Registered")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StockAtMaul)
                    .IsRequired()
                    .HasColumnName("Stock_At_Maul")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SwitchProduct)
                    .IsRequired()
                    .HasColumnName("Switch_Product")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseQuarantine)
                    .IsRequired()
                    .HasColumnName("Warehouse_Quarantine")
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisAllProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_AllProducts");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product_Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisAllProducts1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_AllProducts_1");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Mos).HasColumnName("MOS");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product_Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisAllProductsFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_AllProducts_Final");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LendOut).HasColumnName("Lend_Out");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Mos).HasColumnName("MOS");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product_Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StockRecommendation)
                    .IsRequired()
                    .HasColumnName("Stock_Recommendation")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.StockStatus)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisAllcationLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_allcation_lab");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrystalLmisAllcationSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_allcation_smc");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisAllocationSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_allocation_smc");

                entity.Property(e => e.AllocationMonth)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationYear)
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderFulfillment).HasColumnName("order_fulfillment");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisConsumptionSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_consumption_smc");

                entity.Property(e => e.AllocationMonth)
                    .HasColumnName("allocation_month")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.AllocationYear)
                    .HasColumnName("allocation_year")
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode)
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode1).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockLevel).HasColumnName("stock_level");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_art");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingArtA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_art_a");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingArtB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_art_b");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_lab");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingLabA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_lab_a");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingLabB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_lab_b");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingTestkits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_testkits");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingTestkitsA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_testkits_a");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);
            });

            modelBuilder.Entity<ViewCrystalLmisExpiryTrackingTestkitsB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_expiry_tracking_testkits_b");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewCrystalLmisFrostproducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_FROSTProducts");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product_Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpArvC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_arv_c");

                entity.Property(e => e.Adult).HasColumnName("ADULT");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Paediatic).HasColumnName("PAEDIATIC");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpArvR>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_arv_r");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.Existing).HasColumnName("EXISTING");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.New).HasColumnName("NEW");

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpArvT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_arv_t");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpArvX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_arv_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientIpTkX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_ip_tk_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ExpectedByIp).HasColumnName("ExpectedByIP");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientLocArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_loc_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LoCCode).HasColumnName("LoC_code");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientLocArvX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_loc_arv_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LoCCode).HasColumnName("LoC_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientLocTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_loc_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LocCode).HasColumnName("loc_code");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientLocTkX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_loc_tk_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LocCode).HasColumnName("loc_code");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientNoBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_no_base");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryMonth).HasColumnName("summary_month");

                entity.Property(e => e.SummaryYear).HasColumnName("summary_year");

                entity.Property(e => e.TotalPatients).HasColumnName("Total_Patients");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientSectorArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_sector_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisPatientSectorTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_sector_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientTestTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_test_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.Determine).HasColumnName("DETERMINE");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Statpak).HasColumnName("STATPAK");

                entity.Property(e => e.Unigold).HasColumnName("UNIGOLD");
            });

            modelBuilder.Entity<ViewCrystalLmisPatientTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_patient_tk");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LocCode).HasColumnName("loc_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewCrystalLmisRrArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrArvBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.NoOfFacilities).HasColumnName("no_of_facilities");

                entity.Property(e => e.ReportingRate).HasColumnName("reporting_rate");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrystalLmisRrArvX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrArvX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrArvX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrArvZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_arv_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_lab");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrLabX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_lab_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrLabX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_lab_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrLabX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_lab_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrLabZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_lab_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_oi");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrOiX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_oi_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrOiX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_oi_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrOiX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_oi_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrOiZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_oi_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_rutf");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrRutfX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_rutf_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrRutfX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_rutf_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrRutfX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_rutf_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrRutfZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_rutf_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_smc");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrSmcX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_smc_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrSmcX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_smc_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrSmcX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_smc_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrSmcZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_smc_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tb");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTbX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tb_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTbX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tb_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTbX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tb_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTbZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tb_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTkX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tk_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTkX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tk_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTkX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tk_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrTkZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_tk_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrVl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_vl");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrVlX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_vl_x");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrVlX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_vl_x2");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrVlX3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_vl_x3");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisRrVlZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_rr_vl_z");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisSummaryAccredited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_accredited");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisSummaryDistrict>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_district");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");
            });

            modelBuilder.Entity<ViewCrystalLmisSummaryExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_expected");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.Pc).HasColumnName("PC");
            });

            modelBuilder.Entity<ViewCrystalLmisSummaryIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_ip");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisSummaryLoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_loc");

                entity.Property(e => e.LoC).HasMaxLength(150);

                entity.Property(e => e.LoCCode).HasColumnName("LoC_code");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisSummarySupported>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_summary_supported");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_arv");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_lab");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_oi");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_rutf");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_smc");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_tb");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrystalLmisTimelinessVl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_crystal_lmis_timeliness_vl");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("Month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.NoFacilities).HasColumnName("No_Facilities");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDashChssConnectedToSap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_Chss_ConnectedToSAP");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashChssScores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_Chss_Scores");

                entity.Property(e => e.Above20).HasColumnName("Above_20");

                entity.Property(e => e.Below20).HasColumnName("Below_20");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashExpectedVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_expected-visits");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.VisitNo).HasColumnName("Visit_No");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashFunctionalRx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_FunctionalRx");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Question).HasColumnType("text");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashStockManagment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_StockManagment");

                entity.Property(e => e.Amc)
                    .HasColumnName("AMC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AmcComparison).HasColumnName("AMC_Comparison");

                entity.Property(e => e.BalanceComparison)
                    .IsRequired()
                    .HasColumnName("Balance_Comparison")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CalculatedAmc).HasColumnName("Calculated_AMC");

                entity.Property(e => e.CardAvailability)
                    .IsRequired()
                    .HasColumnName("Card_Availability")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ComprehensiveImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.CorrectCardFil)
                    .IsRequired()
                    .HasColumnName("Correct_Card_Fil")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CorrectStockBookUse)
                    .IsRequired()
                    .HasColumnName("Correct_Stock_Book_Use")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiredQuantity).HasColumnName("Expired_Quantity");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityQuantity).HasColumnName("Facility_Quantity");

                entity.Property(e => e.ImplimentingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemAvailable).HasColumnName("Item_Available");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("Level_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.MonthOfStock).HasColumnName("Month_Of_Stock");

                entity.Property(e => e.MonthlyPhysicalCount)
                    .IsRequired()
                    .HasColumnName("Monthly_Physical_Count")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.OutOfStockDays).HasColumnName("Out_Of_Stock_Days");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PharmacyQuantity).HasColumnName("Pharmacy_Quantity");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityIssued).HasColumnName("Quantity_Issued");

                entity.Property(e => e.QuantityToBorrow).HasColumnName("Quantity_ToBorrow");

                entity.Property(e => e.QuantityToLend).HasColumnName("Quantity_ToLend");

                entity.Property(e => e.Recommendation)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StockBookAvailability)
                    .IsRequired()
                    .HasColumnName("Stock_Book_Availability")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StockCardBalance)
                    .HasColumnName("Stock_Card_Balance")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.StockStatus)
                    .IsRequired()
                    .HasColumnName("Stock_Status")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.StoreQuantity).HasColumnName("Store_Quantity");
            });

            modelBuilder.Entity<ViewDashVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_visits");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.NextPlannedVisit)
                    .HasColumnName("next_planned_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.VisitNo).HasColumnName("Visit_No");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashWorkingStockManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Dash_WorkingStockManagement");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("date");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.WithStockCard).HasColumnName("With_Stock_Card");

                entity.Property(e => e.WithoutStockCard).HasColumnName("Without_Stock_Card");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDashboardConsumptionFacilityArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_consumption_Facility_ART");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewDashboardConsumptionFacilityHiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_consumption_Facility_HIV");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewDashboardConsumptionHiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_consumption_HIV");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewDashboardFacilityTrackingOrderStautus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_Facility_Tracking_order_stautus");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDashboardPatientsNumbersArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_patientsNumbers_ART");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);
            });

            modelBuilder.Entity<ViewDashboardPatientsNumbersArtFluconazole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_patientsNumbers_ART_Fluconazole");

                entity.Property(e => e.AdultsFluconazole).HasColumnName("Adults_Fluconazole");

                entity.Property(e => e.ChildrenFluconazole).HasColumnName("Children_Fluconazole");

                entity.Property(e => e.Condition).HasMaxLength(50);

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.TotalPatientsFluconazole).HasColumnName("TotalPatients_Fluconazole");
            });

            modelBuilder.Entity<ViewDashboardTrackingOrderStautus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_dashboard_Tracking_order_stautus");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.OrderStatus)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.OrderType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_a");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.KpiAvialability)
                    .HasColumnName("kpi_Avialability")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiFuelConsumption)
                    .HasColumnName("kpi_FuelConsumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiKilometersTravelled)
                    .HasColumnName("kpi_KilometersTravelled")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiRunningCostPerKm)
                    .HasColumnName("kpi_RunningCostPerKm")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiUtilization)
                    .HasColumnName("kpi_Utilization")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEnd).HasColumnName("ordometer_end");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassification)
                    .HasColumnName("vehicle_classification")
                    .HasMaxLength(50);

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_b");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.KpiAvialability).HasColumnName("kpi_Avialability");

                entity.Property(e => e.KpiFuelConsumption).HasColumnName("kpi_FuelConsumption");

                entity.Property(e => e.KpiKilometersTravelled).HasColumnName("kpi_KilometersTravelled");

                entity.Property(e => e.KpiRunningCostPerKm).HasColumnName("kpi_RunningCostPerKm");

                entity.Property(e => e.KpiUtilization).HasColumnName("kpi_Utilization");

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEnd).HasColumnName("ordometer_end");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassification)
                    .HasColumnName("vehicle_classification")
                    .HasMaxLength(50);

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiFuelConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_fuel_consumption");

                entity.Property(e => e.Bmonth).HasColumnName("bmonth");

                entity.Property(e => e.Byear).HasColumnName("byear");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiGraph>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_graph");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.KpiAvialability)
                    .HasColumnName("kpi_Avialability")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiFuelConsumption)
                    .HasColumnName("kpi_FuelConsumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiKilometersTravelled)
                    .HasColumnName("kpi_KilometersTravelled")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiRunningCostPerKm)
                    .HasColumnName("kpi_RunningCostPerKm")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiUtilization)
                    .HasColumnName("kpi_Utilization")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEnd).HasColumnName("ordometer_end");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiGraphB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_graph_b");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.KpiAvialability).HasColumnName("kpi_Avialability");

                entity.Property(e => e.KpiFuelConsumption).HasColumnName("kpi_FuelConsumption");

                entity.Property(e => e.KpiKilometersTravelled).HasColumnName("kpi_KilometersTravelled");

                entity.Property(e => e.KpiRunningCostPerKm).HasColumnName("kpi_RunningCostPerKm");

                entity.Property(e => e.KpiUtilization).HasColumnName("kpi_Utilization");

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEnd).HasColumnName("ordometer_end");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassification)
                    .HasColumnName("vehicle_classification")
                    .HasMaxLength(50);

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiGraphMonthA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_graph_month_a");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.KpiAvialability).HasColumnName("kpi_Avialability");

                entity.Property(e => e.KpiFuelConsumption).HasColumnName("kpi_FuelConsumption");

                entity.Property(e => e.KpiKilometersTravelled).HasColumnName("kpi_KilometersTravelled");

                entity.Property(e => e.KpiRunningCostPerKm).HasColumnName("kpi_RunningCostPerKm");

                entity.Property(e => e.KpiUtilization).HasColumnName("kpi_Utilization");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiGraphMonthB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_graph_month_b");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.KpiAvialability).HasColumnName("kpi_Avialability");

                entity.Property(e => e.KpiFuelConsumption).HasColumnName("kpi_FuelConsumption");

                entity.Property(e => e.KpiKilometersTravelled).HasColumnName("kpi_KilometersTravelled");

                entity.Property(e => e.KpiRunningCostPerKm).HasColumnName("kpi_RunningCostPerKm");

                entity.Property(e => e.KpiUtilization).HasColumnName("kpi_Utilization");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.Vehicles).HasColumnName("vehicles");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiGraphQuarter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_graph_quarter");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.KpiAvialability).HasColumnName("kpi_Avialability");

                entity.Property(e => e.KpiFuelConsumption).HasColumnName("kpi_FuelConsumption");

                entity.Property(e => e.KpiKilometersTravelled).HasColumnName("kpi_KilometersTravelled");

                entity.Property(e => e.KpiRunningCostPerKm).HasColumnName("kpi_RunningCostPerKm");

                entity.Property(e => e.KpiUtilization).HasColumnName("kpi_Utilization");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");
            });

            modelBuilder.Entity<ViewDistKpiIncident>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_incident");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.VehicleRegistartion)
                    .IsRequired()
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiKilometresTravelled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_kilometresTravelled");

                entity.Property(e => e.Bmonth).HasColumnName("bmonth");

                entity.Property(e => e.Byear).HasColumnName("byear");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiLogbookA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_logbook_a");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.OrdometerArrival).HasColumnName("ordometer_arrival");

                entity.Property(e => e.OrdometerEndMonth).HasColumnName("Ordometer_End_Month");

                entity.Property(e => e.OrdometerStartMonth).HasColumnName("Ordometer_Start_Month");

                entity.Property(e => e.TimeArrival)
                    .HasColumnName("time_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimeStart)
                    .HasColumnName("time_start")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiLogbookB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_logbook_b");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEndMonth).HasColumnName("Ordometer_End_Month");

                entity.Property(e => e.OrdometerStartMonth).HasColumnName("Ordometer_Start_Month");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiLogbookC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_logbook_c");

                entity.Property(e => e.AverageFuelPrice).HasColumnName("Average_Fuel_Price");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.DaysWorked).HasColumnName("Days_Worked");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("Fuel_Added");

                entity.Property(e => e.KpiAvialability)
                    .HasColumnName("kpi_Avialability")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiFuelConsumption)
                    .HasColumnName("kpi_FuelConsumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiKilometersTravelled)
                    .HasColumnName("kpi_KilometersTravelled")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiRunningCostPerKm)
                    .HasColumnName("kpi_RunningCostPerKm")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KpiUtilization)
                    .HasColumnName("kpi_Utilization")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.NoIncidents).HasColumnName("No_Incidents");

                entity.Property(e => e.OrdometerEndMonth).HasColumnName("Ordometer_End_Month");

                entity.Property(e => e.OrdometerStartMonth).HasColumnName("Ordometer_Start_Month");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkingDaysMonth).HasColumnName("Working_Days_Month");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistKpiMaintenance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_maintenance");

                entity.Property(e => e.DaysInWorkshop).HasColumnName("Days_In_Workshop");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MaintenanceCost).HasColumnName("Maintenance_Cost");

                entity.Property(e => e.Registration)
                    .IsRequired()
                    .HasColumnName("registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_running_cost");

                entity.Property(e => e.Bmonth).HasColumnName("bmonth");

                entity.Property(e => e.Byear).HasColumnName("byear");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiSafetyRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_safety_record");

                entity.Property(e => e.Bmonth).HasColumnName("bmonth");

                entity.Property(e => e.Byear).HasColumnName("byear");

                entity.Property(e => e.VehicleRegistartion)
                    .IsRequired()
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistKpiVehiclesActiveYearMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_kpi_vehicles_active_year_month");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");

                entity.Property(e => e.VehicleClassificationId).HasColumnName("vehicle_classification_id");

                entity.Property(e => e.Vehicles).HasColumnName("vehicles");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewDistLogbook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_logbook");

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CheckBox).HasColumnName("check_box");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DestinationFacility).HasColumnName("destination_facility");

                entity.Property(e => e.DestinationOther).HasColumnName("destination_other");

                entity.Property(e => e.DistanceTravelled).HasColumnName("distance_travelled");

                entity.Property(e => e.DriverPermit)
                    .IsRequired()
                    .HasColumnName("driver_permit")
                    .HasMaxLength(150);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("fuel_added");

                entity.Property(e => e.FuelType).HasColumnName("fuel_type");

                entity.Property(e => e.FuelUnitCost).HasColumnName("fuel_unit_cost");

                entity.Property(e => e.Make).HasColumnName("make");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.Property(e => e.OrdometerArrival).HasColumnName("ordometer_arrival");

                entity.Property(e => e.OrdometerStart).HasColumnName("ordometer_start");

                entity.Property(e => e.Passengers)
                    .HasColumnName("passengers")
                    .HasMaxLength(500);

                entity.Property(e => e.Remarks).HasColumnName("remarks");

                entity.Property(e => e.SourceFacility).HasColumnName("source_facility");

                entity.Property(e => e.SourceOther).HasColumnName("source_other");

                entity.Property(e => e.TimeArrival)
                    .HasColumnName("time_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimeStart)
                    .HasColumnName("time_start")
                    .HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistOperatorPermit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_operator_permit");

                entity.Property(e => e.DriverPermitNumber)
                    .IsRequired()
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.JobTitle).HasColumnName("job_title");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.OperatorId)
                    .HasColumnName("operator_id")
                    .HasMaxLength(150);

                entity.Property(e => e.PermitCategory).HasColumnName("permit_category");

                entity.Property(e => e.PermitDateOfIssue)
                    .HasColumnName("permit_date_of_issue")
                    .HasColumnType("datetime");

                entity.Property(e => e.PermitExpiryDate)
                    .HasColumnName("permit_expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ValidPermit).HasColumnName("valid_permit");
            });

            modelBuilder.Entity<ViewDistPackingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_packing_list");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PostingDate)
                    .HasColumnName("Posting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");
            });

            modelBuilder.Entity<ViewDistSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_schedule");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliveryZoneCode).HasMaxLength(50);

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.DriverPermitNumber)
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaulStaff)
                    .IsRequired()
                    .HasColumnName("maul_staff")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(4000);

                entity.Property(e => e.Select).HasColumnName("Select_");

                entity.Property(e => e.StatusDeliveyId).HasColumnName("status_delivey_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TotalNoCartons).HasColumnName("total_no_cartons");

                entity.Property(e => e.TotalWeightCartons).HasColumnName("total_weight_cartons");

                entity.Property(e => e.VehicleRegistration)
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistScheduleMaulStaffRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_schedule_maul_staff_rpt");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDistScheduleRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_schedule_rpt");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.DriverPermitNumber)
                    .IsRequired()
                    .HasColumnName("driver_permit_number")
                    .HasMaxLength(150);

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaulStaff)
                    .IsRequired()
                    .HasColumnName("MAUL_Staff")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Remark).HasMaxLength(4000);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StatusDelivey)
                    .HasColumnName("status_delivey")
                    .HasMaxLength(50);

                entity.Property(e => e.StatusDesc)
                    .HasColumnName("status_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalNoCartons).HasColumnName("total_no_cartons");

                entity.Property(e => e.TotalWeightCartons).HasColumnName("total_weight_cartons");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDistWorkingDays>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_dist_working_days");

                entity.Property(e => e.MonthDesc)
                    .HasColumnName("month_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.MonthId).HasColumnName("month_id");
            });

            modelBuilder.Entity<ViewDistributionSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_distribution_schedule");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LsatPurchasePrice).HasColumnName("Lsat_Purchase_Price");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PostingDate)
                    .HasColumnName("Posting_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PostingMonth).HasColumnName("posting_month");

                entity.Property(e => e.PostingYear).HasColumnName("posting_year");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.Weight)
                    .IsRequired()
                    .HasColumnName("weight")
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewExpectedReportArvIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_arv_IP");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");
            });

            modelBuilder.Entity<ViewExpectedReportArvLoC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_arv_LoC");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");
            });

            modelBuilder.Entity<ViewExpectedReportArvSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_arv_Sector");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");
            });

            modelBuilder.Entity<ViewExpectedReportTkIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_tk_IP");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");
            });

            modelBuilder.Entity<ViewExpectedReportTkLoC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_tk_LoC");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");
            });

            modelBuilder.Entity<ViewExpectedReportTkSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpectedReport_tk_Sector");

                entity.Property(e => e.BbMonth).HasColumnName("bbMonth");

                entity.Property(e => e.BbYear).HasColumnName("bbYear");

                entity.Property(e => e.NoByIp).HasColumnName("NoByIP");
            });

            modelBuilder.Entity<ViewExportAtomicAllProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_All_Products");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasColumnName("Product_Category")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_arv");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicArvEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_arv_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewExportAtomicArvPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_arv_Physical_Count");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicArvTreatmentFluconazole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_arv_Treatment_Fluconazole");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Condition).HasMaxLength(50);

                entity.Property(e => e.ConditionCategory)
                    .IsRequired()
                    .HasColumnName("Condition_Category")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicArvTreatmentPatientSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_arv_Treatment_PatientSummary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Existing03yrs).HasColumnName("Existing_0_3Yrs");

                entity.Property(e => e.Existing1015yrsGreater35Kg).HasColumnName("Existing_10_15Yrs_Greater35Kg");

                entity.Property(e => e.Existing1015yrsLess35Kg).HasColumnName("Existing_10_15Yrs_Less35Kg");

                entity.Property(e => e.Existing310yrs).HasColumnName("Existing_3_10Yrs");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.New03yrs).HasColumnName("New_0_3Yrs");

                entity.Property(e => e.New1015yrsGreater35Kg).HasColumnName("New_10_15Yrs_Greater35Kg");

                entity.Property(e => e.New1015yrsLess35Kg).HasColumnName("New_10_15Yrs_Less35Kg");

                entity.Property(e => e.New310yrs).HasColumnName("New_3_10Yrs");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicHivTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_hiv_tk");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicHivTkEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_hiv_tk_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewExportAtomicHivTkPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_hiv_tk_Physical_Count");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicHivTkSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_hiv_tk_Summary");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Smc).HasColumnName("SMC");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_lab");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicLabEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_lab_emergency");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewExportAtomicLabPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_lab_Physical_Count");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicOiSti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_oi_sti");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicOiStiEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_oi_sti_emergency");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewExportAtomicOiStiPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_oi_sti_Physical_Count");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicOrderRutfSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_Order_RUTF_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedNew).HasColumnName("Expected_New");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicOrderTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_Order_TB");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicOrderTbSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_Order_TB_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicRuft>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_Ruft");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_RUTF");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicRutfSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_Rutf_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedNew).HasColumnName("Expected_New");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicSmcLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_smc_lab");

                entity.Property(e => e.ActualNumber).HasColumnName("actual_number");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LossAdjustment).HasColumnName("loss_adjustment");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.TargetNumber).HasColumnName("target_number");
            });

            modelBuilder.Entity<ViewExportAtomicSmcSlm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_smc_slm");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicSmcSlmEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_smc_slm_emergency");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewExportAtomicSmcSlmPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_smc_slm_Physical_Count");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Form).HasMaxLength(50);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicSmcSlmSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_smc_slm_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_TB");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicTbSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_TB_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicViralLoadReagents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_viral_load_reagents");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("Order_Status")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExportAtomicViralLoadReagentsEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_viral_load_reagents_emergency");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewExportAtomicViralLoadReagentsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_export_atomic_viral_load_reagents_Summary");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComprehensiveImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelDesc)
                    .HasColumnName("level_Desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.PatientLoadDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFacilities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Facilities");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LevelofCare1)
                    .HasColumnName("LevelofCare")
                    .HasMaxLength(150);

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionDescription)
                    .HasColumnName("Region_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFacilitiesSapCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Facilities_SAP_Code");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFacilityGisCodinates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Facility_GIS_Codinates");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewSector).HasColumnName("New_sector");

                entity.Property(e => e.OldSector).HasColumnName("Old_sector");

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFoCertificateReleaseFrmQuarantine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_Certificate_Release_frm_Quarantine");

                entity.Property(e => e.AttachedOther)
                    .HasColumnName("attached_other")
                    .HasMaxLength(250);

                entity.Property(e => e.AttachedOtherDoc).HasColumnName("attached_otherDoc");

                entity.Property(e => e.AuthorizedRepresentativeCategory).HasColumnName("Authorized_Representative_Category");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CopyInvestigationReport).HasColumnName("Copy_Investigation_Report");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.DateRequest)
                    .HasColumnName("Date_request")
                    .HasColumnType("datetime");

                entity.Property(e => e.DosageForm)
                    .HasColumnName("dosage_form")
                    .HasMaxLength(5);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("Expiry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GoodsReturnedNote).HasColumnName("Goods_Returned_Note");

                entity.Property(e => e.GoodsReturnedNoteCommet)
                    .HasColumnName("Goods_Returned_Note_Commet")
                    .IsUnicode(false);

                entity.Property(e => e.ManufactureDate)
                    .HasColumnName("Manufacture_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(250);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductOther)
                    .HasColumnName("product_other")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(50);

                entity.Property(e => e.ReceivedBy).HasColumnName("Received_by");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("Received_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseAuthorizedDate)
                    .HasColumnName("Release_Authorized_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseAuthorizedby).HasColumnName("Release_Authorizedby");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnName("Release_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReleaseInstruction).HasColumnName("Release_Instruction");

                entity.Property(e => e.ReleasedBy).HasColumnName("Released_By");

                entity.Property(e => e.StaffDesignation).HasColumnName("Staff_Designation");

                entity.Property(e => e.StaffEmail)
                    .HasColumnName("Staff_email")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.StaffName)
                    .HasColumnName("Staff_name")
                    .HasMaxLength(150);

                entity.Property(e => e.StaffPhone).HasColumnName("Staff_phone");

                entity.Property(e => e.SummaryOfInvestigations)
                    .HasColumnName("Summary_of_Investigations")
                    .HasMaxLength(1060);

                entity.Property(e => e.Supplier).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewFoComplaintAffectedSites>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_complaint_AffectedSites");

                entity.Property(e => e.AffectedSites).HasMaxLength(256);

                entity.Property(e => e.BriefFeedbackDesc)
                    .HasColumnName("Brief_Feedback_Desc")
                    .HasMaxLength(1024);

                entity.Property(e => e.CommunicatedByLev1)
                    .HasColumnName("Communicated_By_Lev1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CommunicatedByLev1Date)
                    .HasColumnName("Communicated_By_Lev1Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev1Title)
                    .HasColumnName("Communicated_By_Lev1Title")
                    .HasMaxLength(50);

                entity.Property(e => e.CommunicatedByLev2).HasColumnName("Communicated_By_Lev2");

                entity.Property(e => e.CommunicatedByLev2Date)
                    .HasColumnName("Communicated_By_Lev2Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CommunicatedByLev2Email).HasColumnName("Communicated_By_Lev2Email");

                entity.Property(e => e.CommunicatedByLev2Title)
                    .HasColumnName("Communicated_By_Lev2Title")
                    .HasMaxLength(50);

                entity.Property(e => e.ComplainantEmail).HasMaxLength(50);

                entity.Property(e => e.ComplainantMobile).HasMaxLength(25);

                entity.Property(e => e.ComplainantName).HasMaxLength(50);

                entity.Property(e => e.ComplainantPhone).HasMaxLength(50);

                entity.Property(e => e.ComplainantTitle).HasMaxLength(50);

                entity.Property(e => e.ERegAffectedSites).HasColumnName("e_reg_affected_sites");

                entity.Property(e => e.ERegCommunicationMode).HasColumnName("e_reg_communication_mode");

                entity.Property(e => e.ERegComplaintAccuteness).HasColumnName("e_reg_complaint_accuteness");

                entity.Property(e => e.ERegComplaintCategory).HasColumnName("e_reg_complaint_category");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintDetails)
                    .HasColumnName("e_reg_complaint_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ERegComplaintStatus).HasColumnName("e_reg_complaint_status");

                entity.Property(e => e.ERegComplaintTitle)
                    .HasColumnName("e_reg_complaint_Title")
                    .HasMaxLength(560);

                entity.Property(e => e.ERegContactPersonId).HasColumnName("e_reg_contact_person_id");

                entity.Property(e => e.ERegDateComplaint)
                    .HasColumnName("e_reg_date_complaint")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateResolved)
                    .HasColumnName("e_reg_date_resolved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegExpectedDateResolution)
                    .HasColumnName("e_reg_expected_date_resolution")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegMaulStaff).HasColumnName("e_reg_MAUL_Staff");

                entity.Property(e => e.ERegProductCategory).HasColumnName("e_reg_product_category");

                entity.Property(e => e.EmailLetterAttached).HasColumnName("Email_letter_attached");

                entity.Property(e => e.FacilityCode).HasMaxLength(256);

                entity.Property(e => e.Feedback).HasMaxLength(500);

                entity.Property(e => e.FeedbackCommunicated).HasColumnName("Feedback_Communicated");

                entity.Property(e => e.FeedbackDate)
                    .HasColumnName("Feedback_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ip).HasColumnName("IP");

                entity.Property(e => e.IsQualityIssue).HasColumnName("is_quality_issue");

                entity.Property(e => e.NoFeedbackReason)
                    .HasColumnName("No_Feedback_Reason")
                    .HasMaxLength(1024);

                entity.Property(e => e.ProdSamplesProvided).HasColumnName("Prod_Samples_Provided");

                entity.Property(e => e.SupDocEvidenceRec).HasColumnName("Sup_Doc_Evidence_Rec");
            });

            modelBuilder.Entity<ViewFoComplaintCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_complaint_current");

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.ERegAffectedSites).HasColumnName("e_reg_affected_sites");

                entity.Property(e => e.ERegCommunicationMode).HasColumnName("e_reg_communication_mode");

                entity.Property(e => e.ERegComplaintAccuteness).HasColumnName("e_reg_complaint_accuteness");

                entity.Property(e => e.ERegComplaintCategory).HasColumnName("e_reg_complaint_category");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintDetails)
                    .HasColumnName("e_reg_complaint_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegContactPersonId).HasColumnName("e_reg_contact_person_id");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateResolved)
                    .HasColumnName("e_reg_date_resolved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegExpectedDateResolution)
                    .HasColumnName("e_reg_expected_date_resolution")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegProductCategory).HasColumnName("e_reg_product_category");

                entity.Property(e => e.ERegTrackActionDetails)
                    .HasColumnName("e_reg_track_action_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegTrackCode).HasColumnName("e_reg_track_code");

                entity.Property(e => e.ERegTrackDateOfAction)
                    .HasColumnName("e_reg_track_date_of_action")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackMaulStaff)
                    .HasColumnName("e_reg_track_maul_staff")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackStatus).HasColumnName("e_reg_track_status");

                entity.Property(e => e.IsQualityIssue).HasColumnName("is_quality_issue");
            });

            modelBuilder.Entity<ViewFoComplaintCurrentQualityIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_complaint_current_quality_issue");

                entity.Property(e => e.AttachedEmail).HasColumnName("attached_email");

                entity.Property(e => e.AttachedImageEmail)
                    .HasColumnName("attached_image_email")
                    .HasMaxLength(350);

                entity.Property(e => e.AttachedImageLetter)
                    .HasColumnName("attached_image_letter")
                    .HasMaxLength(350);

                entity.Property(e => e.AttachedImagePicture)
                    .HasColumnName("attached_image_picture")
                    .HasColumnType("image");

                entity.Property(e => e.AttachedNoteLetter).HasColumnName("attached_note_letter");

                entity.Property(e => e.AttachedPicture).HasColumnName("attached_picture");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ComplainantEmail)
                    .HasColumnName("complainant_email")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ComplainantName)
                    .HasColumnName("complainant_name")
                    .HasMaxLength(150);

                entity.Property(e => e.ComplainantPhone).HasColumnName("complainant_phone");

                entity.Property(e => e.ComplainantTitle).HasColumnName("complainant_title");

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.DateQualityIssueIdentified)
                    .HasColumnName("date_quality_issue_identified")
                    .HasColumnType("datetime");

                entity.Property(e => e.DescriptionOfQualityIssue)
                    .HasColumnName("description_of_quality_issue")
                    .HasMaxLength(500);

                entity.Property(e => e.DosageForm)
                    .HasColumnName("dosage_form")
                    .HasMaxLength(5);

                entity.Property(e => e.ERegAffectedSites).HasColumnName("e_reg_affected_sites");

                entity.Property(e => e.ERegCommunicationMode).HasColumnName("e_reg_communication_mode");

                entity.Property(e => e.ERegComplaintAccuteness).HasColumnName("e_reg_complaint_accuteness");

                entity.Property(e => e.ERegComplaintCategory).HasColumnName("e_reg_complaint_category");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintDetails)
                    .HasColumnName("e_reg_complaint_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegContactPersonId).HasColumnName("e_reg_contact_person_id");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegDateResolved)
                    .HasColumnName("e_reg_date_resolved")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegExpectedDateResolution)
                    .HasColumnName("e_reg_expected_date_resolution")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegProductCategory).HasColumnName("e_reg_product_category");

                entity.Property(e => e.ERegTrackActionDetails)
                    .HasColumnName("e_reg_track_action_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegTrackCode).HasColumnName("e_reg_track_code");

                entity.Property(e => e.ERegTrackDateOfAction)
                    .HasColumnName("e_reg_track_date_of_action")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackMaulStaff)
                    .HasColumnName("e_reg_track_maul_staff")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackStatus).HasColumnName("e_reg_track_status");

                entity.Property(e => e.InterventionTaken).HasColumnName("intervention_taken");

                entity.Property(e => e.InterventionTakenOther)
                    .HasColumnName("intervention_taken_other")
                    .HasMaxLength(250);

                entity.Property(e => e.IsQualityIssue).HasColumnName("is_quality_issue");

                entity.Property(e => e.Manufacturer)
                    .HasColumnName("manufacturer")
                    .HasMaxLength(250);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductOther)
                    .HasColumnName("product_other")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(50);

                entity.Property(e => e.RecipientName)
                    .HasColumnName("recipient_name")
                    .HasMaxLength(150);

                entity.Property(e => e.RecipientTitle).HasColumnName("recipient_title");
            });

            modelBuilder.Entity<ViewFoComplaintHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_complaint_history");

                entity.Property(e => e.ERegTrackActionCategory).HasColumnName("e_reg_track_action_category");

                entity.Property(e => e.ERegTrackActionDetails)
                    .HasColumnName("e_reg_track_action_details")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegTrackAddedBy)
                    .HasColumnName("e_reg_track_added_by")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackAddedDate)
                    .HasColumnName("e_reg_track_added_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackCode).HasColumnName("e_reg_track_code");

                entity.Property(e => e.ERegTrackComplaintCode).HasColumnName("e_reg_track_complaint_code");

                entity.Property(e => e.ERegTrackDateOfAction)
                    .HasColumnName("e_reg_track_date_of_action")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegTrackMaulStaff)
                    .HasColumnName("e_reg_track_maul_staff")
                    .HasMaxLength(50);

                entity.Property(e => e.ERegTrackStatus).HasColumnName("e_reg_track_status");
            });

            modelBuilder.Entity<ViewFoContacts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_Contacts");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CeEmail)
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.CtTelephon).HasColumnName("ct_telephon");

                entity.Property(e => e.CtTelephone2).HasColumnName("ct_telephone_2");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.PersonalEmail)
                    .HasColumnName("Personal_email")
                    .HasMaxLength(250);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewFoContactsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_Contacts_Details");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CeEmail)
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.CtTelephon).HasColumnName("ct_telephon");

                entity.Property(e => e.CtTelephone2).HasColumnName("ct_telephone_2");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(128);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewFoContactsFull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_Contacts_Full");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.CeEmail)
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.CtTelephon).HasColumnName("ct_telephon");

                entity.Property(e => e.CtTelephone2).HasColumnName("ct_telephone_2");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.PersonalEmail)
                    .HasColumnName("Personal_email")
                    .HasMaxLength(250);

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewFoContactsSms>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_Contacts_SMS");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.CeEmail)
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpDistrict).HasColumnName("cp_district");

                entity.Property(e => e.CpFacility).HasColumnName("cp_facility");

                entity.Property(e => e.CpIp).HasColumnName("cp_ip");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpSupplierCode).HasColumnName("cp_supplier_code");

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.CtTelephon).HasColumnName("ct_telephon");

                entity.Property(e => e.CtTelephone2).HasColumnName("ct_telephone_2");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.PersonalEmail)
                    .HasColumnName("Personal_email")
                    .HasMaxLength(250);

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("User_ID")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewFoErCommunicationMode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_er_communication_mode");

                entity.Property(e => e.CommModeDesc)
                    .HasColumnName("comm_mode_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfComplaints).HasColumnName("no_of_complaints");
            });

            modelBuilder.Entity<ViewFoErComplaintCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_er_complaint_category");

                entity.Property(e => e.ComplaintCategoryDesc)
                    .HasColumnName("complaint_category_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfComplaints).HasColumnName("no_of_complaints");
            });

            modelBuilder.Entity<ViewFoErComplaintMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_er_complaint_month");

                entity.Property(e => e.Cmonth).HasColumnName("cmonth");

                entity.Property(e => e.Cyear).HasColumnName("cyear");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoOfComplaint).HasColumnName("no_of_complaint");
            });

            modelBuilder.Entity<ViewFoErComplaintMonthBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_er_complaint_month_base");

                entity.Property(e => e.Cmonth).HasColumnName("cmonth");

                entity.Property(e => e.Cyear).HasColumnName("cyear");

                entity.Property(e => e.NoOfComplaint).HasColumnName("no_of_complaint");
            });

            modelBuilder.Entity<ViewFoErComplaintSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_er_complaint_site");

                entity.Property(e => e.ERegDateRecieved)
                    .HasColumnName("e_reg_date_recieved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.NoOfComplaints).HasColumnName("no_of_complaints");
            });

            modelBuilder.Entity<ViewFoQiCloseOutCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_fo_QI_CloseOut_Certificate");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Capa).HasColumnName("CAPA");

                entity.Property(e => e.CapaComment)
                    .HasColumnName("CAPA_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ComplaintReport).HasColumnName("Complaint_Report");

                entity.Property(e => e.ComplaintReportComment)
                    .HasColumnName("Complaint_Report_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.CreditNote).HasColumnName("Credit_Note");

                entity.Property(e => e.CreditNoteComment)
                    .HasColumnName("Credit_Note_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.DirectorTechnical).HasColumnName("Director_Technical");

                entity.Property(e => e.DirectorTechnicalDate)
                    .HasColumnName("Director_Technical_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ExecutiveDirector).HasColumnName("Executive_Director");

                entity.Property(e => e.ExecutiveDirectorDate)
                    .HasColumnName("Executive_Director_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinanceDate)
                    .HasColumnName("Finance_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinanceManager).HasColumnName("Finance_Manager");

                entity.Property(e => e.NdaNotification).HasColumnName("NDA_Notification");

                entity.Property(e => e.NdaNotificationComment)
                    .HasColumnName("NDA_Notification_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.NotificationPac).HasColumnName("Notification_PAC");

                entity.Property(e => e.NotificationPacComment)
                    .HasColumnName("Notification_PAC_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.NotificationVendor).HasColumnName("Notification_Vendor");

                entity.Property(e => e.NotificationVendorComment)
                    .HasColumnName("Notification_Vendor_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.OtherAttachment)
                    .HasColumnName("Other_attachment")
                    .HasMaxLength(512);

                entity.Property(e => e.ProductCoas).HasColumnName("Product_COAs");

                entity.Property(e => e.ProductCoasComment)
                    .HasColumnName("Product_COAs_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ReconciliationComment)
                    .HasColumnName("Reconciliation_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.ReleaseInstruction).HasColumnName("Release_Instruction");

                entity.Property(e => e.ReturnedNote).HasColumnName("Returned_Note");

                entity.Property(e => e.ReturnedNoteComment)
                    .HasColumnName("Returned_Note_Comment")
                    .HasMaxLength(2000);

                entity.Property(e => e.SummaryOfInvestigations)
                    .HasColumnName("Summary_of_Investigations")
                    .HasMaxLength(1060);

                entity.Property(e => e.WarehouseDate)
                    .HasColumnName("Warehouse_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarehouseOfficer).HasColumnName("Warehouse_Officer");
            });

            modelBuilder.Entity<ViewHssBaselineBulkStore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_bulk_store");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasColumnName("remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineFocusGroupDiscussion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_focus_group_discussion");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasColumnName("remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineHfServices>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_hf_services");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.HfService1Code).HasColumnName("hf_service_1_code");

                entity.Property(e => e.HfService1Desc)
                    .HasColumnName("hf_service_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.HfService2Code).HasColumnName("hf_service_2_code");

                entity.Property(e => e.HfService2Desc)
                    .HasColumnName("hf_service_2_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.HfServiceDateTime)
                    .HasColumnName("hf_service_date_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.HfServiceRemarks)
                    .IsRequired()
                    .HasColumnName("hf_service_remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HfServiceValue)
                    .IsRequired()
                    .HasColumnName("hf_service_value")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewHssBaselineHfServicesStaffResponsibility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_hf_services_staff_responsibility");

                entity.Property(e => e.CoordinateDeliveryTransport)
                    .IsRequired()
                    .HasColumnName("coordinate_delivery_transport")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.HfService1Code).HasColumnName("hf_service_1_code");

                entity.Property(e => e.HfService1Desc)
                    .HasColumnName("hf_service_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.HfService2Code).HasColumnName("hf_service_2_code");

                entity.Property(e => e.HfService2Desc)
                    .HasColumnName("hf_service_2_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ManagesStock)
                    .IsRequired()
                    .HasColumnName("manages_stock")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PlacesOrders)
                    .IsRequired()
                    .HasColumnName("places_orders")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecievesSupplies)
                    .IsRequired()
                    .HasColumnName("recieves_supplies")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Supervises)
                    .IsRequired()
                    .HasColumnName("supervises")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineLaboratory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_laboratory");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LabAssessmentQnCode).HasColumnName("lab_assessment_qn_code");

                entity.Property(e => e.LabAssessmentQnDesc)
                    .HasColumnName("lab_assessment_qn_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.LabIndicatorCode).HasColumnName("lab_indicator_code");

                entity.Property(e => e.LaboratoryIndicatorDesc)
                    .HasColumnName("laboratory_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.LaboratoryMethodDesc)
                    .HasColumnName("laboratory_method_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.LaboratoryRemarks)
                    .IsRequired()
                    .HasColumnName("laboratory_remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LaboratoryYesNo)
                    .IsRequired()
                    .HasColumnName("laboratory_yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineLaboratoryChecklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_laboratory_checklist");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LabChecklist1Code).HasColumnName("lab_checklist_1_code");

                entity.Property(e => e.LabChecklist1Desc)
                    .HasColumnName("lab_checklist_1_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineLaboratoryMachines>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_laboratory_machines");

                entity.Property(e => e.AvialabilityServiceContract)
                    .IsRequired()
                    .HasColumnName("avialability_service_contract")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCategoryCode).HasColumnName("product_category_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasColumnName("remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceFrequency)
                    .IsRequired()
                    .HasColumnName("service_frequency")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceProvider)
                    .IsRequired()
                    .HasColumnName("service_provider")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineLmis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_lmis");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(100);

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MethodDesc)
                    .HasColumnName("method_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasColumnName("remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubIndicatorCode).HasColumnName("sub_indicator_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("sub_indicator_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselinePharmacy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_pharmacy");

                entity.Property(e => e.AssessmentQnCode).HasColumnName("assessment_qn_code");

                entity.Property(e => e.AssessmentQnDesc)
                    .HasColumnName("assessment_qn_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PharmacyIndicatorCode).HasColumnName("pharmacy_indicator_code");

                entity.Property(e => e.PharmacyIndicatorDesc)
                    .HasColumnName("pharmacy_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PharmacyMethodDesc)
                    .HasColumnName("pharmacy_method_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Remarks)
                    .IsRequired()
                    .HasColumnName("remarks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssBaselineToolsReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_baseline_tools_review");

                entity.Property(e => e.Avialable)
                    .IsRequired()
                    .HasColumnName("avialable")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Displayed)
                    .IsRequired()
                    .HasColumnName("displayed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.InterviewDate)
                    .HasColumnName("interview_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ToolsReview1Code).HasColumnName("tools_review_1_code");

                entity.Property(e => e.ToolsReview1Desc)
                    .HasColumnName("tools_review_1_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.ToolsReview2Code).HasColumnName("tools_review_2_code");

                entity.Property(e => e.ToolsReview2Desc)
                    .HasColumnName("tools_review_2_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewHssDbQueryDnGrn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_db_query_dn_grn");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(1000);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecorded)
                    .HasColumnName("date_recorded")
                    .HasColumnType("datetime");

                entity.Property(e => e.DnNumber)
                    .HasColumnName("dn_number")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.GrnNumber)
                    .HasColumnName("grn_number")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantitiesAgree).HasColumnName("quantities_agree");

                entity.Property(e => e.QuantityGrn).HasColumnName("quantity_grn");

                entity.Property(e => e.QuantityMaulDn).HasColumnName("quantity_maul_dn");

                entity.Property(e => e.QuantityStockCard).HasColumnName("quantity_stock_card");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHssDnGrn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_dn_grn");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(30);

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(30);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecorded)
                    .HasColumnName("date_recorded")
                    .HasColumnType("datetime");

                entity.Property(e => e.DnNumber)
                    .HasColumnName("dn_number")
                    .HasMaxLength(30);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GrnNumber)
                    .HasColumnName("grn_number")
                    .HasMaxLength(30);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(30);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantitiesAgree).HasColumnName("quantities_agree");

                entity.Property(e => e.QuantityGrn).HasColumnName("quantity_grn");

                entity.Property(e => e.QuantityMaulDn).HasColumnName("quantity_maul_dn");

                entity.Property(e => e.QuantityStockCard).HasColumnName("quantity_stock_card");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHssNeedsAssessmentKeyInformantInterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_needs_assessment_key_informant_interview");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.HssNeedsAssessment1Code).HasColumnName("hss_needs_assessment_1_code");

                entity.Property(e => e.HssNeedsAssessment1Desc)
                    .HasColumnName("hss_needs_assessment_1_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment2Desc)
                    .HasColumnName("hss_needs_assessment_2_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasColumnName("number")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssNeedsAssessmentPhysicalInfrastructure>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_needs_assessment_physical_infrastructure");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.HssNeedsAssessment1Code).HasColumnName("hss_needs_assessment_1_code");

                entity.Property(e => e.HssNeedsAssessment1Desc)
                    .HasColumnName("hss_needs_assessment_1_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment2Desc)
                    .HasColumnName("hss_needs_assessment_2_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.Room1)
                    .IsRequired()
                    .HasColumnName("room_1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Room2)
                    .IsRequired()
                    .HasColumnName("room_2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Room3)
                    .IsRequired()
                    .HasColumnName("room_3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Room4)
                    .IsRequired()
                    .HasColumnName("room_4")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssNeedsAssessmentSpaceOptimization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_needs_assessment_space_optimization");

                entity.Property(e => e.ArvCurrentStorage)
                    .IsRequired()
                    .HasColumnName("arv_current_storage")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ArvProposedStorage)
                    .IsRequired()
                    .HasColumnName("arv_proposed_storage")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.GeneralMedicine)
                    .IsRequired()
                    .HasColumnName("general_medicine")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HssNeedsAssessment1Code).HasColumnName("hss_needs_assessment_1_code");

                entity.Property(e => e.HssNeedsAssessment1Desc)
                    .HasColumnName("hss_needs_assessment_1_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.HssNeedsAssessment2Code).HasColumnName("hss_needs_assessment_2_code");

                entity.Property(e => e.HssNeedsAssessment2Desc)
                    .HasColumnName("hss_needs_assessment_2_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.HssNeedsAssessment3Code).HasColumnName("hss_needs_assessment_3_code");

                entity.Property(e => e.HssNeedsAssessment3Desc)
                    .HasColumnName("hss_needs_assessment_3_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.Room4)
                    .IsRequired()
                    .HasColumnName("room_4")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHssSpaceAssessment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_space_assessment");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(50);

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dispensary)
                    .HasColumnName("dispensary")
                    .HasMaxLength(50);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.MedicineStore1)
                    .HasColumnName("medicine_store_1")
                    .HasMaxLength(50);

                entity.Property(e => e.MedicineStore2)
                    .HasColumnName("medicine_store_2")
                    .HasMaxLength(50);

                entity.Property(e => e.SpaceAssessment1Code).HasColumnName("space_assessment_1_code");

                entity.Property(e => e.SpaceAssessment1Desc)
                    .HasColumnName("space_assessment_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SpaceAssessment2Code).HasColumnName("space_assessment_2_code");

                entity.Property(e => e.SpaceAssessment2Desc)
                    .HasColumnName("space_assessment_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SpaceAssessment3Code).HasColumnName("space_assessment_3_code");

                entity.Property(e => e.SpaceAssessment3Desc)
                    .HasColumnName("space_assessment_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SuppliesStore1)
                    .HasColumnName("supplies_store_1")
                    .HasMaxLength(50);

                entity.Property(e => e.SuppliesStore2)
                    .HasColumnName("supplies_store_2")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHssSpaceAssessmentKeyInformantInterview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_hss_space_assessment_key_informant_interview");

                entity.Property(e => e.DateOfVisit)
                    .HasColumnName("date_of_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.KiiRemark)
                    .IsRequired()
                    .HasColumnName("kii_remark")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KiiValue)
                    .IsRequired()
                    .HasColumnName("kii_value")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SpaceAssessment1Code).HasColumnName("space_assessment_1_code");

                entity.Property(e => e.SpaceAssessment1Desc)
                    .HasColumnName("space_assessment_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SpaceAssessment2Code).HasColumnName("space_assessment_2_code");

                entity.Property(e => e.SpaceAssessment2Desc)
                    .HasColumnName("space_assessment_2_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewJA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_j_a_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewJA2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_j_a_2");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewJBatchDel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_j_batch_del");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.JMonth).HasColumnName("J_MONTH");

                entity.Property(e => e.JYear).HasColumnName("J_YEAR");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewJoreen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_joreen");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewKpi3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_3");

                entity.Property(e => e.DaysInWorkhop).HasColumnName("days_in_workhop");

                entity.Property(e => e.FirstDay)
                    .HasColumnName("first_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("fuel_Added");

                entity.Property(e => e.FuelCost).HasColumnName("fuel_cost");

                entity.Property(e => e.LabourCost).HasColumnName("labour_cost");

                entity.Property(e => e.LastDay)
                    .HasColumnName("last_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.SelectedMonth).HasColumnName("selected_month");

                entity.Property(e => e.SelectedYear).HasColumnName("selected_year");

                entity.Property(e => e.TotalCost).HasColumnName("Total_Cost");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewKpi3Fuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_3_fuel");

                entity.Property(e => e.FirstDay)
                    .HasColumnName("first_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("fuel_Added");

                entity.Property(e => e.FuelCost).HasColumnName("fuel_cost");

                entity.Property(e => e.LastDay)
                    .HasColumnName("last_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.SelectedMonth).HasColumnName("selected_month");

                entity.Property(e => e.SelectedYear).HasColumnName("selected_year");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewKpi3MaintenanceCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_3_maintenance_cost");

                entity.Property(e => e.DaysInWorkhop).HasColumnName("days_in_workhop");

                entity.Property(e => e.LabourCost).HasColumnName("labour_cost");

                entity.Property(e => e.MonthRecorded).HasColumnName("month_recorded");

                entity.Property(e => e.Registration)
                    .IsRequired()
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalCost).HasColumnName("Total_Cost");

                entity.Property(e => e.YearRecorded).HasColumnName("year_recorded");
            });

            modelBuilder.Entity<ViewKpiAvialability>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_avialability");

                entity.Property(e => e.Avialability).HasColumnName("avialability");

                entity.Property(e => e.DaysInWorkhop).HasColumnName("days_in_workhop");

                entity.Property(e => e.DaysIsAvialable).HasColumnName("days_is_avialable");

                entity.Property(e => e.MonthRecorded).HasColumnName("month_recorded");

                entity.Property(e => e.NoOfWorkingDays).HasColumnName("no_of_working_days");

                entity.Property(e => e.Registration)
                    .IsRequired()
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRecorded).HasColumnName("year_recorded");
            });

            modelBuilder.Entity<ViewKpiDistanceTravelled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_distance_travelled");

                entity.Property(e => e.FirstDay)
                    .HasColumnName("first_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastDay)
                    .HasColumnName("last_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.SelectedMonth).HasColumnName("selected_month");

                entity.Property(e => e.SelectedYear).HasColumnName("selected_year");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewKpiFuelConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_fuel_consumption");

                entity.Property(e => e.FirstDay)
                    .HasColumnName("first_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.FuelAdded).HasColumnName("fuel_Added");

                entity.Property(e => e.LastDay)
                    .HasColumnName("last_day")
                    .HasColumnType("datetime");

                entity.Property(e => e.SelectedMonth).HasColumnName("selected_month");

                entity.Property(e => e.SelectedYear).HasColumnName("selected_year");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewKpiSafetyRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_safety_record");

                entity.Property(e => e.IncidentNo).HasColumnName("incident_no");

                entity.Property(e => e.MonthOfIncident).HasColumnName("month_of_incident");

                entity.Property(e => e.VehicleRegistartion)
                    .IsRequired()
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.YearOfIncident).HasColumnName("year_of_incident");
            });

            modelBuilder.Entity<ViewKpiSafetyRecordBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_safety_record_base");

                entity.Property(e => e.MonthOfIncident).HasColumnName("month_of_incident");

                entity.Property(e => e.NoOfIncidents).HasColumnName("no_of_incidents");

                entity.Property(e => e.VehicleRegistartion)
                    .IsRequired()
                    .HasColumnName("vehicle_registartion")
                    .HasMaxLength(50);

                entity.Property(e => e.YearOfIncident).HasColumnName("year_of_incident");
            });

            modelBuilder.Entity<ViewKpiUtilization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_utilization");

                entity.Property(e => e.DaysInUse).HasColumnName("days_in_use");

                entity.Property(e => e.DaysIsAvialable).HasColumnName("days_is_avialable");

                entity.Property(e => e.MonthRecorded).HasColumnName("month_recorded");

                entity.Property(e => e.Registration)
                    .IsRequired()
                    .HasColumnName("registration")
                    .HasMaxLength(50);

                entity.Property(e => e.YearRecorded).HasColumnName("year_recorded");
            });

            modelBuilder.Entity<ViewKpiUtilizationDaysUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_kpi_utilization_days_used");

                entity.Property(e => e.DaysInUse).HasColumnName("days_in_use");

                entity.Property(e => e.SelectedMonth).HasColumnName("selected_month");

                entity.Property(e => e.SelectedYear).HasColumnName("selected_year");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnName("vehicle_registration")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAllocationArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_arv");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderFulfillment).HasColumnName("order_fulfillment");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewLmisAllocationNArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_arv");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewLmisAllocationNArvEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_arv_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewLmisAllocationNArvSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_arv_sum");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNArvSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_arv_sum_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_lab");

                entity.Property(e => e.Category2Code).HasColumnName("category_2_code");

                entity.Property(e => e.Category3Code).HasColumnName("category_3_code");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewLmisAllocationNLabCustom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_lab_Custom");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewLmisAllocationNLabEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_lab_emergency");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewLmisAllocationNLabSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_lab_sum");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNLabSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_lab_sum_emergency");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNMault>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_MAULT");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewLmisAllocationNOiSti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_oi_sti");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNOiStiEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_oi_sti_emergency");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNOiStiSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_oi_sti_sum");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNOiStiSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_oi_sti_sum_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_Rutf");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_smc");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNSmcEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_smc_emergency");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UoM).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewLmisAllocationNSmcSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_smc_sum");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNSmcSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_smc_sum_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_TB");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_test_kit");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisAllocationNTestKitEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_test_kit_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisAllocationNTestKitSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_test_kit_sum");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNTestKitSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_test_kit_sum_emergency");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNViralLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_viral_load");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNViralLoadEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_viral_load_emergency");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNViralLoadSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_viral_load_sum");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationNViralLoadSumEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_n_viral_load_sum_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_smc");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderFulfillment).HasColumnName("order_fulfillment");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAllocationTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_allocation_test_kit");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderFulfillment).HasColumnName("order_fulfillment");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisAmcArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_arv");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcArv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_arv_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_lab");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcLab2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_lab_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_oi");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcOi2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_oi_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_rutf");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcRutf2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_rutf_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_smc");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcSmc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_smc_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_tb");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcTb2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_tb_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_test_kit");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcTestKit2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_test_kit_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcVl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_vl");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisAmcVl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_amc_vl_2");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisArtExtraRegimenBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_art_extra_regimen_base");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisArvAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_arv_amc");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.DateAdd).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisCConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_consumption");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("productCategory");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Scto)
                    .IsRequired()
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisCRr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrArvEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrArvExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrArvFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrArvOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrArvOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrArvP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrArvRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_arv_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrExpectedReportd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_expected_reportd");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisCRrFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_facility");

                entity.Property(e => e.Category)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisCRrFacility1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_facility_1");

                entity.Property(e => e.Category)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.MonthYear)
                    .HasColumnName("month_year")
                    .HasMaxLength(61);
            });

            modelBuilder.Entity<ViewLmisCRrFacilityDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_facility_details");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrFacilityDetails1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_facility_details_1");

                entity.Property(e => e.Art).HasColumnName("ART");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.Hiv).HasColumnName("HIV");

                entity.Property(e => e.Lab).HasColumnName("LAB");

                entity.Property(e => e.Ois).HasColumnName("OIs");

                entity.Property(e => e.Rutf).HasColumnName("RUTF");

                entity.Property(e => e.Smc).HasColumnName("SMC");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tb).HasColumnName("TB");

                entity.Property(e => e.Viralload).HasColumnName("VIRALLOAD");
            });

            modelBuilder.Entity<ViewLmisCRrFacilityDetailsFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_facility_details_Final");

                entity.Property(e => e.Art)
                    .IsRequired()
                    .HasColumnName("ART")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.Hiv)
                    .IsRequired()
                    .HasColumnName("HIV")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Lab)
                    .IsRequired()
                    .HasColumnName("LAB")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Ois)
                    .IsRequired()
                    .HasColumnName("OIs")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Rutf)
                    .IsRequired()
                    .HasColumnName("RUTF")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Smc)
                    .IsRequired()
                    .HasColumnName("SMC")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tb)
                    .IsRequired()
                    .HasColumnName("TB")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Viralload)
                    .IsRequired()
                    .HasColumnName("VIRALLOAD")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisCRrLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrLabEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_emergency");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrLabExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrLabFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrLabOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_ontime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrLabOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_ontime_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrLabP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrLabRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_recieved");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrLabRecievedX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_lab_recieved_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrOiEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrOiExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrOiFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrOiOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrOiOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrOiP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrOiRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_oi_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrRutfEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrRutfExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrRutfFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrRutfOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrRutfOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrRutfP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrRutfRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_rutf_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrSmcEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmcExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmcFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrSmcOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmcOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmcP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrSmcRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrSmcX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_smc_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrTbEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTbExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTbFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrTbOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTbOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTbP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrTbRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tb_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrTkEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTkExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTkFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrTkOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTkOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrTkP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrTkRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_tk_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrVl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);
            });

            modelBuilder.Entity<ViewLmisCRrVlEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_emergency");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrVlExpected>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_expected");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrVlFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_Final");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrVlOntime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_ontime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrVlOntimeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_ontime_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisCRrVlP>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_p");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewLmisCRrVlRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_c_rr_vl_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisChartConsumptionLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_chart_consumption_lab");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");
            });

            modelBuilder.Entity<ViewLmisChartConsumptionSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_chart_consumption_smc");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");
            });

            modelBuilder.Entity<ViewLmisChartConsumptionTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_chart_consumption_test_kit");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");
            });

            modelBuilder.Entity<ViewLmisConArvA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_arv_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConArvPatientNoA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_arv_patientNo_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConArvX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_arv_x");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConLabA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_lab_a");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConLabX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_lab_x");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConOiA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_oi_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConOiX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_oi_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConRutfA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_rutf_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConRutfX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_rutf_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConSmcA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_smc_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConSmcX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_smc_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConTbA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_tb_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConTbX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_tb_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConTkA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_tk_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConTkX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_tk_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisConVlA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_vl_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewLmisConVlX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_con_vl_x");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisConsumptionArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_arv");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockLevel).HasColumnName("stock_level");

                entity.Property(e => e.TotalConsumption).HasColumnName("Total_Consumption");
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonArt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_art_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonArt2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_art_2");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonHivTestKits1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_hiv_test_kits_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonOiSti1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_oi_sti_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonSmc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_smc_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisConsumptionComparisonViralLoad1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_comparison_viral_load_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisConsumptionSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_smc");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockLevel).HasColumnName("stock_level");
            });

            modelBuilder.Entity<ViewLmisConsumptionTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_consumption_test_kit");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockLevel).HasColumnName("stock_level");
            });

            modelBuilder.Entity<ViewLmisCountExpectedReports>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_LMIS_count_expected_reports");

                entity.Property(e => e.Bmonth).HasColumnName("bmonth");

                entity.Property(e => e.Byear).HasColumnName("byear");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.Sector)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisDeleteSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_delete_smc");

                entity.Property(e => e.ActualNumber).HasColumnName("actual_number");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TargetNumber).HasColumnName("target_number");
            });

            modelBuilder.Entity<ViewLmisEmergencyArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_ART");

                entity.Property(e => e.ArtConsumption)
                    .IsRequired()
                    .HasColumnName("ART_Consumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ClosingBalance)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients)
                    .IsRequired()
                    .HasColumnName("DrugsRequired_NewPatients")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.EstimatedNewArtPatients)
                    .IsRequired()
                    .HasColumnName("EstimatedNew_ART_Patients")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EstimatedNewHivPregnant)
                    .IsRequired()
                    .HasColumnName("EstimatedNew_HIV_Pregnant")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossesAdjustments)
                    .IsRequired()
                    .HasColumnName("Losses_Adjustments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MonthsStockAtHand)
                    .IsRequired()
                    .HasColumnName("Months_Stock_atHand")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OpeningBalance)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption)
                    .IsRequired()
                    .HasColumnName("PMTCT_Consumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated)
                    .IsRequired()
                    .HasColumnName("Quantity_Allocated")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRecieved)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRequiredCurrentPatients)
                    .IsRequired()
                    .HasColumnName("Quantity_Required_Current_Patients")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired)
                    .IsRequired()
                    .HasColumnName("TotalDrugs_Required")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisEmergencyLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_lab");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ClosingBalance)
                    .IsRequired()
                    .HasColumnName("closing_balance")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Consumption)
                    .IsRequired()
                    .HasColumnName("consumption")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossesAdjustment)
                    .IsRequired()
                    .HasColumnName("losses_adjustment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OpeningBalance)
                    .IsRequired()
                    .HasColumnName("opening_balance")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated)
                    .IsRequired()
                    .HasColumnName("quantity_allocated")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRecieved)
                    .IsRequired()
                    .HasColumnName("quantity_recieved")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityToOrder)
                    .IsRequired()
                    .HasColumnName("quantity_to_order")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalCost)
                    .IsRequired()
                    .HasColumnName("total_cost")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisEmergencyOiSti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_oi_sti");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.BasicUnit).HasMaxLength(20);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Select4Sapexport).HasColumnName("Select4SAPExport");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisEmergencySmcSlm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_smc_slm");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Rfsonotes1)
                    .HasColumnName("RFSONotes1")
                    .HasMaxLength(500);

                entity.Property(e => e.Select4Sapexport).HasColumnName("Select4SAPExport");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UoM).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewLmisEmergencyTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_test_kit");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossAdjustment)
                    .IsRequired()
                    .HasColumnName("Loss_Adjustment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumStock)
                    .IsRequired()
                    .HasColumnName("Maximum_Stock")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NoTestStart2months)
                    .IsRequired()
                    .HasColumnName("No_Test_Start_2Months")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated)
                    .IsRequired()
                    .HasColumnName("Quantity_Allocated")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityRequired)
                    .IsRequired()
                    .HasColumnName("Quantity_Required")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityToShip)
                    .IsRequired()
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QunatityOnOrder)
                    .IsRequired()
                    .HasColumnName("Qunatity_On_Order")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months)
                    .IsRequired()
                    .HasColumnName("Test_Recieved_2Months")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TestRemaining)
                    .IsRequired()
                    .HasColumnName("Test_Remaining")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TestUsed2months)
                    .IsRequired()
                    .HasColumnName("Test_Used_2Months")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisEmergencyViralLoadReagents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_emergency_viral_load_reagents");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.PackSize).HasMaxLength(50);

                entity.Property(e => e.ProductDescription).HasMaxLength(450);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Select4Sapexport).HasColumnName("Select4SAPExport");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisExpectedReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_LMIS_ExpectedReport");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.ClientTypeDesc)
                    .HasColumnName("client_type_desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.OwnershipDescription).HasMaxLength(100);

                entity.Property(e => e.ProductCategory)
                    .IsRequired()
                    .HasColumnName("product_category")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisExpectedReportsX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_ExpectedReports_x");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e._1).HasColumnName("1");

                entity.Property(e => e._10).HasColumnName("10");

                entity.Property(e => e._11).HasColumnName("11");

                entity.Property(e => e._2).HasColumnName("2");

                entity.Property(e => e._3).HasColumnName("3");

                entity.Property(e => e._9).HasColumnName("9");
            });

            modelBuilder.Entity<ViewLmisExpectedReportsY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_ExpectedReports_y");

                entity.Property(e => e.Arv).HasColumnName("arv");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.HivTestKits).HasColumnName("hiv_test_kits");

                entity.Property(e => e.Lab).HasColumnName("lab");

                entity.Property(e => e.OiSti).HasColumnName("oi_sti");

                entity.Property(e => e.SmcSlm).HasColumnName("smc_slm");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ViralLoadReagents).HasColumnName("viral_load_reagents");
            });

            modelBuilder.Entity<ViewLmisFrostArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_art");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RecommendedStockMovement)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StockStatus)
                    .IsRequired()
                    .HasColumnName("stock_status")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisFrostArtA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_art_a");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisFrostHtk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_htk");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RecommendedStockMovement)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockStatus)
                    .IsRequired()
                    .HasColumnName("stock_status")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisFrostHtkA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_htk_a");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisFrostLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_lab");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.RecommendedStockMovement)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StockStatus)
                    .IsRequired()
                    .HasColumnName("stock_status")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLmisFrostLabA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_frost_lab_a");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcDate)
                    .HasColumnName("AMC_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.Soh).HasColumnName("SOH");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisPSSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_p_s_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OnHand).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");
            });

            modelBuilder.Entity<ViewLmisPatientIpTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_patient_ip_tk");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");
            });

            modelBuilder.Entity<ViewLmisPatientNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_patient_no");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisPatientNoList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_patient_no_list");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryMonth).HasColumnName("summary_month");

                entity.Property(e => e.SummaryYear).HasColumnName("summary_year");

                entity.Property(e => e.TotalPatients).HasColumnName("Total_Patients");
            });

            modelBuilder.Entity<ViewLmisRegimen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_regimen");

                entity.Property(e => e.CheckBox).HasColumnName("check_box");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisRegimenClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_regimen_classification");

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisRegimenExtra>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_regimen_extra");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisRrArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_rr_arv");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilitiesInSector).HasColumnName("facilities_in_sector");

                entity.Property(e => e.NoOfFacilities).HasColumnName("no_of_facilities");

                entity.Property(e => e.ReportingRate).HasColumnName("reporting_rate");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisRrRecieved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_rr_recieved");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Reported).HasColumnName("reported");
            });

            modelBuilder.Entity<ViewLmisRrSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_rr_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilitiesSesctor).HasColumnName("facilities_sesctor");

                entity.Property(e => e.NoOfFacilities).HasColumnName("no_of_facilities");

                entity.Property(e => e.ReportingRatio).HasColumnName("reporting_ratio");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisRrTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_rr_test_kit");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilitiesSector).HasColumnName("facilities_sector");

                entity.Property(e => e.NoOfFacilities).HasColumnName("no_of_facilities");

                entity.Property(e => e.ReportingRatio).HasColumnName("reporting_ratio");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(50);

                entity.Property(e => e.ExpectedReports).HasMaxLength(50);

                entity.Property(e => e.IndicatorCode).HasColumnName("indicator_code");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.Percentage).HasMaxLength(50);

                entity.Property(e => e.ReportsRecieved).HasMaxLength(50);

                entity.Property(e => e.SubIndicatorCode).HasColumnName("subIndicator_code");

                entity.Property(e => e.SubIndicatorDesc)
                    .HasColumnName("subIndicator_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewLmisSummaryFacilityIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_facility_ip");

                entity.Property(e => e.FacilityNumberPerIp).HasColumnName("FacilityNumberPerIP");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);
            });

            modelBuilder.Entity<ViewLmisSummaryFacilityLevelOfCare>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_facility_level_of_care");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");
            });

            modelBuilder.Entity<ViewLmisSummaryHivTests>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_HIV_Tests");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummaryOrderFulfilmentArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_order_fulfilment_arv");

                entity.Property(e => e.AllocationMonth).HasColumnName("allocation_month");

                entity.Property(e => e.AllocationYear).HasColumnName("allocation_year");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderFulfillment).HasColumnName("order_fulfillment");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewLmisSummaryPatientsArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_patients_ART");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummaryRecievedReports>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_recieved_reports");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummaryRecievedReportsTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_recieved_reports_test_kit");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummarySites>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_sites");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewLmisSummaryStockoutArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_stockout_arv");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummaryStockoutTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_stockout_test_kit");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewLmisSummaryTimelinessArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_timeliness_arv");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisSummaryTimelinessTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_summary_timeliness_test_kit");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLmisTOrderTAllocatedSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_T_Order_T_Allocated_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLmisTimelinessArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_lmis_timeliness_arv");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Ontime).HasColumnName("ontime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMascisExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_mascis_export");

                entity.Property(e => e.DateNextVisit)
                    .HasColumnName("date_next_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MyCheck).HasColumnName("myCheck");
            });

            modelBuilder.Entity<ViewMaulStaff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_maul_staff");

                entity.Property(e => e.CeEmail)
                    .IsRequired()
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ViewMileage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Mileage");

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.ArrivalTimeDestination)
                    .HasColumnName("ArrivalTime_Destination")
                    .HasMaxLength(10);

                entity.Property(e => e.DepartureDate).HasColumnType("datetime");

                entity.Property(e => e.DepartureTime).HasMaxLength(10);

                entity.Property(e => e.DriverPermit)
                    .HasColumnName("Driver_Permit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OdometerArrival).HasColumnName("Odometer_Arrival");

                entity.Property(e => e.OdometerDepature).HasColumnName("Odometer_Depature");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDistance).HasColumnName("Total_Distance");

                entity.Property(e => e.VehicleNumber)
                    .HasColumnName("Vehicle_Number")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMileageForm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_mileage_form");

                entity.Property(e => e.ArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.ArrivalTimeDestination)
                    .HasColumnName("ArrivalTime_Destination")
                    .HasMaxLength(10);

                entity.Property(e => e.DepartureDate).HasColumnType("datetime");

                entity.Property(e => e.DepartureTime).HasMaxLength(10);

                entity.Property(e => e.DriverPermit)
                    .HasColumnName("Driver_Permit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OdometerArrival).HasColumnName("Odometer_Arrival");

                entity.Property(e => e.OdometerDepature).HasColumnName("Odometer_Depature");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDistance).HasColumnName("Total_Distance");

                entity.Property(e => e.VehicleNumber)
                    .HasColumnName("Vehicle_Number")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMonthOfStockBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_month_of_stock_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMonthSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Month_Sector");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BSector)
                    .HasColumnName("bSector")
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewMonthSectorX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Month_Sector_x");

                entity.Property(e => e.Month).HasColumnName("month");

                entity.Property(e => e.Sector)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewOrderDrugDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_DrugDetails");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewOrderDrugDetailsPhysicalCountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_DrugDetails_PhysicalCount_Summary");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewOrderHivRapidTestKit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_order_hiv_rapid_test_kit");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode1).HasColumnName("Facility_Code");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1000);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewOrderHivRapidTestKitPhysicalCountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_order_hiv_rapid_test_kit_PhysicalCount_Summary");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewOrderLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.CompletedBy)
                    .HasColumnName("completed_by")
                    .HasMaxLength(150);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expr2).HasColumnType("datetime");

                entity.Property(e => e.Expr3).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Hsd)
                    .HasColumnName("HSD")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewOrderLabAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Allocation");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderLabCustom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Custom");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewOrderLabCustomOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Custom_Orders");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");
            });

            modelBuilder.Entity<ViewOrderLabExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Export");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewOrderLabFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Final");

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewOrderLabHsipCustomOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_HSIP_Custom_Orders");

                entity.Property(e => e.CompletedBy)
                    .HasColumnName("completed_by")
                    .HasMaxLength(150);

                entity.Property(e => e.DateCompleted)
                    .HasColumnName("date_completed")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Hsd)
                    .HasColumnName("HSD")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderLabPhysicalCountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_PhysicalCount_Summary");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewOrderLabProductcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_Productcode");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewOrderLabSapExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_SAP_Export");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");
            });

            modelBuilder.Entity<ViewOrderLabSapExportDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_SAP_Export_Details");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");
            });

            modelBuilder.Entity<ViewOrderLabSapExportFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_Lab_SAP_Export_Final");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderMault>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_MAULT");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(200);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewOrderNumberArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_ART");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberHivtestKits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_HIVTestKits");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberLaboratory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_Laboratory");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberMault>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_MAULT");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_OI");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_Rutf");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_SMC");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_TB");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderNumberViralLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OrderNumber_ViralLoad");

                entity.Property(e => e.OrderIndex).HasMaxLength(3);

                entity.Property(e => e.PartialOrderNo).HasMaxLength(17);
            });

            modelBuilder.Entity<ViewOrderOiSti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_OI_STI");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.Expr2).HasColumnType("datetime");

                entity.Property(e => e.Expr3).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderOiStiPhysicalCountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_OI_STI_PhysicalCount_Summary");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewOrderRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_RUTF");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_SMC");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Expr2).HasColumnType("datetime");

                entity.Property(e => e.Expr3).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderSmcPhysicalCountSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_SMC_PhysicalCount_Summary");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewOrderTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TB");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExportedToSap).HasColumnName("ExportedToSAP");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderTrackingModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderTrackingModule1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule_1");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderTrackingModuleLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule_Log");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOrderTrackingModuleLog1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule_Log_1");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusChangedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.OrderStatusDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderTrackingModuleOrderDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule_OrderDetails");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewOrderTrackingModuleOrderDetails1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_TrackingModule_OrderDetails_1");

                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOrderViralLoadReagents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Order_ViralLoadReagents");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Expr2).HasColumnType("datetime");

                entity.Property(e => e.Expr3).HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalAmcArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_art");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.ArtEMtctConsumption).HasColumnName("ART_eMTCT_Consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalAmcLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_lab");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalAmcOi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_oi");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalAmcSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_smc");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalAmcTestKits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_test_kits");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewPalAmcViralLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_amc_viral_load");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_Consumption");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode)
                    .HasColumnName("Product_code")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalDistrict>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_district");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalFacilities>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_facilities");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ContactUserName)
                    .HasColumnName("Contact_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityType).HasMaxLength(50);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LevelofCare1)
                    .HasColumnName("LevelofCare")
                    .HasMaxLength(150);

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegionDescription)
                    .HasColumnName("Region_Description")
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalIp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_ip");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);
            });

            modelBuilder.Entity<ViewPalMstAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_amc");

                entity.Property(e => e.AmcValue).HasColumnName("amc_value");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode)
                    .HasColumnName("Facility_code")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPalMstCdcregion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_CDCRegion");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RegionName)
                    .HasColumnName("region_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalMstDistrict>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_District");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.RegionCode).HasColumnName("region_code");
            });

            modelBuilder.Entity<ViewPalMstParish>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_Parish");

                entity.Property(e => e.ParishCode)
                    .IsRequired()
                    .HasColumnName("parish_code")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ParishName)
                    .HasColumnName("parish_name")
                    .HasMaxLength(50);

                entity.Property(e => e.SubCountyCode)
                    .HasColumnName("Sub_county_code")
                    .HasMaxLength(4)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPalMstProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_Product");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductStatus).HasMaxLength(50);

                entity.Property(e => e.ProductType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalMstRegimen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_regimen");

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalMstRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_Region");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasColumnName("region_code")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.RegionName)
                    .HasColumnName("region_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalMstSubCounty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_Sub_County");

                entity.Property(e => e.DistrictCode).HasColumnName("district_code");

                entity.Property(e => e.SubCountyCode)
                    .IsRequired()
                    .HasColumnName("Sub_county_code")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.Property(e => e.SubCountyName)
                    .HasColumnName("Sub_county_name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalMstUserDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_User_Details");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPalMstUserRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_mst_User_Roles");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.RoleDesc)
                    .HasColumnName("Role_Desc")
                    .HasMaxLength(256);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPalProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_products");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalSctoFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_Scto_Facility");

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.FacilityCode)
                    .IsRequired()
                    .HasColumnName("facility_code")
                    .HasMaxLength(50);

                entity.Property(e => e.SctoCode)
                    .IsRequired()
                    .HasColumnName("scto_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPalUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pal_users");

                entity.Property(e => e.Password).HasColumnName("_password");

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPatientSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_patient_summary");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PatientsTotal).HasColumnName("patients_total");
            });

            modelBuilder.Entity<ViewPatientSummaryBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_patient_summary_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmp1a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1A");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nda)
                    .HasColumnName("NDA")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.NdaWaiver)
                    .HasColumnName("NDA_Waiver")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Ntg)
                    .HasColumnName("NTG")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPmp1aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1A_x");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(74)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp1aXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1A_x_a");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nda).HasColumnName("NDA");

                entity.Property(e => e.Ntg).HasColumnName("NTG");

                entity.Property(e => e.PercentApprovedNtgs).HasColumnName("Percent_approved_NTGs");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp1aXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1A_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp1b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1B");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(10);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.FdaApprovedList)
                    .HasColumnName("FDA_approved_list")
                    .HasMaxLength(50);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPmp1bX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1B_x");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(10);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(73)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp1bXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1B_x_a");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(10);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Denominator).HasColumnName("denominator");

                entity.Property(e => e.Numerator).HasColumnName("numerator");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp1bXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1B_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ValueBrandedProducts).HasColumnName("value_branded_products");

                entity.Property(e => e.ValueTotalProducts).HasColumnName("value_total_products");

                entity.Property(e => e.YearHalf)
                    .HasColumnName("Year_Half")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<ViewPmp1d>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_1D");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ValueGenericProducts).HasColumnName("value_generic_products");

                entity.Property(e => e.ValueTotalProducts).HasColumnName("value_total_products");

                entity.Property(e => e.YearHalf)
                    .HasColumnName("Year_Half")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<ViewPmp2a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2A");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductForecastedPast12Months)
                    .HasColumnName("product_forecasted_past_12_months")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductSelectedForProcurement)
                    .HasColumnName("product_selected_for_procurement")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp2aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2A_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.PProductForecastedPast12Months).HasColumnName("p_product_forecasted_past_12_months");

                entity.Property(e => e.PProductSelectedForProcurement).HasColumnName("p_product_selected_for_procurement");

                entity.Property(e => e.ProductForecastedPast12Months).HasColumnName("product_forecasted_past_12_months");

                entity.Property(e => e.ProductSelectedForProcurement).HasColumnName("product_selected_for_procurement");
            });

            modelBuilder.Entity<ViewPmp2b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MaulFob).HasColumnName("MAUL_FOB");

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.TotalConsumption).HasColumnName("total_consumption");

                entity.Property(e => e.ValueConsumption).HasColumnName("value_consumption");
            });

            modelBuilder.Entity<ViewPmp2bX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2B_x");

                entity.Property(e => e.ActualConsumption).HasColumnName("actual_consumption");

                entity.Property(e => e.CommoditiesConsumed).HasColumnName("commodities_consumed");

                entity.Property(e => e.CommoditiesForecasted).HasColumnName("commodities_forecasted");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DifferenceConsumptionForecast).HasColumnName("difference_consumption_forecast");
            });

            modelBuilder.Entity<ViewPmp2c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2C");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MaulFob).HasColumnName("MAUL_FOB");

                entity.Property(e => e.ProductDesc)
                    .HasColumnName("product_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.TotalConsumption).HasColumnName("total_consumption");

                entity.Property(e => e.ValueDistributedCommodities).HasColumnName("value_distributed_commodities");
            });

            modelBuilder.Entity<ViewPmp2cX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_2C_x");

                entity.Property(e => e.ActualConsumption).HasColumnName("actual_consumption");

                entity.Property(e => e.CommoditiesConsumed).HasColumnName("commodities_consumed");

                entity.Property(e => e.CommoditiesForecasted).HasColumnName("commodities_forecasted");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DifferenceConsumptionForecast).HasColumnName("difference_consumption_forecast");
            });

            modelBuilder.Entity<ViewPmp3a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3A");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnProcurementPlan)
                    .HasColumnName("On_procurement_plan")
                    .HasMaxLength(10);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Procured)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewPmp3aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3A_x");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(93)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3aXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3A_x_a");

                entity.Property(e => e.BMonth).HasColumnName("b_month");

                entity.Property(e => e.BYear).HasColumnName("b_year");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementPlan).HasColumnName("procurement_plan");
            });

            modelBuilder.Entity<ViewPmp3aXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3A_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DateMe)
                    .HasColumnName("date_me")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B");

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(200);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_maul_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateReceiptAtTheAirport)
                    .HasColumnName("Date_receipt_at_the_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.PurchaseOrdersFilledCorrectly)
                    .HasColumnName("purchase_orders_filled_correctly")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.QtyOrderedVsQtyReceived).HasColumnName("qty_ordered_vs_qty_received");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("Shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(10);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("shipment_status_per_PP_date#")
                    .HasMaxLength(20);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(20);

                entity.Property(e => e.VarianceFromMaulSupplierAgreedDate).HasColumnName("Variance_from_maul_Supplier_agreed_date");

                entity.Property(e => e.VarianceFromPpDueDate).HasColumnName("variance_from_PP_due_date");

                entity.Property(e => e.VarianceMaulSupplierAgreedDate).HasColumnName("variance_Maul_Supplier_agreed_date");
            });

            modelBuilder.Entity<ViewPmp3bA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_a");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(200);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateReceiptAtTheAirport)
                    .HasColumnName("Date_receipt_at_the_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.PurchaseOrdersFilledCorrectly)
                    .HasColumnName("purchase_orders_filled_correctly")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("Shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(10);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("shipment_status_per_PP_date#")
                    .HasMaxLength(20);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(20);

                entity.Property(e => e.VarianceFromPpDueDate).HasColumnName("variance_from_PP_due_date");

                entity.Property(e => e.VarianceMaulSupplierAgreedDate).HasColumnName("variance_Maul_Supplier_agreed_date");
            });

            modelBuilder.Entity<ViewPmp3bA1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_a_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.PlannedShipments).HasColumnName("planned_shipments");
            });

            modelBuilder.Entity<ViewPmp3bA2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_a_2");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Shipments).HasColumnName("shipments");
            });

            modelBuilder.Entity<ViewPmp3bX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.PlannedShipments).HasColumnName("planned_shipments");

                entity.Property(e => e.Shipments).HasColumnName("shipments");
            });

            modelBuilder.Entity<ViewPmp3bX1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_x_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3bX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3B_x_2");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3C");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.OrderDate)
                    .HasColumnName("order_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskOrder)
                    .HasColumnName("task_order")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalCostFobMaulPriceUsd)
                    .HasColumnName("total_cost_FOB_MAUL_price_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalOrderCostScmsUsd)
                    .HasColumnName("total_order_cost_SCMS_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalSavingBasedOnFob)
                    .HasColumnName("total_saving_based_on_FOB")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ViewPmp3cA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3C_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");
            });

            modelBuilder.Entity<ViewPmp3cB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3C_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp3cX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3C_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp3d>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3D");

                entity.Property(e => e.Airport).HasColumnName("airport");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(200);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptAtAirport)
                    .HasColumnName("date_goods_receipt_at_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_MAUL_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_Quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilled)
                    .HasColumnName("purchase_orders_filled ")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(25);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(10);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("Shipment_status_per_PP_date")
                    .HasMaxLength(15);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(20);

                entity.Property(e => e.VarianceMaulSupplierDueDate).HasColumnName("Variance_Maul_Supplier_due_date");

                entity.Property(e => e.VariancePpDate).HasColumnName("variance_PP_date");
            });

            modelBuilder.Entity<ViewPmp3dX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3D_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.PlannedPos).HasColumnName("planned_Pos");
            });

            modelBuilder.Entity<ViewPmp3dX1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3D_x_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3dX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3D_x_2");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3e>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3E");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.Comments)
                    .HasColumnName(" comments")
                    .HasMaxLength(255);

                entity.Property(e => e.CompletedProcurements)
                    .HasColumnName("completed_procurements")
                    .HasMaxLength(3);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_maul_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateReceiptAtTheAirport)
                    .HasColumnName("Date_receipt_at_the_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilledCorrectly)
                    .HasColumnName("purchase_orders_filled_correctly")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.QtyOrderedVsQtyReceived).HasColumnName("qty_ordered_vs_qty_received");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(55);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("Shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(15);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("shipment_status_per_PP_date#")
                    .HasMaxLength(25);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(15);

                entity.Property(e => e.VarianceFromMaulSupplierAgreedDate).HasColumnName("Variance_from_maul_Supplier_agreed_date");

                entity.Property(e => e.VarianceFromPpDueDate).HasColumnName("variance_from_PP_due_date");

                entity.Property(e => e.VarianceMaulSupplierAgreedDate).HasColumnName("variance_Maul_Supplier_agreed_date");
            });

            modelBuilder.Entity<ViewPmp3eX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3E_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.PlannedShipments).HasColumnName("planned_shipments");

                entity.Property(e => e.Shipments).HasColumnName("shipments");
            });

            modelBuilder.Entity<ViewPmp3eX1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3E_x_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3eX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3E_x_2");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(51)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3f>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3F");

                entity.Property(e => e.Airport).HasColumnName("airport");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.DateEmailSentToSupplier)
                    .HasColumnName("Date_email_sent_to_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptAtAirport)
                    .HasColumnName("date_goods_receipt_at_airport")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateGoodsReceiptMaulWarehouse)
                    .HasColumnName("date_goods_receipt_MAUL_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierResponseToEmail)
                    .HasColumnName("date_supplier_response_to_email")
                    .HasColumnType("datetime");

                entity.Property(e => e.DueDatePerProcurementPlan)
                    .HasColumnName("Due_date_per_procurement_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnTime)
                    .HasColumnName("on_time")
                    .HasMaxLength(3);

                entity.Property(e => e.OutstandingQuantities).HasColumnName("Outstanding_Quantities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProcurementRefNo)
                    .HasColumnName("Procurement_Ref_No# ")
                    .HasMaxLength(55);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.PurchaseOrdersFilled)
                    .HasColumnName("purchase_orders_filled ")
                    .HasMaxLength(3);

                entity.Property(e => e.QtyGoodsReceived).HasColumnName("Qty_goods_received");

                entity.Property(e => e.QtyOrdered).HasColumnName("Qty_Ordered ");

                entity.Property(e => e.RescheduledDates)
                    .HasColumnName("rescheduled_dates")
                    .HasColumnType("datetime");

                entity.Property(e => e.ScheduleStatus)
                    .HasColumnName("schedule_status")
                    .HasMaxLength(25);

                entity.Property(e => e.ScheduledShipments)
                    .HasColumnName("scheduled_shipments")
                    .HasMaxLength(3);

                entity.Property(e => e.ShipmentStatusMaulSupplierDate)
                    .HasColumnName("shipment_status_MAUL_Supplier_date#")
                    .HasMaxLength(15);

                entity.Property(e => e.ShipmentStatusPerPpDate)
                    .HasColumnName("Shipment_status_per_PP_date")
                    .HasMaxLength(15);

                entity.Property(e => e.Supplier)
                    .HasColumnName(" Supplier ")
                    .HasMaxLength(15);

                entity.Property(e => e.VarianceMaulSupplierDueDate).HasColumnName("Variance_Maul_Supplier_due_date");

                entity.Property(e => e.VariancePpDate).HasColumnName("variance_PP_date");
            });

            modelBuilder.Entity<ViewPmp3fX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3F_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.PlannedShipments).HasColumnName("planned_shipments");

                entity.Property(e => e.Shipments).HasColumnName("shipments");
            });

            modelBuilder.Entity<ViewPmp3fX1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3F_x_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3fX2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3F_x_2");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(56)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp3g>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3G");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.OrderDate)
                    .HasColumnName("order_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.TaskOrder)
                    .HasColumnName("task_order")
                    .HasMaxLength(255);

                entity.Property(e => e.TotalCostFobMaulPriceUsd)
                    .HasColumnName("total_cost_FOB_MAUL_price_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalOrderCostScmsUsd)
                    .HasColumnName("total_order_cost_SCMS_USD")
                    .HasColumnType("money");

                entity.Property(e => e.TotalSavingBasedOnFob)
                    .HasColumnName("total_saving_based_on_FOB")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ViewPmp3gX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_3G_X");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.EmergencyProcurement).HasColumnName("emergency_procurement");

                entity.Property(e => e.NormalProcurement).HasColumnName("normal_procurement");

                entity.Property(e => e.PercentApprovedNtgs).HasColumnName("Percent_approved_NTGs");
            });

            modelBuilder.Entity<ViewPmp4a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4A");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MeetsGlobalStandards)
                    .HasColumnName("meets_global_standards")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.WarehouseDesc)
                    .HasColumnName("warehouse_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            });

            modelBuilder.Entity<ViewPmp4aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4A_x");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4aXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4A_x_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.HaveAdherenceCertificates).HasColumnName("have_adherence_certificates");

                entity.Property(e => e.MeetsGlobalStandards).HasColumnName("meets_global_standards");

                entity.Property(e => e.PHaveAdherenceCertificates).HasColumnName("p_have_adherence_certificates");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp4aXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4A_x_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4B");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MeetsNationalStandards)
                    .HasColumnName("meets_national_standards")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.WarehouseDesc)
                    .HasColumnName("warehouse_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            });

            modelBuilder.Entity<ViewPmp4bX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4B_x");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);

                entity.Property(e => e.StrSitesValues)
                    .HasColumnName("str_sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4bXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4B_x_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.HaveAdherenceCertificates).HasColumnName("have_adherence_certificates");

                entity.Property(e => e.MeetsNationalStandards).HasColumnName("meets_national_standards");

                entity.Property(e => e.PHaveAdherenceCertificates).HasColumnName("p_have_adherence_certificates");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp4bXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4B_x_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4C");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedStockCard)
                    .HasColumnName("updated_stock_card")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp4cX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4C_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4cXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4C_x_a");

                entity.Property(e => e.AdherenceStockCard).HasColumnName("adherence_stock_card");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoFacilities).HasColumnName("no_facilities");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.UpdatedStockCard).HasColumnName("updated_stock_card");
            });

            modelBuilder.Entity<ViewPmp4cXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4C_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4d>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp4dA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoSitesThatReported).HasColumnName("no_sites_that_reported");

                entity.Property(e => e.NoSitesWithMinMax).HasColumnName("no_sites_with_MinMax");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<ViewPmp4dB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp4dX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4dXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D_x_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.NoSitesThatReported).HasColumnName("no_sites_that_reported");

                entity.Property(e => e.NoSitesWithMinMax).HasColumnName("no_sites_with_MinMax");

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);
            });

            modelBuilder.Entity<ViewPmp4dXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4D_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4e>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4E");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.PhysicalCountEqualStockCardBalance)
                    .HasColumnName("physical_count_equal_stock_card_balance")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewPmp4eX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4E_x");

                entity.Property(e => e.BiAnnual)
                    .HasColumnName("bi_annual")
                    .HasMaxLength(255);

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4eXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4E_x_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.FacilitiesVisited).HasColumnName("facilities_visited");

                entity.Property(e => e.PPhysicalCountEqualStockCardBalance).HasColumnName("p_physical_count_equal_stock_card_balance");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.PhysicalCountEqualStockCardBalance).HasColumnName("physical_count_equal_stock_card_balance");
            });

            modelBuilder.Entity<ViewPmp4eXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4E_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(255);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(255);

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4f>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4F");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.ValueExpiredProducts).HasColumnName("value_expired_products");

                entity.Property(e => e.ValueStockOnHand).HasColumnName("value_stock_on_hand");
            });

            modelBuilder.Entity<ViewPmp4fA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4F_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.StockWriteOffs).HasColumnName("stock_write_offs");

                entity.Property(e => e.ValueExpiredProducts).HasColumnName("value_expired_products");

                entity.Property(e => e.ValueStockOnHand).HasColumnName("value_stock_on_hand");
            });

            modelBuilder.Entity<ViewPmp4fB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4F_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4fX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4F_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6);

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2);

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4g>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(59)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp4gA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoSitesWithStockOuts).HasColumnName("no_sites_with_stock_outs");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.TotalNumberSites).HasColumnName("total_number_sites");
            });

            modelBuilder.Entity<ViewPmp4gB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp4gX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Me)
                    .HasColumnName("me")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(59)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp4gXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G_x_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoSitesWithStockOuts).HasColumnName("no_sites_with_stock_outs");

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.TotalNumberSites).HasColumnName("total_number_sites");
            });

            modelBuilder.Entity<ViewPmp4gXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_4G_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5aA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderFillRate).HasColumnName("order_fill_rate");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<ViewPmp5aB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A_x");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5aXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A_x_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.OrderFillRate).HasColumnName("order_fill_rate");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<ViewPmp5aXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5A_x_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5B");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp5bA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5B_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoOfCycles).HasColumnName("no_of_cycles");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.TotalDeliveriesInHours).HasColumnName("total_deliveries_in_hours");
            });

            modelBuilder.Entity<ViewPmp5bB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5B_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp5c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5C");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(28)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5cA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5C_a");

                entity.Property(e => e.AStatus)
                    .HasColumnName("a_status")
                    .HasMaxLength(31);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.LastActualDeliveryDate)
                    .HasColumnName("last_actual_delivery_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ScheduledDeliveryDate)
                    .HasColumnName("scheduled_delivery_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmp5cB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5C_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5e>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5E");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Me)
                    .HasColumnName("me")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5eA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5E_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5eX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5E_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5eXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5E_x_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ReportingRates).HasColumnName("reporting_rates");

                entity.Property(e => e.SitesExpectedToReport).HasColumnName("sites_expected_to_report");

                entity.Property(e => e.SitesThatReported).HasColumnName("sites_that_reported");

                entity.Property(e => e.SitesThatReportedOntime).HasColumnName("sites_that_reported_ontime");

                entity.Property(e => e.TimelinessOfReporting).HasColumnName("timeliness_of_reporting");
            });

            modelBuilder.Entity<ViewPmp5eXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5E_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5f>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5fA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderFillRate).HasColumnName("order_fill_rate");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<ViewPmp5fB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5fX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F_x");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5fXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F_x_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.OrderFillRate).HasColumnName("order_fill_rate");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductsFulfilled).HasColumnName("products_fulfilled");

                entity.Property(e => e.ProductsRequestedFor).HasColumnName("products_requested_for");
            });

            modelBuilder.Entity<ViewPmp5fXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5F_x_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5g>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Me)
                    .HasColumnName("me")
                    .HasMaxLength(30);

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5gA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.CostOfDistribution).HasColumnName("cost_of_distribution");

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Ratio).HasColumnName("ratio");

                entity.Property(e => e.ValueOfCommodities).HasColumnName("value_of_commodities");
            });

            modelBuilder.Entity<ViewPmp5gB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5gX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5gXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G_x_a");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.CostOfDistribution).HasColumnName("cost_of_distribution");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Ratio).HasColumnName("ratio");

                entity.Property(e => e.ValueOfCommodities).HasColumnName("value_of_commodities");
            });

            modelBuilder.Entity<ViewPmp5gXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5G_x_b");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp5h>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5H");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StockOut).HasColumnName("stock_out");

                entity.Property(e => e.StockOutRate).HasColumnName("stock_out_rate");
            });

            modelBuilder.Entity<ViewPmp5hX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5H_x");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.SitePercentage)
                    .HasColumnName("site_percentage")
                    .HasMaxLength(31);
            });

            modelBuilder.Entity<ViewPmp5hX1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_5H_x_1");

                entity.Property(e => e.CopYear)
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.SitePercentage)
                    .HasColumnName("site_percentage")
                    .HasMaxLength(31);
            });

            modelBuilder.Entity<ViewPmp6a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6A");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(66)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp6aA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6A_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp6aB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6A_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.SitePercentage)
                    .HasColumnName("site_percentage")
                    .HasMaxLength(31);
            });

            modelBuilder.Entity<ViewPmp6b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6B");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(69)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp6bA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6B_a");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues).HasColumnName("sites_values");
            });

            modelBuilder.Entity<ViewPmp6bB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6B_b");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.SitesPercentage)
                    .HasColumnName("sites_percentage")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp6c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6C");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Me)
                    .IsRequired()
                    .HasColumnName("me")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.MonthId)
                    .HasColumnName("month_id")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp6cA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6C_a");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Months)
                    .HasColumnName("months")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp6cX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6C_x");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .IsRequired()
                    .HasColumnName("sites")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp6cXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6C_x_a");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ReportingRates).HasColumnName("reporting_rates");

                entity.Property(e => e.SitesExpectedToReport).HasColumnName("sites_expected_to_report");

                entity.Property(e => e.SitesThatReported).HasColumnName("sites_that_reported");

                entity.Property(e => e.SitesThatReportedOnTime).HasColumnName("sites_that_reported_on_time");

                entity.Property(e => e.TimelinessOfReporting).HasColumnName("timeliness_of_reporting");
            });

            modelBuilder.Entity<ViewPmp6cXB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_6C_x_b");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sites)
                    .HasColumnName("sites")
                    .HasMaxLength(128);

                entity.Property(e => e.SitesValues)
                    .HasColumnName("sites_values")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ViewPmp7a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7A");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Lmis)
                    .IsRequired()
                    .HasColumnName("LMIS")
                    .HasMaxLength(25);

                entity.Property(e => e.NoTrainedLmis).HasColumnName("no_trained_LMIS");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.XMonths)
                    .HasColumnName("x_months")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmp7aX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7A_x");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoTrainedLmis).HasColumnName("no_trained_LMIS");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp7b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7B");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Lmis)
                    .IsRequired()
                    .HasColumnName("LMIS")
                    .HasMaxLength(33);

                entity.Property(e => e.NoTrainedScm).HasColumnName("no_trained_SCM");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.XMonths)
                    .HasColumnName("x_months")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmp7bX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7B_x");

                entity.Property(e => e.BiAnnual)
                    .IsRequired()
                    .HasColumnName("bi_annual")
                    .HasMaxLength(2);

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoTrainedScm).HasColumnName("no_trained_SCM");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmp7c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7C");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Lmis)
                    .IsRequired()
                    .HasColumnName("LMIS")
                    .HasMaxLength(46);

                entity.Property(e => e.NoSupportSupervisionVisits).HasColumnName("no_support_supervision_visits");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.XMonths)
                    .HasColumnName("x_months")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmp7cX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_7C_x");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.NoSupportSupervisionVisits).HasColumnName("no_support_supervision_visits");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewPmpActualConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_actual_consumption");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpActualProcurementCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_actual_procurement_cost");

                entity.Property(e => e.FobPrice).HasColumnName("fob_price");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PriceVariance).HasColumnName("price_variance");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ScmsPrice).HasColumnName("scms_price");
            });

            modelBuilder.Entity<ViewPmpAdheringDeadline>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_adhering_deadline");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpArvPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_arv_price");

                entity.Property(e => e.Gf).HasColumnName("GF");

                entity.Property(e => e.Maul).HasColumnName("MAUL");

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Scms).HasColumnName("SCMS");
            });

            modelBuilder.Entity<ViewPmpCorrectOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_correct_orders");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedShipment).HasColumnName("expected_shipment");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutstandingQuantity).HasColumnName("outstanding_quantity");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_MAUL");
            });

            modelBuilder.Entity<ViewPmpDeliverySchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_delivery_schedule");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpEmergencyProcurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_emergency_procurement");

                entity.Property(e => e.DateArrivalEntebbe)
                    .HasColumnName("date_arrival_entebbe")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.NormalOrEmergencyProcurement).HasColumnName("normal_or_emergency_procurement");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpIndicatorProductType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_indicator_product_type");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ViewPmpMetrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PMP_METRIX");

                entity.Property(e => e.CopYear)
                    .IsRequired()
                    .HasColumnName("COP_Year")
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.PmpDataCollectionFrequencyCode).HasColumnName("pmp_data_collection_frequency_code");

                entity.Property(e => e.PmpDataCollectionFrequencyDesc)
                    .HasColumnName("pmp_data_collection_frequency_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.PmpIndicatorCode)
                    .IsRequired()
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.PmpIndicatorDesc)
                    .HasColumnName("pmp_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpObjectiveDesc)
                    .HasColumnName("pmp_objective_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.PmpTarget)
                    .HasColumnName("pmp_target")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q1)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q2)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q3)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q4)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Rationale)
                    .HasColumnName("rationale")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ViewPmpOrderFillRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_order_fill_rate");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderFillRate).HasColumnName("order_fill_rate");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewPmpOrderFulfillment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_order_fulfillment");

                entity.Property(e => e.DrugsAllocated).HasColumnName("drugs_allocated");

                entity.Property(e => e.DrugsRequired).HasColumnName("drugs_required");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpPerformanceIndicator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_performance_indicator");

                entity.Property(e => e.PmpDataCollectionFrequencyCode).HasColumnName("pmp_data_collection_frequency_code");

                entity.Property(e => e.PmpIndicatorCode)
                    .IsRequired()
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.PmpObjectiveCode).HasColumnName("pmp_objective_code");

                entity.Property(e => e.PmpTarget)
                    .HasColumnName("pmp_target")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Rationale)
                    .HasColumnName("rationale")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ViewPmpPerformanceIndicatorCopYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_performance_indicator_cop_year");

                entity.Property(e => e.CopYear).HasColumnName("cop_year");

                entity.Property(e => e.NumeratorDenominatorCode)
                    .IsRequired()
                    .HasColumnName("numerator_denominator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.NumeratorDenominatorDesc)
                    .HasColumnName("numerator_denominator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpDataCollectionFrequencyCode).HasColumnName("pmp_data_collection_frequency_code");

                entity.Property(e => e.PmpIndicatorCode)
                    .IsRequired()
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.PmpIndicatorDesc)
                    .HasColumnName("pmp_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpObjectiveCode).HasColumnName("pmp_objective_code");

                entity.Property(e => e.PmpTarget)
                    .HasColumnName("pmp_target")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Q1).HasColumnName("q1");

                entity.Property(e => e.Q2).HasColumnName("q2");

                entity.Property(e => e.Q3).HasColumnName("q3");

                entity.Property(e => e.Q4).HasColumnName("q4");

                entity.Property(e => e.Rationale)
                    .HasColumnName("rationale")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ViewPmpPerformanceIndicatorCopYearA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_performance_indicator_cop_year_a");

                entity.Property(e => e.NumeratorDenominatorCode)
                    .IsRequired()
                    .HasColumnName("numerator_denominator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.NumeratorDenominatorDesc)
                    .HasColumnName("numerator_denominator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpDataCollectionFrequencyCode).HasColumnName("pmp_data_collection_frequency_code");

                entity.Property(e => e.PmpIndicatorCode)
                    .IsRequired()
                    .HasColumnName("pmp_indicator_code")
                    .HasMaxLength(10);

                entity.Property(e => e.PmpIndicatorDesc)
                    .HasColumnName("pmp_indicator_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PmpObjectiveCode).HasColumnName("pmp_objective_code");

                entity.Property(e => e.PmpTarget)
                    .HasColumnName("pmp_target")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Rationale)
                    .HasColumnName("rationale")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ViewPmpProcuredProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_procured_products");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewPmpProcuredProductsMoh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_procured_products_moh");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewPmpProcuredProductsWhoFda>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_procured_products_who_fda");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewPmpScheduledDeliveries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_scheduled_deliveries");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpScheduledShipments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_scheduled_shipments");

                entity.Property(e => e.ArrivalDays).HasColumnName("arrival_days");

                entity.Property(e => e.DateArrivalEntebbe)
                    .HasColumnName("date_arrival_entebbe")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpShipmentsDelivered>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_shipments_delivered");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedShipment).HasColumnName("expected_shipment");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutstandingQuantity).HasColumnName("outstanding_quantity");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_MAUL");
            });

            modelBuilder.Entity<ViewPmpStockOutBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_stock_out_base");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpStockOutFacilityBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_stock_out_facility_base");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpStockOutRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_stock_out_rate");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpTotalArvOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_total_arv_order");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpTotalDeliveries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_total_deliveries");

                entity.Property(e => e.ActualDateAtSite)
                    .HasColumnName("actual_date_at_site")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("departure_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedDateAtSite)
                    .HasColumnName("expected_date_at_site")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewPmpTotalShipments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_pmp_total_shipments");

                entity.Property(e => e.DateArrivalEntebbe)
                    .HasColumnName("date_arrival_entebbe")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPriceSupplierList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_price_supplier_list");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PriceYear).HasColumnName("price_year");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcBidStatusAwardedProvider>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_awarded_provider");

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierDesc)
                    .HasColumnName("supplier_desc")
                    .HasMaxLength(350);
            });

            modelBuilder.Entity<ViewProcBidStatusBidManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_bid_manager");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcBidStatusEvaluationCommittee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_evaluation_committee");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcBidStatusReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_report");

                entity.Property(e => e.ActionDescription).HasMaxLength(500);

                entity.Property(e => e.Actions).IsRequired();

                entity.Property(e => e.AwardedProviders).IsRequired();

                entity.Property(e => e.BidManager).IsRequired();

                entity.Property(e => e.BidOpeningDate).HasColumnType("datetime");

                entity.Property(e => e.BudgetUsd).HasColumnName("BudgetUSD");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.ContractAmountUsd).HasColumnName("ContractAmountUSD");

                entity.Property(e => e.ContractBalanceUsd).HasColumnName("ContractBalanceUSD");

                entity.Property(e => e.CotractManagementReportDescription).HasMaxLength(500);

                entity.Property(e => e.CotractManagementReportId).HasColumnName("CotractManagementReport_id");

                entity.Property(e => e.CurrentStatusDescription).HasMaxLength(500);

                entity.Property(e => e.DateConfirmationByUserDepartment).HasColumnType("datetime");

                entity.Property(e => e.DateNegotiationPresentationReportAwardedToPac)
                    .HasColumnName("DateNegotiationPresentationReportAwardedToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfDueDeligencePostQualification).HasColumnType("datetime");

                entity.Property(e => e.DateOfInvitation).HasColumnType("datetime");

                entity.Property(e => e.DateOfIssueOfAward).HasColumnType("datetime");

                entity.Property(e => e.DateOfNegotiations).HasColumnType("datetime");

                entity.Property(e => e.DateOfPacapprovalOfEvaluationReportAward)
                    .HasColumnName("DateOfPACApprovalOfEvaluationReportAward")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatePreparationOfSpecificationsTorSowRfq)
                    .HasColumnName("DatePreparationOfSpecifications_TOR_SOW_RFQ")
                    .HasColumnType("datetime");

                entity.Property(e => e.DatePresentationRfqRfpToPac)
                    .HasColumnName("DatePresentation_RFQ_RFP_ToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRequestClarificationByMaul)
                    .HasColumnName("DateRequestClarificationByMAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateResponseFromCdc)
                    .HasColumnName("DateResponseFromCDC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateResponseToClarificationBySuppliers).HasColumnType("datetime");

                entity.Property(e => e.DateSubmissionOfEvaluationReportToCdc)
                    .HasColumnName("DateSubmissionOfEvaluationReportToCDC")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSubmissionOfEvaluationReportToPac)
                    .HasColumnName("DateSubmissionOfEvaluationReportToPAC")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDateRequestClarificationFromSuppliers).HasColumnType("datetime");

                entity.Property(e => e.EndDateResponseToClarificationFromMaul)
                    .HasColumnName("EndDateResponseToClarificationFromMAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.EvaluationCommencementDate).HasColumnType("datetime");

                entity.Property(e => e.EvaluationCommittee).IsRequired();

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("order_no")
                    .HasMaxLength(10);

                entity.Property(e => e.OrderOrgan).HasColumnName("order_organ");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcurementSubject).HasMaxLength(150);

                entity.Property(e => e.ResponseFromCdcd).HasColumnName("ResponseFromCDCD");

                entity.Property(e => e.ResponseFromCdcdescription)
                    .HasColumnName("ResponseFromCDCDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDateRequestClarificationFromSuppliers).HasColumnType("datetime");

                entity.Property(e => e.StartDateResponseToClarificationFromMaul)
                    .HasColumnName("StartDateResponseToClarificationFromMAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.SuppliersWhoSubmittedQuotationsBeforeDeadline).IsRequired();

                entity.Property(e => e.TaskOrderNo).HasColumnName("task_order_no");
            });

            modelBuilder.Entity<ViewProcBidStatusReportActionTaken>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_report_action_taken");

                entity.Property(e => e.ActionCode).HasColumnName("action_code");

                entity.Property(e => e.ActionDetail)
                    .HasColumnName("action_detail")
                    .HasMaxLength(150);

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcBidStatusReportEvaluationCommittee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_report_evaluation_committee");

                entity.Property(e => e.CpCategory).HasColumnName("cp_category");

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CpTitle).HasColumnName("cp_title");

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcBidStatusSupplierQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_bid_status_supplier_quotation");

                entity.Property(e => e.ProcurementReferenceNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierDesc)
                    .HasColumnName("supplier_desc")
                    .HasMaxLength(350);
            });

            modelBuilder.Entity<ViewProcBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_budget");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.Fob).HasColumnName("FOB");

                entity.Property(e => e.Psm).HasColumnName("PSM");
            });

            modelBuilder.Entity<ViewProcCDamages>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_c_damages");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewProcCDeliveries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_c_deliveries");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewProcCExpectedDeliveries>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_c_expected_deliveries");

                entity.Property(e => e.AwardExpectedDateDelivery)
                    .HasColumnName("award_expected_date_delivery")
                    .HasColumnType("datetime");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcCOntimeShipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_c_ontime_shipment");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewProcCQualityIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_c_quality_issue");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewProcOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_orders");

                entity.Property(e => e.CifPrice).HasColumnName("CIF_Price");

                entity.Property(e => e.Commments).HasMaxLength(500);

                entity.Property(e => e.DateForwardedToNda)
                    .HasColumnName("Date_forwarded_to_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfOrderArrival)
                    .HasColumnName("Date_of_order_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOrderClearanceCustoms)
                    .HasColumnName("Date_order_clearance_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedFromNda)
                    .HasColumnName("Date_recieved_from_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.FobPrice).HasColumnName("FOB_Price");

                entity.Property(e => e.IsOrderApproved).HasColumnName("Is_Order_Approved");

                entity.Property(e => e.OrderConfirmationDate)
                    .HasColumnName("Order_confirmation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("Order_Due_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderQuanity).HasColumnName("Order_quanity");

                entity.Property(e => e.PfiAddToOrder).HasColumnName("PFI_add_to_order");

                entity.Property(e => e.PfiPrice).HasColumnName("PFI_price");

                entity.Property(e => e.PfiQuantity).HasColumnName("PFI_quantity");

                entity.Property(e => e.PflNo)
                    .HasColumnName("PFL_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity_Outstanding");

                entity.Property(e => e.QuantityRecieved).HasColumnName("Quantity_Recieved");

                entity.Property(e => e.RfqNo)
                    .IsRequired()
                    .HasColumnName("RFQ_no")
                    .HasMaxLength(50);

                entity.Property(e => e.RfqQuantity).HasColumnName("RFQ_quantity");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.TaskNo)
                    .IsRequired()
                    .HasColumnName("task_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcPfiList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_pfi_list");

                entity.Property(e => e.PfiNo)
                    .IsRequired()
                    .HasColumnName("pfi_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcPrequalifiedSuppliers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_prequalified_suppliers");

                entity.Property(e => e.CountryCode).HasColumnName("country_code");

                entity.Property(e => e.EndOfPeriod)
                    .HasColumnName("end_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartOfPeriod)
                    .HasColumnName("start_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.SupplierDesc)
                    .HasColumnName("supplier_desc")
                    .HasMaxLength(350);
            });

            modelBuilder.Entity<ViewProcPriceSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_price_supplier");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");
            });

            modelBuilder.Entity<ViewProcPriceSupplierAdd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_price_supplier_add");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcPriceSupplierRStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_price_supplier_rStatus");

                entity.Property(e => e.PDay).HasColumnName("pDay");

                entity.Property(e => e.PMonth).HasColumnName("pMonth");

                entity.Property(e => e.PYear).HasColumnName("pYear");

                entity.Property(e => e.PriceDate)
                    .HasColumnName("price_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");
            });

            modelBuilder.Entity<ViewProcPriceSupplierReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_price_supplier_report");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PriceYear).HasColumnName("price_year");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");
            });

            modelBuilder.Entity<ViewProcProductTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_product_tracker");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.BudgetedValue).HasColumnName("budgeted_value");

                entity.Property(e => e.CifAwardDifferenceCifPfi).HasColumnName("CIF_award_difference_CIF_PFI");

                entity.Property(e => e.CifPrice).HasColumnName("cif_price");

                entity.Property(e => e.CifPriceTotal).HasColumnName("cif_price_total");

                entity.Property(e => e.Completion).HasColumnName("completion");

                entity.Property(e => e.CountryOfOrigin).HasColumnName("country_of_origin");

                entity.Property(e => e.DateAcceptanceAwardSupplier)
                    .HasColumnName("date_acceptance_award_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateArrivalEntebbe)
                    .HasColumnName("date_arrival_entebbe")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateForwardedNda)
                    .HasColumnName("date_forwarded_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueAward)
                    .HasColumnName("date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecieptClearingAgent)
                    .HasColumnName("date_reciept_clearing_agent")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedNda)
                    .HasColumnName("date_recieved_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedPfi)
                    .HasColumnName("date_recieved_pfi")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSupplierSentShippingDocumentsToMaul)
                    .HasColumnName("date_supplier_sent_shipping_documents_to_MAUL")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedShipment).HasColumnName("expected_shipment");

                entity.Property(e => e.FitForPurpose).HasColumnName("fit_for_purpose");

                entity.Property(e => e.FobPrice).HasColumnName("fob_price");

                entity.Property(e => e.FobPriceTotal).HasColumnName("fob_price_total");

                entity.Property(e => e.InsuranceFreight).HasColumnName("insurance_freight");

                entity.Property(e => e.Manufacturer).HasColumnName("manufacturer");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NewProposalDueDate)
                    .HasColumnName("new_proposal_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NormalOrEmergencyProcurement).HasColumnName("normal_or_emergency_procurement");

                entity.Property(e => e.OnTimePerformanceOfInboundCommodityShipments).HasColumnName("on_time_performance_of_inbound_commodity_shipments");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderClassificationCode).HasColumnName("order_classification_code");

                entity.Property(e => e.OrderConfirmationDate)
                    .HasColumnName("order_confirmation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("order_no")
                    .HasMaxLength(10);

                entity.Property(e => e.OrderOrgan).HasColumnName("order_organ");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderStatus).HasColumnName("order_status");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.OutstandingQuantity).HasColumnName("outstanding_quantity");

                entity.Property(e => e.PercentageScheduledShipmentsThatMatchProcurementPlanBudget).HasColumnName("percentage_scheduled_shipments_that_match_procurement_plan_budget");

                entity.Property(e => e.PfiNo)
                    .IsRequired()
                    .HasColumnName("pfi_no")
                    .HasMaxLength(50);

                entity.Property(e => e.PfiTotalCif).HasColumnName("pfi_total_cif");

                entity.Property(e => e.PfiTotalFob).HasColumnName("pfi_total_fob");

                entity.Property(e => e.PfiValue).HasColumnName("pfi_value");

                entity.Property(e => e.PriceVariance).HasColumnName("price_variance");

                entity.Property(e => e.ProcurementPlanQuantity).HasColumnName("procurement_plan_quantity");

                entity.Property(e => e.ProductBasicUnit).HasColumnName("product_basic_unit");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCostComparedToInternationalCostAnalysis).HasColumnName("product_cost_compared_to_international_cost_analysis");

                entity.Property(e => e.ProductPackSize).HasColumnName("product_pack_size");

                entity.Property(e => e.ProductStrength)
                    .HasColumnName("product_strength")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_MAUL");

                entity.Property(e => e.ScmsPrice).HasColumnName("scms_price");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.TaskOrderNo).HasColumnName("task_order_no");

                entity.Property(e => e.TotalOrderValue).HasColumnName("total_order_value");

                entity.Property(e => e.Vendor).HasColumnName("vendor");
            });

            modelBuilder.Entity<ViewProcTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_task");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.DateForwardedToNda)
                    .HasColumnName("Date_forwarded_to_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedFromNda)
                    .HasColumnName("Date_recieved_from_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PfiAddToOrder).HasColumnName("PFI_add_to_order");

                entity.Property(e => e.PfiPrice).HasColumnName("PFI_price");

                entity.Property(e => e.PfiQuantity).HasColumnName("PFI_quantity");

                entity.Property(e => e.PflNo)
                    .HasColumnName("PFL_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.RfqNo)
                    .IsRequired()
                    .HasColumnName("RFQ_no")
                    .HasMaxLength(50);

                entity.Property(e => e.RfqQuantity).HasColumnName("RFQ_quantity");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.TaskNo)
                    .IsRequired()
                    .HasColumnName("task_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_tracker");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CifPrice).HasColumnName("CIF_Price");

                entity.Property(e => e.Commments).HasMaxLength(500);

                entity.Property(e => e.DateForwardedToNda)
                    .HasColumnName("Date_forwarded_to_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfOrderArrival)
                    .HasColumnName("Date_of_order_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOrderClearanceCustoms)
                    .HasColumnName("Date_order_clearance_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRecievedFromNda)
                    .HasColumnName("Date_recieved_from_NDA")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndOfPeriod)
                    .HasColumnName("end_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.FobPrice).HasColumnName("FOB_Price");

                entity.Property(e => e.OrderConfirmationDate)
                    .HasColumnName("Order_confirmation_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("Order_Due_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.OrderQuanity).HasColumnName("Order_quanity");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PflNo)
                    .HasColumnName("PFL_no")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.QuantityOutstanding).HasColumnName("Quantity_Outstanding");

                entity.Property(e => e.QuantityRecieved).HasColumnName("Quantity_Recieved");

                entity.Property(e => e.StartOfPeriod)
                    .HasColumnName("start_of_period")
                    .HasColumnType("datetime");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasColumnName("supplier_code");

                entity.Property(e => e.TaskNo)
                    .IsRequired()
                    .HasColumnName("task_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcTrackerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_tracker_detail");

                entity.Property(e => e.Addendum).HasColumnName("addendum");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.AwardCifCipDdpPrice).HasColumnName("award_cif_cip_ddp_price");

                entity.Property(e => e.AwardDateAcceptanceAward)
                    .HasColumnName("award_date_acceptance_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardDateIssueAward)
                    .HasColumnName("award_date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardExpectedDateDelivery)
                    .HasColumnName("award_expected_date_delivery")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardFobPrice).HasColumnName("award_fob_price");

                entity.Property(e => e.AwardId).HasColumnName("award_id");

                entity.Property(e => e.AwardNewDueDate)
                    .HasColumnName("award_new_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardQuantityOrdered).HasColumnName("award_quantity_ordered");

                entity.Property(e => e.AwardScmsPrice).HasColumnName("award_scms_price");

                entity.Property(e => e.AwardTotalCifCipDdpPrice).HasColumnName("award_total_cif_cip_ddp_price");

                entity.Property(e => e.AwardTotalFobPrice).HasColumnName("award_total_fob_price");

                entity.Property(e => e.AwardUnitFobScmsPrice).HasColumnName("award_unit_fob_scms_price");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.CommercialInvoiceId).HasColumnName("commercial_invoice_id");

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.DateArrivalEntryPort)
                    .HasColumnName("date_arrival_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateClearedEntryPort)
                    .HasColumnName("date_cleared_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateDeliveredWarehouse)
                    .HasColumnName("date_delivered_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateShippingDocumentsSentMaul)
                    .HasColumnName("date_shipping_documents_sent_maul")
                    .HasColumnType("datetime");

                entity.Property(e => e.FitForPurpose).HasColumnName("fit_for_purpose");

                entity.Property(e => e.GrnDate)
                    .HasColumnName("grn_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnDateReceiptWarehouse)
                    .HasColumnName("grn_date_receipt_warehouse")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnNo)
                    .HasColumnName("grn_no")
                    .HasMaxLength(50);

                entity.Property(e => e.GrnQuantity).HasColumnName("grn_quantity");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("invoice_no")
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceValue).HasColumnName("invoice_value");

                entity.Property(e => e.Manufacturer).HasColumnName("manufacturer");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NormalEmergencyProcurement).HasColumnName("normal_emergency_procurement");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("order_no")
                    .HasMaxLength(10);

                entity.Property(e => e.OrderOrgan).HasColumnName("order_organ");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderStatus).HasColumnName("order_status");

                entity.Property(e => e.OrderType).HasColumnName("order_type");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PfiCifVariance).HasColumnName("pfi_cif_variance");

                entity.Property(e => e.PfiDate)
                    .HasColumnName("pfi_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiDateSubmission)
                    .HasColumnName("pfi_date_submission")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiDateToNda)
                    .HasColumnName("pfi_date_to_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiFobVariance).HasColumnName("pfi_fob_variance");

                entity.Property(e => e.PfiInsuranceFrieght).HasColumnName("pfi_insurance_frieght");

                entity.Property(e => e.PfiNo)
                    .HasColumnName("pfi_no")
                    .HasMaxLength(50);

                entity.Property(e => e.PfiTotalCif).HasColumnName("pfi_total_cif");

                entity.Property(e => e.PfiTotalFob).HasColumnName("pfi_total_fob");

                entity.Property(e => e.PfiVerifiedNda)
                    .HasColumnName("pfi_verified_nda")
                    .HasColumnType("datetime");

                entity.Property(e => e.PfiVerifiedSupplier)
                    .HasColumnName("pfi_verified_supplier")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProcurementQuantity).HasColumnName("procurement_quantity");

                entity.Property(e => e.Product).HasColumnName("product");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.PurcNoOrderType).HasColumnName("purc_no_order_type");

                entity.Property(e => e.PurchaseOrderNo)
                    .IsRequired()
                    .HasColumnName("purchase_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.QualityIssue).HasColumnName("quality_issue");

                entity.Property(e => e.QualityIssueDesc)
                    .HasColumnName("quality_issue_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.QuantityOutstanding).HasColumnName("quantity_outstanding");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_maul");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);

                entity.Property(e => e.Supplier).HasColumnName("supplier");

                entity.Property(e => e.TaskOrderNo)
                    .HasColumnName("task_order_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Vendor).HasColumnName("vendor");
            });

            modelBuilder.Entity<ViewProcTrackerPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_tracker_price");

                entity.Property(e => e.Gf).HasColumnName("GF");

                entity.Property(e => e.Maul).HasColumnName("MAUL");

                entity.Property(e => e.PriceMonth).HasColumnName("price_month");

                entity.Property(e => e.PriceYear).HasColumnName("price_year");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.Scms).HasColumnName("SCMS");
            });

            modelBuilder.Entity<ViewProcTrackerPriceList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_proc_tracker_price_list");

                entity.Property(e => e.AprGf).HasColumnName("apr_gf");

                entity.Property(e => e.AprMaul).HasColumnName("apr_maul");

                entity.Property(e => e.AprScms).HasColumnName("apr_scms");

                entity.Property(e => e.AugGf).HasColumnName("aug_gf");

                entity.Property(e => e.AugMaul).HasColumnName("aug_maul");

                entity.Property(e => e.AugScms).HasColumnName("aug_scms");

                entity.Property(e => e.DecGf).HasColumnName("dec_gf");

                entity.Property(e => e.DecMaul).HasColumnName("dec_maul");

                entity.Property(e => e.DecScms).HasColumnName("dec_scms");

                entity.Property(e => e.FebGf).HasColumnName("feb_gf");

                entity.Property(e => e.FebMaul).HasColumnName("feb_maul");

                entity.Property(e => e.FebScms).HasColumnName("feb_scms");

                entity.Property(e => e.JanGf).HasColumnName("jan_gf");

                entity.Property(e => e.JanMaul).HasColumnName("jan_maul");

                entity.Property(e => e.JanScms).HasColumnName("jan_scms");

                entity.Property(e => e.JulGf).HasColumnName("jul_gf");

                entity.Property(e => e.JulMaul).HasColumnName("jul_maul");

                entity.Property(e => e.JulScms).HasColumnName("jul_scms");

                entity.Property(e => e.JunGf).HasColumnName("jun_gf");

                entity.Property(e => e.JunMaul).HasColumnName("jun_maul");

                entity.Property(e => e.JunScms).HasColumnName("jun_scms");

                entity.Property(e => e.MarGf).HasColumnName("mar_gf");

                entity.Property(e => e.MarMaul).HasColumnName("mar_maul");

                entity.Property(e => e.MarScms).HasColumnName("mar_scms");

                entity.Property(e => e.MayGf).HasColumnName("may_gf");

                entity.Property(e => e.MayMaul).HasColumnName("may_maul");

                entity.Property(e => e.MayScms).HasColumnName("may_scms");

                entity.Property(e => e.NovGf).HasColumnName("nov_gf");

                entity.Property(e => e.NovMaul).HasColumnName("nov_maul");

                entity.Property(e => e.NovScms).HasColumnName("nov_scms");

                entity.Property(e => e.OctGf).HasColumnName("oct_gf");

                entity.Property(e => e.OctMaul).HasColumnName("oct_maul");

                entity.Property(e => e.OctScms).HasColumnName("oct_scms");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PriceYear).HasColumnName("price_year");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.SepGf).HasColumnName("sep_gf");

                entity.Property(e => e.SepMaul).HasColumnName("sep_maul");

                entity.Property(e => e.SepScms).HasColumnName("sep_scms");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProductClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProductClassification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProductList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_product_list");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewReportingRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_ART");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityHiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_HIV");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_Lab");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityOis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_OIs");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_Rutf");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilitySmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_SMC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_TB");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateFacilityViralLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReportingRate_Facility_ViralLoad");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateHiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_HIV");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_Lab");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateOis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_OIs");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_RUTF");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_SMC");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_TB");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewReportingRateViralLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View__ReportingRate_ViralLoad");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate1)
                    .HasColumnName("EndDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.FacilityCode1).HasColumnName("FacilityCode");

                entity.Property(e => e.FcExpected).HasColumnName("fc_expected");

                entity.Property(e => e.FcReported).HasColumnName("fc_reported");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate1)
                    .HasColumnName("StartDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewRfsoArtHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_RFSO_ART_Header");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewRptReportingRates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Rpt_ReportingRates");

                entity.Property(e => e.Category)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewRptReportingRates1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Rpt_ReportingRates_1");

                entity.Property(e => e.Category)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndMonthName).HasMaxLength(30);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Indicator).HasMaxLength(128);

                entity.Property(e => e.Scto)
                    .HasColumnName("SCTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Value).HasColumnName("value");

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSPSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_s_p_smc");

                entity.Property(e => e.OnHand).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");
            });

            modelBuilder.Entity<ViewSapStockOnHand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SAP_StockOnHand");

                entity.Property(e => e.InStock).HasColumnName("In_Stock");

                entity.Property(e => e.UItemReportCode)
                    .HasColumnName("U_ItemReportCode")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ViewSapStockStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SAP_Stock_Status");

                entity.Property(e => e.IsCommited).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OnHand).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OnOrder).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasColumnName("Product Code")
                    .HasMaxLength(20);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(100);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSapXArvEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_arv_emergency");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXLabEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_lab_emergency");

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXOiStiEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_oi_sti_emergency");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmc1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmc1A>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_1_a");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmc2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_2");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmcSlmEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_slm_emergency");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmcX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_x");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXSmcXA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_smc_x_a");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSapXTkEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_tk_emergency");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasColumnName("item_code");

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewSapXVlrEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_sap_x_vlr_emergency");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilitySapCode)
                    .HasColumnName("Facility_SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductCode1).HasColumnName("ProductCode");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductSapCode)
                    .HasColumnName("Product_SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewShipmentsDelivered>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_shipments_delivered");

                entity.Property(e => e.DateClearedCustoms)
                    .HasColumnName("date_cleared_customs")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedShipment).HasColumnName("expected_shipment");

                entity.Property(e => e.OrderDueDate)
                    .HasColumnName("order_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.OutstandingQuantity).HasColumnName("outstanding_quantity");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_MAUL");
            });

            modelBuilder.Entity<ViewSsmtAreaVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_area_visited");

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.AreaId).HasColumnName("area_id");

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewSsmtCrystalNationalLmisTools>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_national_lmis_tools");

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.MoHTool).HasColumnName("MoH_Tool");

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockCardsBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stock_cards_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.CategoryCode).HasColumnName("category_code");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.MyCode)
                    .HasColumnName("my_code")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategoryCount).HasColumnName("product_category_count");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockCardsCd4testBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stock_cards_cd4test_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockCardsChemistryBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stock_cards_chemistry_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockCardsHematologyBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stock_cards_hematology_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockoutBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stockout_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.MyCode)
                    .HasColumnName("my_code")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategoryCount).HasColumnName("product_category_count");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockoutCd4testBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stockout_cd4test_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockoutChemistryBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stockout_chemistry_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalStockoutHematologyBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_stockout_hematology_base");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtCrystalVisitsConducted>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_crystal_visits_conducted");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.NoVisits).HasColumnName("no_visits");

                entity.Property(e => e.VisitPurposeDesc)
                    .HasColumnName("visit_purpose_desc")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ViewSsmtDbqAreaVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_area_visited");

                entity.Property(e => e.AreaDesc)
                    .HasColumnName("area_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewSsmtDbqComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_comment");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewSsmtDbqFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_facility");

                entity.Property(e => e.AccreditedArt).HasColumnName("accredited_ART");

                entity.Property(e => e.DateNextVisit)
                    .HasColumnName("date_next_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.ReadinessArt).HasColumnName("readiness_ART");

                entity.Property(e => e.SiteVolumeDesc)
                    .HasColumnName("site_volume_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.SsmtsDesc)
                    .HasColumnName("ssmts_desc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewSsmtDbqIndicator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_indicator");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Exist).HasColumnName("exist");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MoHHmis).HasColumnName("MoH_HMIS");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StaffTrained).HasColumnName("staff_trained");

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<ViewSsmtDbqJointVisit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_joint_visit");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.JointVisitDesc)
                    .HasColumnName("joint_visit_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewSsmtDbqLmis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_lmis");

                entity.Property(e => e.ClosingStockDataAgrees).HasColumnName("closing_stock_data_agrees");

                entity.Property(e => e.ClosingStockFacilityReport).HasColumnName("closing_stock_facility_report");

                entity.Property(e => e.ClosingStockStockCard).HasColumnName("closing_stock_stock_card");

                entity.Property(e => e.ConsumptionDataAgrees).HasColumnName("consumption_data_agrees");

                entity.Property(e => e.ConsumptionFacilityReport).HasColumnName("consumption_facility_report");

                entity.Property(e => e.ConsumptionSiteRecords).HasColumnName("consumption_site_records");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqLmisLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_lmis_lab");

                entity.Property(e => e.ClosingStockDataAgrees).HasColumnName("closing_stock_data_agrees");

                entity.Property(e => e.ClosingStockFacilityReport).HasColumnName("closing_stock_facility_report");

                entity.Property(e => e.ClosingStockStockCard).HasColumnName("closing_stock_stock_card");

                entity.Property(e => e.ConsumptionDataAgrees).HasColumnName("consumption_data_agrees");

                entity.Property(e => e.ConsumptionFacilityReport).HasColumnName("consumption_facility_report");

                entity.Property(e => e.ConsumptionSiteRecords).HasColumnName("consumption_site_records");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqPatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_patients");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.ExistingArtRegister).HasColumnName("existing_ART_register");

                entity.Property(e => e.ExistingLmisReport).HasColumnName("existing_LMIS_report");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.NewArtRegister).HasColumnName("new_ART_register");

                entity.Property(e => e.NewLmisReport).HasColumnName("new_LMIS_report");

                entity.Property(e => e.PatientDataTally).HasColumnName("patient_data_tally");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<ViewSsmtDbqPersonnel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_personnel");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(500);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.GenderId).HasColumnName("gender_id");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LocationDesc)
                    .HasColumnName("location_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.PersonnelDesc)
                    .HasColumnName("personnel_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.PersonnelName)
                    .HasColumnName("personnel_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Telephone).HasColumnName("telephone");

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqRptIndicator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_rpt_indicator");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.RptCategoryDesc)
                    .HasColumnName("rpt_category_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.RptIndicatorDesc)
                    .HasColumnName("rpt_indicator_desc")
                    .HasMaxLength(450);
            });

            modelBuilder.Entity<ViewSsmtDbqSmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_SMP");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcOnStockCard).HasColumnName("AMC_on_stock_card");

                entity.Property(e => e.AmcsEqual).HasColumnName("AMCs_equal");

                entity.Property(e => e.BalancePhysicalCount).HasColumnName("balance_physical_count");

                entity.Property(e => e.BalanceScEqualPc).HasColumnName("balance_SC_equal_PC");

                entity.Property(e => e.BalanceStockCard).HasColumnName("balance_stock_card");

                entity.Property(e => e.CalculatedAmc).HasColumnName("calculated_AMC");

                entity.Property(e => e.CardFilledCorrectly).HasColumnName("card_filled_correctly");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.HighestBalanceLast6Months).HasColumnName("highest_balance_last_6_months");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MonthlyPhysicalCount).HasColumnName("monthly_physical_count");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StockCardAvialable).HasColumnName("stock_card_avialable");

                entity.Property(e => e.StockCardWithShelfItems).HasColumnName("stock_card_with_shelf_items");

                entity.Property(e => e.StockOutLast3Months).HasColumnName("stock_out_last_3_months");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqSmpLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_SMP_lab");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcOnStockCard).HasColumnName("AMC_on_stock_card");

                entity.Property(e => e.AmcsEqual).HasColumnName("AMCs_equal");

                entity.Property(e => e.BalancePhysicalCount).HasColumnName("balance_physical_count");

                entity.Property(e => e.BalanceScEqualPc).HasColumnName("balance_SC_equal_PC");

                entity.Property(e => e.BalanceStockCard).HasColumnName("balance_stock_card");

                entity.Property(e => e.CalculatedAmc).HasColumnName("calculated_AMC");

                entity.Property(e => e.CardFilledCorrectly).HasColumnName("card_filled_correctly");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.HighestBalanceLast6Months).HasColumnName("highest_balance_last_6_months");

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.MonthlyPhysicalCount).HasColumnName("monthly_physical_count");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.StockCardAvialable).HasColumnName("stock_card_avialable");

                entity.Property(e => e.StockCardWithShelfItems).HasColumnName("stock_card_with_shelf_items");

                entity.Property(e => e.StockOutLast3Months).HasColumnName("stock_out_last_3_months");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqSmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_SMT");

                entity.Property(e => e.CategoryDesc)
                    .HasColumnName("category_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.DateIssueStockCard)
                    .HasColumnName("date_issue_stock_card")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueVourcher)
                    .HasColumnName("date_issue_vourcher")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTally).HasColumnName("date_tally");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantitiesTally).HasColumnName("quantities_tally");

                entity.Property(e => e.QuantityIssueStockCard).HasColumnName("quantity_issue_stock_card");

                entity.Property(e => e.QuantityIssuedVourcher).HasColumnName("quantity_issued_vourcher");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqSmtLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_SMT_lab");

                entity.Property(e => e.DateIssueStockCard)
                    .HasColumnName("date_issue_stock_card")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateIssueVourcher)
                    .HasColumnName("date_issue_vourcher")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTally).HasColumnName("date_tally");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ItemAvialable).HasColumnName("item_avialable");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantitiesTally).HasColumnName("quantities_tally");

                entity.Property(e => e.QuantityIssueStockCard).HasColumnName("quantity_issue_stock_card");

                entity.Property(e => e.QuantityIssuedVourcher).HasColumnName("quantity_issued_vourcher");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSsmtDbqSubmittedDocs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_submitted_docs");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentSubmitted).HasColumnName("document_submitted");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.SubmittedDoc)
                    .HasColumnName("submitted_doc")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ViewSsmtDbqVisitPurpose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_dbq_visit_purpose");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(4000);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.VisitPurposeDesc)
                    .HasColumnName("visit_purpose_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewSsmtDenominatorYearMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_denominator_year_month");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");
            });

            modelBuilder.Entity<ViewSsmtDispAidTools>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_disp_aid_tools");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaxScore)
                    .IsRequired()
                    .HasColumnName("max_score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MoHHmis)
                    .IsRequired()
                    .HasColumnName("MoH_HMIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasColumnName("score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtDispLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_disp_lab");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaxScore)
                    .IsRequired()
                    .HasColumnName("max_score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasColumnName("score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtExpiryTracking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_expiry_tracking");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaxScore)
                    .IsRequired()
                    .HasColumnName("max_score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MoHHmis)
                    .IsRequired()
                    .HasColumnName("MoH_HMIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasColumnName("score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtFacilityExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_facility_export");

                entity.Property(e => e.CheckBox).HasColumnName("check_box");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.DistrictCode).HasColumnName("District_Code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");
            });

            modelBuilder.Entity<ViewSsmtFacilityMostRecentVisitYearMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_facility_most_recent_visit_year_month");

                entity.Property(e => e.BMonth).HasColumnName("bMonth");

                entity.Property(e => e.BYear).HasColumnName("bYear");

                entity.Property(e => e.DateVisited)
                    .HasColumnName("date_visited")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");
            });

            modelBuilder.Entity<ViewSsmtJointVisit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_joint_visit");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JointVisitCode).HasColumnName("joint_visit_code");

                entity.Property(e => e.JointVisitDesc)
                    .HasColumnName("joint_visit_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewSsmtLmisAdequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_adequate_stock_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisAdequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_adequate_stock_2");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MedicineCommodities)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtLmisCd4TestAdequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_cd4_test_adequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisCd4TestAdequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_cd4_test_adequate_stock_2");

                entity.Property(e => e.Cd4tests)
                    .IsRequired()
                    .HasColumnName("CD4Tests")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisCd4TestInadequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_cd4_test_inadequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisCd4TestInadequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_cd4_test_inadequate_stock_2");

                entity.Property(e => e.Cd4tests)
                    .IsRequired()
                    .HasColumnName("CD4Tests")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisChemistryAdequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_chemistry_adequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisChemistryAdequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_chemistry_adequate_stock_2");

                entity.Property(e => e.Chemistry)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisChemistryInadequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_chemistry_inadequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisChemistryInadequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_chemistry_inadequate_stock_2");

                entity.Property(e => e.Chemistry)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisHematologyAdequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_hematology_adequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisHematologyAdequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_hematology_adequate_stock_2");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hematology)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisHematologyInadequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_hematology_inadequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisHematologyInadequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_hematology_inadequate_stock_2");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hematology)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisInadequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_inadequate_stock_1");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisInadequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_inadequate_stock_2");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.MedicineCommodities)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtLmisTkAdequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_tk_adequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisTkAdequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_tk_adequate_stock_2");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HivtestKits)
                    .IsRequired()
                    .HasColumnName("HIVTestKits")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisTkInadequateStock1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_tk_inadequate_stock_1");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("Facility_Code");

                entity.Property(e => e.XCount).HasColumnName("xCount");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtLmisTkInadequateStock2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_lmis_tk_inadequate_stock_2");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HivtestKits)
                    .IsRequired()
                    .HasColumnName("HIVTestKits")
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtMascisExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_mascis_export");

                entity.Property(e => e.AccreditedArt).HasColumnName("accredited_ART");

                entity.Property(e => e.DateNextVisit)
                    .HasColumnName("date_next_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.LevelOfCare)
                    .HasColumnName("level_of_care")
                    .HasMaxLength(150);

                entity.Property(e => e.MyCheck).HasColumnName("myCheck");

                entity.Property(e => e.ReadinessArt).HasColumnName("readiness_ART");

                entity.Property(e => e.SiteVolume).HasColumnName("site_volume");

                entity.Property(e => e.Ssmts).HasColumnName("SSMTs");

                entity.Property(e => e.VisitMajorIssue)
                    .HasColumnName("visit_major_issue")
                    .HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewSsmtOrderingReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_ordering_reporting");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaxScore)
                    .IsRequired()
                    .HasColumnName("max_score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MoHHmis)
                    .IsRequired()
                    .HasColumnName("MoH_HMIS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasColumnName("score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StaffTrained)
                    .IsRequired()
                    .HasColumnName("staff_trained")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtProductOrganisation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_product_organisation");

                entity.Property(e => e.IndicatorDesc)
                    .HasColumnName("indicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.IndicatorId).HasColumnName("indicator_id");

                entity.Property(e => e.IndicatorNotes)
                    .HasColumnName("indicator_notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.MaxScore)
                    .IsRequired()
                    .HasColumnName("max_score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Score)
                    .IsRequired()
                    .HasColumnName("score")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubindicatorDesc)
                    .HasColumnName("subindicator_desc")
                    .HasMaxLength(1000);

                entity.Property(e => e.SubindicatorId).HasColumnName("subindicator_id");

                entity.Property(e => e.YesNo)
                    .IsRequired()
                    .HasColumnName("yes_no")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtRptIndicator1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_rpt_indicator_1");

                entity.Property(e => e.RptCategoryDesc)
                    .HasColumnName("rpt_category_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.RptIndicatorDesc)
                    .HasColumnName("rpt_indicator_desc")
                    .HasMaxLength(450);

                entity.Property(e => e.RptIndicatorId).HasColumnName("rpt_indicator_id");

                entity.Property(e => e.XDateVisit)
                    .HasColumnName("xDateVisit")
                    .HasColumnType("datetime");

                entity.Property(e => e.XFacilityId).HasColumnName("xFacilityID");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtRptIndicator2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_rpt_indicator_2");

                entity.Property(e => e.RptCategoryDesc)
                    .HasColumnName("rpt_category_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.RptIndicatorDesc)
                    .HasColumnName("rpt_indicator_desc")
                    .HasMaxLength(450);

                entity.Property(e => e.RptIndicatorId).HasColumnName("rpt_indicator_id");

                entity.Property(e => e.XDateVisit)
                    .HasColumnName("xDateVisit")
                    .HasColumnType("datetime");

                entity.Property(e => e.XFacilityId).HasColumnName("xFacilityID");
            });

            modelBuilder.Entity<ViewSsmtStScoresA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_st_scores_a");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Dat).HasColumnName("DAT");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dlsm).HasColumnName("DLSM");

                entity.Property(e => e.Et).HasColumnName("ET");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.Oar).HasColumnName("OAR");

                entity.Property(e => e.Po).HasColumnName("PO");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Sm).HasColumnName("SM");
            });

            modelBuilder.Entity<ViewSsmtStScoresB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_st_scores_b");

                entity.Property(e => e.Dat).HasColumnName("DAT");

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dlsm).HasColumnName("DLSM");

                entity.Property(e => e.Et).HasColumnName("ET");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.Oar).HasColumnName("OAR");

                entity.Property(e => e.Po).HasColumnName("PO");

                entity.Property(e => e.Sm).HasColumnName("SM");
            });

            modelBuilder.Entity<ViewSsmtStSubmittedDocsA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_st_submitted_docs_a");

                entity.Property(e => e.BaselineAssessment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.FeedbackReport)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalCount)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SiteProfile)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SpaceAssessment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtStSubmittedDocsB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_st_submitted_docs_b");

                entity.Property(e => e.BaselineAssessment)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DateVisit)
                    .HasColumnName("date_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.FeedbackReport)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PhysicalCount)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SiteProfile)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SpaceAssessment)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSsmtStVisitsInMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_st_visitsInMonth");

                entity.Property(e => e.FacilityId).HasColumnName("facility_id");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewSsmtSubmittedDocs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ssmt_submitted_docs");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubmittedDoc)
                    .HasColumnName("submitted_doc")
                    .HasMaxLength(150);

                entity.Property(e => e.SubmittedDocCode).HasColumnName("submitted_doc_code");
            });

            modelBuilder.Entity<ViewSsmtVerificationPatientData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_verification_patient_data");

                entity.Property(e => e.ExistingArtRegister)
                    .IsRequired()
                    .HasColumnName("existing_ART_register")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExistingLmisReport)
                    .IsRequired()
                    .HasColumnName("existing_LMIS_report")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaxScore).HasColumnName("max_score");

                entity.Property(e => e.NewArtRegister)
                    .IsRequired()
                    .HasColumnName("new_ART_register")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NewLmisReport)
                    .IsRequired()
                    .HasColumnName("new_LMIS_report")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PatientDataTally)
                    .IsRequired()
                    .HasColumnName("patient_data_tally")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.Score).HasColumnName("score");
            });

            modelBuilder.Entity<ViewSsmtVisitPurpose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ssmt_visit_purpose");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VisitPurposeCode).HasColumnName("visit_purpose_code");

                entity.Property(e => e.VisitPurposeDesc)
                    .HasColumnName("visit_purpose_desc")
                    .HasMaxLength(250);

                entity.Property(e => e.Visited).HasColumnName("visited");
            });

            modelBuilder.Entity<ViewUserManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_UserManagement");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Users");

                entity.Property(e => e.Email)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewUsersRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_UsersRoles");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewVehiclePackingListAllocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_VehiclePackingListAllocation");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDateOrderForm)
                    .HasColumnName("EndDate_OrderForm")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.StartDateOrderForm)
                    .HasColumnName("StartDate_OrderForm")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewWebTemplateArvAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_AMC");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcEqualToZero).HasColumnName("amc_equal_to_zero");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateAmc)
                    .HasColumnName("date_AMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewWebTemplateArvEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_Emergency");

                entity.Property(e => e.ArtConsumption).HasColumnName("ART_Consumption");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DrugsRequiredNewPatients).HasColumnName("DrugsRequired_NewPatients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.EstimatedNewArtPatients).HasColumnName("EstimatedNew_ART_Patients");

                entity.Property(e => e.EstimatedNewHivPregnant).HasColumnName("EstimatedNew_HIV_Pregnant");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossesAdjustments).HasColumnName("Losses_Adjustments");

                entity.Property(e => e.MonthsStockAtHand).HasColumnName("Months_Stock_atHand");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PmtctConsumption).HasColumnName("PMTCT_Consumption");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequiredCurrentPatients).HasColumnName("Quantity_Required_Current_Patients");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalDrugsRequired).HasColumnName("TotalDrugs_Required");
            });

            modelBuilder.Entity<ViewWebTemplateArvExtraRegimen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_ExtraRegimen");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArvFluconazole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_Fluconazole");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.Regimen)
                    .HasColumnName("regimen")
                    .HasMaxLength(150);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArvPatients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_Patients");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.NoExisting).HasColumnName("No_Existing");

                entity.Property(e => e.NoNew).HasColumnName("No_New");

                entity.Property(e => e.PregnantExisting).HasColumnName("Pregnant_Existing");

                entity.Property(e => e.PregnantNew).HasColumnName("Pregnant_New");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.Regimen).HasMaxLength(50);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArvPatientsPaediatric>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_Patients_Paediatric");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.NoExisting).HasColumnName("No_Existing");

                entity.Property(e => e.NoNew).HasColumnName("No_New");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.Regimen).HasMaxLength(50);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArvPcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_PC_Report");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateArvPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_PhysicalCount");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<ViewWebTemplateArvPhysicalCountEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_PhysicalCount_Edit");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateArvPhysicalCountEditNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_PhysicalCount_Edit_New");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewWebTemplateArvReportExtraRegimen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_ReportExtraRegimen");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PatientsExisting).HasColumnName("Patients_Existing");

                entity.Property(e => e.PatientsNew).HasColumnName("Patients_New");

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateArvReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ARV_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateFacilityRfso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_FacilityRFSO");

                entity.Property(e => e.CdcregionId).HasColumnName("CDCRegionId");

                entity.Property(e => e.ClientTypeCode).HasColumnName("client_type_code");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Dsdm)
                    .HasColumnName("DSDM")
                    .HasMaxLength(250);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.FacilityTypeId)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ImplementingPartnerDescription).HasMaxLength(80);

                entity.Property(e => e.Latititude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelOfCare).HasColumnName("level_of_care");

                entity.Property(e => e.LevelOfCareCode).HasColumnName("level_of_care_code");

                entity.Property(e => e.LevelOfCareDec)
                    .HasColumnName("level_of_care_Dec")
                    .HasMaxLength(150);

                entity.Property(e => e.Longtitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NearestPublicHfDistance).HasColumnName("Nearest_Public_HF_Distance");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");

                entity.Property(e => e.RfsoUserName)
                    .HasColumnName("RFSO_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.SupportedByMaul).HasColumnName("SupportedByMAUL");

                entity.Property(e => e.VillageId)
                    .HasColumnName("Village_Id")
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.ZoneDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateFacilityRfso2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_FacilityRFSO_2");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoName)
                    .HasColumnName("RFSO_Name")
                    .HasMaxLength(150);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .IsRequired()
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_AMC");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcEqualToZero).HasColumnName("amc_equal_to_zero");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateAmc)
                    .HasColumnName("date_AMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_Emergency");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossAdjustment).HasColumnName("Loss_Adjustment");

                entity.Property(e => e.MaximumStock).HasColumnName("Maximum_Stock");

                entity.Property(e => e.NoTestStart2months).HasColumnName("No_Test_Start_2Months");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.QuantityRequired).HasColumnName("Quantity_Required");

                entity.Property(e => e.QuantityToShip)
                    .IsRequired()
                    .HasColumnName("Quantity_To_Ship")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QunatityOnOrder).HasColumnName("Qunatity_On_Order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TestRecieved2months).HasColumnName("Test_Recieved_2Months");

                entity.Property(e => e.TestRemaining).HasColumnName("Test_Remaining");

                entity.Property(e => e.TestUsed2months).HasColumnName("Test_Used_2Months");
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsPcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_PC_Report");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_PhysicalCount");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsPhysicalCountEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_PhysicalCount_Edit");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateHivTestKitsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_HIV_Test_Kits_Summary");

                entity.Property(e => e.ClinicalDiagnosis).HasColumnName("Clinical_Diagnosis");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Hct).HasColumnName("HCT");

                entity.Property(e => e.Pmtct).HasColumnName("PMTCT");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QualityControl).HasColumnName("Quality_Control");

                entity.Property(e => e.Smc).HasColumnName("SMC");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.Classification).HasMaxLength(250);

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OriginalProductCode).HasColumnName("original_product_code");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_AMC");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.AmcEqualToZero).HasColumnName("amc_equal_to_zero");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateAmc)
                    .HasColumnName("date_AMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_Emergency");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .IsRequired()
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .IsRequired()
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .IsRequired()
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_New");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.ClosingBalance).HasColumnName("closing_balance");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Consumption).HasColumnName("consumption");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LossesAdjustment).HasColumnName("losses_adjustment");

                entity.Property(e => e.OpeningBalance).HasColumnName("opening_balance");

                entity.Property(e => e.OriginalProductCode).HasColumnName("original_product_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityAllocated).HasColumnName("quantity_allocated");

                entity.Property(e => e.QuantityRecieved).HasColumnName("quantity_recieved");

                entity.Property(e => e.QuantityToOrder).HasColumnName("quantity_to_order");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryPcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_PC_Report");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_PhysicalCount");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryPhysicalCountEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_PhysicalCount_Edit");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LabCat1Desc)
                    .HasColumnName("lab_cat_1_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat2Desc)
                    .HasColumnName("lab_cat_2_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.LabCat3Desc)
                    .HasColumnName("lab_cat_3_desc")
                    .HasMaxLength(150);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateLaboratoryReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Laboratory_ReportHeader");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateOiSti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OI_STI");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.BasicUnit).HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateOiStiEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OI_STI_Emergency");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.BasicUnit).HasMaxLength(20);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateOiStiPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OI_STI_PhysicalCount");

                entity.Property(e => e.BasicUnit).HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<ViewWebTemplateOiStiPhysicalCountEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OI_STI_PhysicalCount_Edit");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateOiStiWeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OI_STI_Web");

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.BasicUnit).HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateOisPcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OIs_PC_Report");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateOisReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_OIs_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateRecipientEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_RecipientEmail");

                entity.Property(e => e.CeEmail)
                    .IsRequired()
                    .HasColumnName("ce_email")
                    .HasMaxLength(250);

                entity.Property(e => e.CpCode).HasColumnName("cp_code");

                entity.Property(e => e.CpName)
                    .HasColumnName("cp_name")
                    .HasMaxLength(250);

                entity.Property(e => e.CtTelephone).HasColumnName("ct_telephone");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.TitleDesc)
                    .HasColumnName("title_desc")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateRoleFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_RoleFacility");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateRutf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Rutf");

                entity.Property(e => e.BasicUnit).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateRutfReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Rutf_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateRutfSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_Rutf_Summary");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedNew).HasColumnName("Expected_New");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");
            });

            modelBuilder.Entity<ViewWebTemplateSmcPcReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_PC_Report");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateSmcReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UoM).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlmEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM_Emergency");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(50);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EportedToSap).HasColumnName("EportedToSAP");

                entity.Property(e => e.FacilityUpdateDate)
                    .HasColumnName("Facility_UpdateDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityUserName)
                    .HasColumnName("Facility_UserName")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoApproveOrder).HasColumnName("RFSO_ApproveOrder");

                entity.Property(e => e.RfsoApprovedBy)
                    .HasColumnName("RFSO_ApprovedBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoDateOfApproval)
                    .HasColumnName("RFSO_DateOfApproval")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackDate)
                    .HasColumnName("RFSO_SentBackDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Rfsonotes1)
                    .HasColumnName("RFSONotes1")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UoM).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlmPhysicalCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM_PhysicalCount");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.UnitPack).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlmPhysicalCountEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM_PhysicalCount_Edit");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlmSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM_Summary");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");
            });

            modelBuilder.Entity<ViewWebTemplateSmcSlmWeb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_SMC_SLM_Web");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Rfsonotes)
                    .IsRequired()
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UoM).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewWebTemplateTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_TB");

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.PackSize).HasMaxLength(20);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateTbReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_TB_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EditedBy).HasMaxLength(256);

                entity.Property(e => e.EditedDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderStatusIdChangedBy).HasMaxLength(256);

                entity.Property(e => e.OrderStatusIdDateChanged).HasColumnType("datetime");

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.RfsoSentBackBy)
                    .HasColumnName("RFSO_SentBackBy")
                    .HasMaxLength(256);

                entity.Property(e => e.RfsoSentBackTofacility).HasColumnName("RFSO_SentBackTofacility");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewWebTemplateTbSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_TB_Summary");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");
            });

            modelBuilder.Entity<ViewWebTemplateViralLoadReagents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ViralLoadReagents");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.PackSize).HasMaxLength(50);

                entity.Property(e => e.ProductDescription).HasMaxLength(450);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewWebTemplateViralLoadReagentsSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ViralLoadReagents_Summary");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_Code")
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");
            });

            modelBuilder.Entity<ViewWebTemplateViralLoadReportHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_WebTemplate_ViralLoad_ReportHeader");

                entity.Property(e => e.DateExpected).HasColumnType("datetime");

                entity.Property(e => e.DatePrepared).HasColumnType("datetime");

                entity.Property(e => e.DistrictName)
                    .HasColumnName("District_Name")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Facility).HasMaxLength(90);

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OrderType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpDistDeliveryCycleTimeA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_delivery_cycle_time_a");

                entity.Property(e => e.Remarks).HasColumnName("remarks");

                entity.Property(e => e.TimeArrival)
                    .HasColumnName("time_arrival")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimeStart)
                    .HasColumnName("time_start")
                    .HasColumnType("datetime");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewXPmpDistDeliveryCycleTimeB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_delivery_cycle_time_b");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXPmpDistScheduleA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_schedule_a");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXPmpDistScheduleB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_schedule_b");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXPmpDistScheduleDen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_schedule_den");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXPmpDistScheduleDen2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_dist_schedule_den_2");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXPmpProcActualVsInternationalPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_actual_vs_international_price");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcBranded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_branded");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");
            });

            modelBuilder.Entity<ViewXPmpProcCompletedVsPlannedA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_completed_vs_planned_a");

                entity.Property(e => e.DateArrivalEntryPort)
                    .HasColumnName("date_arrival_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcCompletedVsPlannedB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_completed_vs_planned_b");

                entity.Property(e => e.AwardExpectedDateDelivery)
                    .HasColumnName("award_expected_date_delivery")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardQuantityOrdered).HasColumnName("award_quantity_ordered");

                entity.Property(e => e.DateOfArrivalAtPort).HasColumnType("datetime");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcCompletedVsPlannedC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_completed_vs_planned_c");

                entity.Property(e => e.NoShipments).HasColumnName("no_shipments");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcCorrectlyFilledPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_correctly_filled_POS");

                entity.Property(e => e.AwardExpectedDateDelivery)
                    .HasColumnName("award_expected_date_delivery")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardNewDueDate)
                    .HasColumnName("award_new_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardQuantityOrdered).HasColumnName("award_quantity_ordered");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_maul");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcCorrectlyFilledPosA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_correctly_filled_POS_a");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.QuantityRecievedMaul).HasColumnName("quantity_recieved_maul");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcCorrectlyFilledPosC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_correctly_filled_POS_c");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.Pos).HasColumnName("POS");
            });

            modelBuilder.Entity<ViewXPmpProcDen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_den");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcDenBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_den_base");

                entity.Property(e => e.AwardDateIssueAward)
                    .HasColumnName("award_date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");
            });

            modelBuilder.Entity<ViewXPmpProcEmergency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_emergency");

                entity.Property(e => e.NormalOrEmergencyProcurement).HasColumnName("normal_or_emergency_procurement");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcGeneric>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_generic");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");
            });

            modelBuilder.Entity<ViewXPmpProcMatchingShipmetPlanBudgetA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_matching_shipmet_plan_budget_a");

                entity.Property(e => e.DateArrivalEntryPort)
                    .HasColumnName("date_arrival_entry_port")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcMatchingShipmetPlanBudgetB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_matching_shipmet_plan_budget_b");

                entity.Property(e => e.AwardNewDueDate)
                    .HasColumnName("award_new_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.AwardQuantityOrdered).HasColumnName("award_quantity_ordered");

                entity.Property(e => e.DateOfArrivalAtPort).HasColumnType("datetime");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcMatchingShipmetPlanBudgetC>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_matching_shipmet_plan_budget_c");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ShipmetsNo).HasColumnName("shipmets_no");
            });

            modelBuilder.Entity<ViewXPmpProcNationalProcurementPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_NationalProcurementPlan");

                entity.Property(e => e.ConsistentNationalProcurementPlan).HasColumnName("Consistent_NationalProcurementPlan");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcNtgApproved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_NTG_Approved");

                entity.Property(e => e.NtgApproved).HasColumnName("NTG_Approved");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");
            });

            modelBuilder.Entity<ViewXPmpProcNumBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_num_base");

                entity.Property(e => e.AwardFobPrice).HasColumnName("award_fob_price");

                entity.Property(e => e.AwardScmsPrice).HasColumnName("award_scms_price");

                entity.Property(e => e.ConsistentNationalProcurementPlan).HasColumnName("consistent_NationalProcurementPlan");

                entity.Property(e => e.DateIssueAward)
                    .HasColumnName("date_issue_award")
                    .HasColumnType("datetime");

                entity.Property(e => e.NormalOrEmergencyProcurement).HasColumnName("normal_or_emergency_procurement");

                entity.Property(e => e.NtgApproved).HasColumnName("NTG_Approved");

                entity.Property(e => e.OrderCategory).HasColumnName("order_category");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ProcurementQuantity).HasColumnName("procurement_quantity");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductTypeCode).HasColumnName("product_type_code");

                entity.Property(e => e.WhoApproved).HasColumnName("WHO_Approved");
            });

            modelBuilder.Entity<ViewXPmpProcOntimePerformanceA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_ontime_performance_a");

                entity.Property(e => e.AwardNewDueDate)
                    .HasColumnName("award_new_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateOfArrivalAtPort).HasColumnType("datetime");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.ReferenceNo)
                    .IsRequired()
                    .HasColumnName("reference_no")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXPmpProcOntimePerformanceB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_ontime_performance_b");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.Shipments).HasColumnName("shipments");
            });

            modelBuilder.Entity<ViewXPmpProcWhoApproved>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_proc_WHO_Approved");

                entity.Property(e => e.NtgApprovedProducts).HasColumnName("NTG_ApprovedProducts");

                entity.Property(e => e.OrderQuater).HasColumnName("order_quater");

                entity.Property(e => e.OrderYear).HasColumnName("order_year");

                entity.Property(e => e.WhoApproved).HasColumnName("WHO_Approved");
            });

            modelBuilder.Entity<ViewXPmpSsmtVisits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_ssmt_visits");

                entity.Property(e => e.XMonth).HasColumnName("xMonth");

                entity.Property(e => e.XYear).HasColumnName("xYear");
            });

            modelBuilder.Entity<ViewXPmpSsmtVisitsB>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_x_pmp_ssmt_visits_b");

                entity.Property(e => e.CopYear).HasColumnName("COP_Year");

                entity.Property(e => e.QuarterId).HasColumnName("quarter_id");
            });

            modelBuilder.Entity<ViewXaAmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_xa_amc");

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateAdded).HasColumnType("datetime");

                entity.Property(e => e.DateOfAmc)
                    .HasColumnName("DateOfAMC")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RecordStatus).HasColumnName("record_status");
            });

            modelBuilder.Entity<ViewXaOrderingCycle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_xa_ordering_cycle");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FacilityCode).HasColumnName("facility_code");

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewXaProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_xa_product");

                entity.Property(e => e.ApprovedFda).HasColumnName("approved_FDA");

                entity.Property(e => e.ApprovedMohNtg).HasColumnName("approved_MOH_NTG");

                entity.Property(e => e.ApprovedWho).HasColumnName("approved_WHO");

                entity.Property(e => e.ArtProductClassification).HasColumnName("ART_product_classification");

                entity.Property(e => e.BasicUnit).HasColumnName("Basic_Unit");

                entity.Property(e => e.CartonSizePkt).HasColumnName("carton_size_pkt");

                entity.Property(e => e.CartonWeightKg).HasColumnName("carton_weight_kg");

                entity.Property(e => e.NdaRegistration).HasColumnName("nda_registration");

                entity.Property(e => e.NmsCodes)
                    .HasColumnName("NMS_Codes")
                    .HasMaxLength(50);

                entity.Property(e => e.Packsize)
                    .HasColumnName("packsize")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductCategory).HasColumnName("product_category");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.SapCode)
                    .HasColumnName("SAP_code")
                    .HasMaxLength(50);

                entity.Property(e => e.Strength)
                    .HasColumnName("strength")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewXaRegimen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_xa_regimen");

                entity.Property(e => e.DrugCombination).HasMaxLength(15);

                entity.Property(e => e.ExtraInfo).HasMaxLength(50);

                entity.Property(e => e.RegimenCategoryDesc).HasMaxLength(50);

                entity.Property(e => e.RegimenClassificationCode).HasColumnName("regimen_classification_code");

                entity.Property(e => e.RegimenClassificationDesc)
                    .HasColumnName("regimen_classification_desc")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewYearArv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_year_arv");

                entity.Property(e => e.BYear).HasColumnName("bYear");
            });

            modelBuilder.Entity<ViewYearLab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_year_lab");

                entity.Property(e => e.BYear).HasColumnName("bYear");
            });

            modelBuilder.Entity<ViewYearSmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_year_smc");

                entity.Property(e => e.BYear).HasColumnName("bYear");
            });

            modelBuilder.Entity<ViewYearTk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_year_tk");

                entity.Property(e => e.BYear).HasColumnName("bYear");
            });

            modelBuilder.Entity<VwAspnetApplications>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Applications");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetMembershipUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_MembershipUsers");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredEmail).HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.MobilePin)
                    .HasColumnName("MobilePIN")
                    .HasMaxLength(16);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetProfiles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Profiles");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Roles");

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Users");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUsersInRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_UsersInRoles");
            });

            modelBuilder.Entity<VwAspnetWebPartStatePaths>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_Paths");

                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetWebPartStateShared>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_Shared");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetWebPartStateUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_User");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwFoInvestigation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation");

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.InvestigationDesc)
                    .HasColumnName("investigation_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwFoInvestigationEmpty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation_Empty");

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwFoInvestigationQi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation_QI");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.InvestigationDesc)
                    .HasColumnName("investigation_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwFoInvestigationQiEmpty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation_QI_Empty");

                entity.Property(e => e.BatchNo)
                    .IsRequired()
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwFoInvestigationQiTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation_QI_Template");

                entity.Property(e => e.BatchNo)
                    .HasColumnName("batch_no")
                    .HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.ERegComplaintNo)
                    .HasColumnName("e_reg_complaint_No")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.InvestigationDesc)
                    .HasColumnName("investigation_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwFoInvestigationTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_fo_investigation_Template");

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Details).HasMaxLength(1024);

                entity.Property(e => e.ERegComplaintCode).HasColumnName("e_reg_complaint_code");

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.FileUrl)
                    .HasColumnName("FileURL")
                    .HasMaxLength(256);

                entity.Property(e => e.InvestigationCode)
                    .IsRequired()
                    .HasColumnName("investigation_code")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.InvestigationDesc)
                    .HasColumnName("investigation_desc")
                    .HasMaxLength(500);

                entity.Property(e => e.RequiredEvidence)
                    .HasColumnName("Required_Evidence")
                    .HasMaxLength(1050);

                entity.Property(e => e.YesNo).HasColumnName("yes_no");
            });

            modelBuilder.Entity<VwHsipLmisDep13aMoS>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_HSIP_LMIS_DEP_13A_MoS");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasColumnName("Product Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwHsipLmisDep13bCon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_HSIP_LMIS_DEP_13B_Con");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityCount).HasColumnName("Facility Count");

                entity.Property(e => e.ProductCategory)
                    .HasColumnName("Product Category")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode)
                    .HasColumnName("Product Code")
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("Product Description")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<VwHsipPromoChssEInventorysys>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_HSIP_PROMO_CHSS_E-INVENTORYSYS");

                entity.Property(e => e.Cdcregion)
                    .HasColumnName("CDCRegion")
                    .HasMaxLength(50);

                entity.Property(e => e.GuidId).HasColumnName("Guid_Id");

                entity.Property(e => e.HealthFacility)
                    .HasColumnName("Health Facility")
                    .HasMaxLength(90);

                entity.Property(e => e.HealthFacilityCode).HasColumnName("Health Facility Code");
            });

            modelBuilder.Entity<WebTemplateArv>(entity =>
            {
                entity.HasKey(e => e.ProductOrder)
                    .HasName("PK_WebTemplate_ARV_1");

                entity.ToTable("WebTemplate_ARV");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvFluconazole>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_ARV_Fluconazole");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Regimen)
                    .HasColumnName("regimen")
                    .HasMaxLength(150);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvFluconazoleNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WebTemplate_ARV_Fluconazole_New");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.Regimen)
                    .HasColumnName("regimen")
                    .HasMaxLength(150);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WebTemplate_ARV_New");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductNumbering)
                    .HasColumnName("product_numbering")
                    .HasMaxLength(5);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvPatients>(entity =>
            {
                entity.HasKey(e => e.ProductOrder)
                    .HasName("PK_WebTemplate_Patients");

                entity.ToTable("WebTemplate_ARV_Patients");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Regimen)
                    .HasColumnName("regimen")
                    .HasMaxLength(50);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvPatientsNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WebTemplate_ARV_Patients_New");

                entity.Property(e => e.CategoryCode).HasColumnName("Category_code");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.Regimen).HasMaxLength(50);

                entity.Property(e => e.RegimenCode).HasColumnName("regimen_code");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateArvPhysicalCount>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_ARV_PhysicalCount");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<WebTemplateHivTestKits>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_HIV_Test_Kits");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateHivTestKitsNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WebTemplate_HIV_Test_Kits_New");

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription)
                    .HasColumnName("item_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductNubering).HasColumnName("product_nubering");

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateHivTestKitsPhysicalCount>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_HIV_Test_Kits_PhysicalCount");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<WebTemplateHivTestKitsSummary>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_HIV_Test_Kits_Summary");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateHivTestKitsSummaryNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WebTemplate_HIV_Test_Kits_Summary_New");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.ProductOrder).HasColumnName("product_order");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateLaboratory>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_Laboratory");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.OriginalProductCode).HasColumnName("original_product_code");

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(255);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<WebTemplateLaboratoryPhysicalCount>(entity =>
            {
                entity.HasKey(e => e.ProductOrder);

                entity.ToTable("WebTemplate_Laboratory_PhysicalCount");

                entity.Property(e => e.ProductOrder)
                    .HasColumnName("product_order")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicUnit)
                    .HasColumnName("Basic_Unit")
                    .HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(10);

                entity.Property(e => e.ProductCode).HasColumnName("product_code");

                entity.Property(e => e.ProductDescription)
                    .HasColumnName("product_description")
                    .HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<WebTemplateOiSti>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_OI_STI");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.Amc).HasColumnName("AMC");

                entity.Property(e => e.BasicUnit).HasMaxLength(20);

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<WebTemplateOiStiPhysicalCount>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_OI_STI_PhysicalCount");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.BasicUnit).HasMaxLength(50);

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.QuantityStore).HasColumnName("Quantity_Store");
            });

            modelBuilder.Entity<WebTemplateRecipientEmail>(entity =>
            {
                entity.ToTable("WebTemplate_RecipientEmail");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(150);

                entity.Property(e => e.Lmis).HasColumnName("LMIS");
            });

            modelBuilder.Entity<WebTemplateRutf>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_RUTF");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.BasicUnit).HasMaxLength(50);

                entity.Property(e => e.ItemDescription).HasMaxLength(150);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<WebTemplateSmcSlm>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_SMC_SLM");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);

                entity.Property(e => e.UoM).HasMaxLength(20);
            });

            modelBuilder.Entity<WebTemplateSmcSlmPhysicalCount>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_SMC_SLM_PhysicalCount");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.DateOfPhysicalCount).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.Form).HasMaxLength(50);

                entity.Property(e => e.QuantityDispensary).HasColumnName("Quantity_Dispensary");

                entity.Property(e => e.UnitPack).HasMaxLength(50);
            });

            modelBuilder.Entity<WebTemplateSummaryGuides>(entity =>
            {
                entity.ToTable("WebTemplate_Summary_Guides");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.SummaryCategory)
                    .HasColumnName("Summary_Category")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.SummaryDescription).HasColumnName("Summary_Description");
            });

            modelBuilder.Entity<WebTemplateTb>(entity =>
            {
                entity.HasKey(e => e.ItemNumber);

                entity.ToTable("WebTemplate_TB");

                entity.Property(e => e.ItemNumber).ValueGeneratedNever();

                entity.Property(e => e.AdjustedAmc).HasColumnName("AdjustedAMC");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.PackSize).HasMaxLength(20);

                entity.Property(e => e.QuantityAllocated).HasColumnName("Quantity_Allocated");

                entity.Property(e => e.Rfsonotes)
                    .HasColumnName("RFSONotes")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<WebTemplateViralLoadReagents>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("WebTemplate_ViralLoadReagents");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.PackSize).HasMaxLength(50);

                entity.Property(e => e.ProductDescription).HasMaxLength(450);
            });

            modelBuilder.Entity<Zzzzzz>(entity =>
            {
                entity.HasKey(e => e.B);

                entity.ToTable("zzzzzz");

                entity.Property(e => e.B)
                    .HasColumnName("b")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.A)
                    .HasColumnName("a")
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
